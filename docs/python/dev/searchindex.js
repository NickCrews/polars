Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.approx_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.symmetric_difference", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.approx_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.symmetric_difference", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.approx_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.approx_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.symmetric_difference.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.approx_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.symmetric_difference", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.approx_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.symmetric_difference", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 97, 127, 143, 193, 261, 275, 473, 655, 690, 787, 837, 999, 1139], "refer": [0, 33, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 120, 152, 275, 369, 372, 471, 472, 510, 555, 582, 583, 584, 587, 690, 714, 752, 799, 896, 899, 1019, 1095, 1096, 1097, 1100, 1139], "input": [0, 71, 77, 99, 107, 108, 147, 171, 174, 193, 203, 218, 219, 226, 240, 250, 251, 254, 275, 282, 384, 404, 465, 472, 473, 482, 499, 544, 610, 612, 614, 615, 617, 620, 623, 624, 625, 632, 641, 642, 649, 650, 651, 653, 654, 655, 657, 661, 669, 672, 674, 680, 690, 701, 706, 726, 729, 756, 757, 758, 764, 769, 775, 776, 780, 799, 928, 995, 996, 998, 999, 1139], "output": [0, 28, 30, 33, 34, 35, 36, 37, 50, 112, 144, 172, 173, 175, 176, 187, 193, 198, 203, 205, 214, 218, 246, 250, 275, 285, 287, 289, 331, 469, 470, 471, 473, 481, 507, 518, 523, 525, 527, 529, 561, 607, 611, 613, 615, 626, 634, 635, 653, 654, 655, 677, 690, 701, 727, 728, 730, 731, 740, 741, 745, 746, 756, 758, 775, 779, 782, 787, 799, 806, 807, 809, 853, 999, 1017, 1074, 1127, 1139], "seri": [0, 1, 2, 13, 25, 62, 63, 72, 73, 74, 75, 79, 80, 81, 96, 98, 101, 103, 131, 135, 155, 163, 166, 168, 169, 172, 173, 177, 180, 181, 183, 185, 194, 195, 199, 210, 211, 216, 228, 232, 235, 238, 239, 255, 275, 288, 289, 300, 307, 315, 316, 318, 365, 387, 393, 402, 406, 409, 410, 413, 415, 416, 417, 429, 437, 440, 454, 455, 459, 460, 461, 467, 469, 471, 473, 504, 510, 511, 512, 513, 514, 516, 518, 519, 520, 526, 533, 536, 547, 571, 582, 583, 584, 587, 591, 597, 598, 606, 615, 616, 617, 621, 622, 627, 629, 630, 634, 635, 637, 638, 642, 643, 645, 647, 649, 650, 651, 652, 653, 654, 655, 658, 659, 662, 663, 665, 666, 669, 671, 672, 675, 677, 678, 679, 681, 690, 701, 723, 727, 728, 781, 799, 1131, 1133, 1135, 1138, 1140, 1143, 1144, 1145, 1147], "datafram": [0, 1, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 71, 72, 73, 74, 75, 77, 78, 79, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 124, 125, 126, 130, 131, 132, 133, 141, 273, 274, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 639, 640, 641, 642, 643, 644, 645, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 686, 690, 701, 711, 712, 715, 719, 720, 724, 727, 735, 736, 737, 738, 740, 741, 745, 746, 750, 754, 763, 764, 770, 771, 772, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 808, 823, 824, 835, 853, 854, 892, 924, 955, 956, 966, 999, 1017, 1072, 1086, 1087, 1108, 1116, 1117, 1127, 1139, 1146, 1147], "lazyfram": [0, 1, 56, 57, 59, 61, 71, 72, 73, 74, 75, 77, 78, 79, 121, 122, 123, 124, 125, 126, 127, 130, 135, 191, 204, 205, 219, 251, 275, 313, 390, 461, 690, 701, 798, 802, 1146, 1147], "express": [0, 50, 51, 52, 77, 78, 132, 135, 137, 147, 159, 161, 163, 171, 174, 193, 201, 205, 213, 218, 219, 226, 240, 250, 251, 254, 261, 275, 282, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 299, 300, 307, 309, 310, 311, 313, 319, 320, 321, 322, 323, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 379, 380, 384, 386, 387, 389, 390, 394, 396, 397, 398, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 422, 427, 428, 430, 431, 432, 436, 437, 442, 444, 461, 467, 468, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 484, 486, 488, 490, 494, 495, 496, 498, 499, 503, 504, 505, 506, 507, 509, 513, 514, 516, 531, 532, 533, 535, 537, 539, 540, 542, 544, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 566, 567, 568, 571, 572, 573, 574, 593, 594, 597, 599, 600, 603, 604, 606, 607, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 650, 651, 652, 653, 654, 655, 657, 661, 663, 665, 666, 667, 668, 669, 670, 672, 674, 676, 677, 678, 680, 681, 686, 689, 701, 706, 711, 712, 718, 719, 720, 723, 726, 729, 750, 756, 757, 761, 762, 764, 769, 775, 776, 777, 780, 787, 799, 802, 842, 843, 844, 852, 862, 914, 928, 961, 962, 966, 999, 1040, 1047, 1061, 1062, 1063, 1068, 1069, 1070, 1071, 1072, 1080, 1081, 1139], "selector": [0, 33, 148, 154, 156, 159, 197, 203, 205, 234, 242, 244, 275, 384, 690, 701, 708, 715, 716, 719, 745, 770, 799], "extend": [0, 99, 248, 275, 387, 690, 701, 808, 914, 1139], "function": [0, 33, 62, 71, 72, 73, 74, 75, 78, 80, 81, 97, 103, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 133, 143, 144, 152, 158, 166, 193, 197, 204, 205, 237, 241, 244, 245, 256, 261, 275, 285, 289, 330, 366, 381, 382, 383, 461, 469, 470, 471, 473, 499, 503, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 541, 601, 611, 615, 629, 630, 642, 643, 645, 651, 653, 654, 655, 665, 686, 690, 701, 711, 712, 714, 720, 740, 741, 745, 749, 752, 772, 782, 787, 799, 809, 852, 893, 907, 908, 909, 910, 924, 991, 999, 1017, 1027, 1028, 1042, 1043, 1049, 1054, 1121, 1139, 1147], "data": [0, 1, 6, 18, 19, 21, 30, 31, 32, 33, 34, 35, 39, 50, 51, 52, 56, 62, 71, 72, 74, 79, 81, 86, 87, 91, 93, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 126, 130, 131, 133, 134, 135, 137, 143, 150, 160, 170, 171, 172, 173, 174, 175, 176, 187, 188, 189, 191, 193, 203, 204, 208, 213, 214, 215, 224, 231, 236, 237, 241, 250, 253, 273, 275, 285, 286, 287, 291, 292, 293, 294, 295, 296, 299, 302, 303, 304, 305, 307, 309, 310, 311, 314, 315, 322, 323, 331, 332, 337, 338, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 373, 374, 375, 376, 377, 379, 380, 386, 397, 398, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 422, 427, 428, 430, 437, 442, 444, 463, 468, 473, 494, 495, 498, 499, 507, 509, 510, 513, 514, 516, 518, 530, 531, 539, 540, 541, 547, 549, 550, 552, 554, 555, 556, 557, 559, 560, 561, 566, 571, 572, 573, 574, 582, 583, 584, 587, 597, 599, 600, 601, 603, 604, 607, 610, 615, 617, 633, 634, 635, 636, 637, 638, 639, 649, 650, 652, 653, 654, 655, 663, 666, 676, 677, 678, 681, 686, 690, 701, 709, 710, 711, 720, 726, 727, 728, 729, 730, 731, 749, 775, 799, 806, 807, 808, 819, 823, 824, 825, 827, 831, 833, 841, 845, 853, 860, 861, 864, 865, 866, 867, 868, 870, 871, 872, 873, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 897, 900, 901, 902, 903, 904, 912, 913, 924, 930, 932, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 948, 957, 958, 960, 967, 972, 974, 993, 999, 1011, 1017, 1019, 1023, 1025, 1038, 1039, 1049, 1054, 1060, 1061, 1062, 1063, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1079, 1084, 1085, 1086, 1087, 1095, 1096, 1097, 1100, 1119, 1120, 1121, 1122, 1124, 1129, 1138, 1139, 1146], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 86, 96, 98, 99, 100, 101, 102, 107, 108, 109, 111, 112, 116, 117, 118, 121, 122, 123, 129, 130, 131, 134, 135, 144, 166, 170, 172, 173, 175, 176, 177, 188, 189, 193, 231, 237, 239, 242, 275, 285, 287, 291, 292, 293, 294, 295, 296, 299, 307, 309, 310, 311, 314, 315, 316, 319, 320, 321, 322, 323, 331, 332, 337, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 377, 384, 386, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 427, 428, 430, 437, 442, 444, 461, 472, 473, 507, 509, 513, 514, 516, 518, 539, 540, 547, 549, 550, 552, 554, 555, 556, 557, 559, 560, 561, 566, 571, 572, 573, 574, 582, 597, 599, 600, 601, 607, 615, 617, 633, 634, 635, 636, 637, 638, 639, 641, 642, 649, 650, 651, 652, 653, 654, 655, 663, 666, 676, 677, 678, 681, 686, 690, 701, 711, 712, 718, 720, 727, 728, 730, 731, 735, 750, 762, 770, 799, 806, 807, 819, 825, 827, 831, 833, 835, 842, 843, 844, 853, 860, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 900, 901, 902, 904, 912, 922, 930, 932, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 948, 957, 958, 960, 967, 972, 974, 991, 1011, 1017, 1023, 1025, 1049, 1060, 1061, 1062, 1063, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1079, 1084, 1085, 1086, 1087, 1095, 1119, 1120, 1122, 1130, 1139, 1146], "config": [0, 71, 218, 250, 275, 639, 701, 711, 756, 775, 799], "except": [0, 178, 190, 192, 229, 275, 641, 701, 736, 799, 802, 923, 953, 1110, 1120, 1129, 1139], "test": [0, 6, 109, 110, 112, 118, 701, 732, 739, 799], "util": [0, 103, 645, 701, 720, 799], "sql": [0, 31, 56, 60, 109, 110, 189, 275, 670, 701], "These": [1, 33, 109, 141, 241, 275, 373, 689, 893, 900], "allow": [1, 32, 33, 50, 51, 52, 62, 81, 86, 97, 109, 121, 124, 125, 126, 127, 135, 137, 143, 187, 190, 191, 213, 214, 216, 236, 237, 242, 253, 275, 362, 369, 372, 471, 473, 512, 531, 582, 583, 584, 690, 735, 736, 740, 741, 745, 770, 777, 799, 802, 889, 896, 899, 999, 1021, 1039, 1041, 1095, 1096, 1097, 1121, 1139, 1147], "you": [1, 15, 33, 38, 52, 61, 71, 78, 79, 96, 98, 99, 100, 102, 107, 108, 109, 110, 112, 113, 116, 117, 119, 121, 126, 130, 141, 160, 172, 173, 175, 176, 187, 193, 201, 205, 213, 214, 215, 233, 236, 241, 261, 275, 319, 320, 321, 358, 359, 362, 365, 369, 372, 373, 384, 390, 404, 436, 461, 471, 472, 473, 512, 517, 518, 521, 522, 523, 524, 525, 527, 528, 529, 560, 629, 634, 639, 643, 655, 663, 666, 681, 690, 712, 716, 727, 728, 730, 731, 732, 739, 762, 787, 799, 802, 808, 842, 843, 844, 885, 886, 892, 896, 899, 900, 913, 928, 966, 999, 1021, 1026, 1073, 1097, 1120, 1129, 1139, 1147], "regist": [1, 56, 58, 59, 60, 61, 72, 73, 74, 75, 136, 138, 1146], "custom": [1, 32, 33, 72, 73, 74, 75, 136, 137, 138, 144, 193, 256, 261, 275, 289, 369, 372, 461, 469, 471, 473, 519, 520, 615, 653, 654, 655, 690, 740, 741, 782, 787, 799, 809, 896, 899, 991, 999, 1027, 1028, 1139, 1147], "dedic": [1, 97, 187, 214, 275], "namespac": [1, 274, 689, 701, 798, 1147], "underli": [1, 62, 81, 82, 89, 96, 98, 99, 100, 102, 109, 116, 117, 119, 132, 135, 137, 159, 160, 187, 188, 214, 231, 275, 308, 338, 339, 343, 347, 349, 350, 351, 353, 355, 357, 360, 363, 364, 365, 367, 374, 375, 376, 377, 512, 530, 548, 551, 690, 719, 799, 802, 808, 826, 836, 861, 862, 866, 870, 872, 873, 877, 879, 882, 884, 887, 890, 891, 892, 894, 901, 902, 903, 904, 913, 1021, 1038, 1049, 1061, 1064, 1115, 1120, 1139], "polar": [1, 275, 689, 690, 695, 701, 799, 802, 1139, 1146], "class": [1, 2, 3, 4, 5, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 132, 133, 215, 237, 275, 677, 686, 690, 695, 701, 752, 799, 1119, 1120, 1139, 1146], "without": [1, 78, 103, 111, 114, 120, 122, 123, 127, 244, 245, 275, 289, 330, 366, 521, 522, 523, 524, 525, 527, 528, 529, 669, 690, 712, 772, 799, 834, 837, 852, 893, 924, 1017, 1120, 1139], "requir": [1, 32, 33, 38, 52, 71, 97, 101, 109, 130, 131, 147, 152, 213, 237, 240, 275, 305, 381, 382, 383, 463, 473, 536, 582, 583, 584, 604, 666, 690, 706, 764, 769, 799, 824, 908, 909, 910, 993, 1048, 1095, 1096, 1097, 1120, 1121, 1124, 1139], "subclass": [1, 275], "mixin": 1, "expr": [1, 71, 72, 73, 74, 75, 159, 161, 163, 189, 190, 201, 205, 213, 218, 219, 250, 251, 275, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 690, 691, 692, 695, 696, 697, 698, 719, 721, 735, 736, 751, 756, 757, 758, 761, 775, 776, 799, 852, 862, 889, 900, 915, 955, 956, 961, 962, 966, 970, 985, 989, 1047, 1061, 1066, 1088, 1111, 1139], "ar": [1, 13, 17, 20, 28, 30, 32, 33, 50, 51, 52, 61, 62, 71, 78, 79, 80, 81, 88, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 135, 141, 143, 147, 152, 156, 158, 161, 165, 166, 170, 171, 172, 173, 174, 175, 176, 187, 189, 190, 191, 193, 197, 198, 203, 205, 213, 214, 215, 218, 219, 220, 226, 232, 237, 240, 245, 246, 250, 251, 254, 275, 285, 287, 313, 324, 326, 328, 329, 366, 373, 378, 380, 381, 382, 383, 404, 406, 409, 410, 413, 415, 416, 417, 420, 423, 425, 444, 461, 471, 472, 495, 499, 507, 510, 513, 514, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 538, 541, 543, 544, 557, 558, 559, 566, 595, 611, 612, 614, 620, 623, 624, 625, 626, 632, 634, 635, 637, 638, 657, 661, 669, 672, 674, 677, 678, 680, 682, 683, 685, 689, 690, 691, 692, 695, 696, 697, 698, 701, 706, 711, 712, 716, 720, 721, 726, 727, 728, 729, 730, 731, 732, 735, 736, 739, 741, 745, 746, 750, 753, 756, 757, 759, 764, 769, 772, 775, 776, 777, 780, 799, 802, 806, 807, 808, 834, 850, 851, 893, 900, 906, 907, 908, 909, 910, 921, 928, 932, 936, 937, 941, 942, 943, 944, 951, 952, 955, 974, 991, 1017, 1019, 1023, 1034, 1051, 1054, 1070, 1071, 1079, 1097, 1109, 1120, 1121, 1129, 1131, 1133, 1135, 1139, 1140, 1143, 1144, 1145, 1147], "all": [1, 9, 17, 20, 25, 28, 30, 33, 39, 50, 58, 71, 77, 96, 99, 101, 102, 107, 108, 111, 112, 113, 115, 118, 119, 121, 124, 125, 132, 133, 137, 141, 148, 153, 156, 162, 178, 183, 185, 187, 188, 191, 192, 197, 200, 201, 208, 213, 214, 215, 219, 225, 229, 234, 236, 242, 244, 245, 246, 251, 275, 286, 288, 306, 324, 330, 335, 336, 337, 384, 389, 395, 399, 401, 403, 406, 410, 416, 417, 419, 423, 435, 436, 442, 457, 461, 470, 471, 489, 497, 505, 510, 515, 520, 536, 542, 544, 549, 550, 556, 557, 558, 559, 564, 567, 568, 570, 576, 577, 578, 579, 594, 612, 631, 632, 634, 641, 643, 648, 665, 672, 673, 674, 680, 690, 695, 701, 708, 711, 712, 716, 718, 720, 722, 740, 741, 745, 750, 757, 762, 763, 770, 772, 776, 777, 799, 802, 852, 854, 857, 858, 860, 923, 930, 948, 953, 965, 966, 972, 987, 991, 1019, 1028, 1055, 1062, 1063, 1069, 1070, 1071, 1072, 1077, 1080, 1081, 1083, 1089, 1090, 1091, 1092, 1110, 1139, 1146, 1147], "support": [1, 32, 33, 38, 79, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 111, 112, 116, 117, 118, 122, 123, 126, 132, 137, 141, 187, 188, 189, 190, 214, 215, 225, 226, 233, 237, 275, 455, 499, 542, 544, 571, 686, 690, 695, 735, 736, 763, 764, 799, 802, 985, 1055, 1084, 1121, 1139, 1146], "target": [1, 31, 32, 33, 76, 112, 275, 555, 582, 583, 584, 802, 1068, 1095, 1096, 1097], "thi": [1, 6, 9, 14, 15, 28, 30, 32, 33, 36, 38, 42, 50, 51, 52, 56, 57, 61, 62, 71, 77, 78, 79, 81, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 139, 141, 143, 144, 145, 146, 147, 150, 152, 156, 157, 158, 160, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 181, 183, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 206, 207, 208, 213, 214, 215, 216, 218, 219, 223, 225, 227, 228, 231, 233, 236, 237, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 256, 257, 261, 274, 275, 285, 288, 289, 290, 299, 305, 312, 313, 315, 316, 324, 330, 331, 337, 338, 350, 358, 359, 362, 365, 366, 369, 372, 376, 380, 386, 402, 403, 404, 407, 409, 411, 414, 419, 423, 431, 434, 436, 437, 441, 442, 444, 445, 450, 451, 452, 453, 456, 458, 461, 462, 463, 466, 467, 469, 471, 473, 477, 478, 479, 480, 481, 482, 492, 493, 495, 499, 505, 507, 510, 511, 512, 513, 514, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 531, 533, 535, 536, 537, 542, 543, 544, 549, 555, 562, 563, 564, 565, 569, 570, 576, 577, 578, 579, 585, 590, 594, 602, 604, 605, 606, 607, 611, 615, 616, 624, 627, 629, 634, 642, 643, 645, 651, 653, 655, 666, 669, 677, 680, 686, 690, 701, 702, 704, 705, 706, 707, 710, 711, 712, 716, 718, 720, 725, 726, 727, 728, 729, 730, 731, 733, 735, 736, 740, 741, 745, 746, 750, 752, 753, 756, 757, 758, 761, 762, 763, 764, 769, 770, 772, 775, 776, 777, 778, 779, 782, 783, 787, 798, 799, 802, 808, 809, 818, 824, 830, 833, 835, 836, 837, 845, 852, 853, 860, 861, 862, 873, 885, 886, 889, 892, 893, 896, 899, 903, 907, 912, 913, 920, 924, 929, 933, 935, 936, 938, 939, 945, 947, 949, 950, 952, 961, 964, 966, 967, 971, 972, 974, 975, 980, 981, 982, 983, 986, 988, 992, 993, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1026, 1027, 1029, 1030, 1032, 1035, 1036, 1037, 1039, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1055, 1056, 1058, 1062, 1068, 1075, 1076, 1077, 1078, 1082, 1083, 1089, 1090, 1091, 1092, 1097, 1098, 1103, 1104, 1108, 1109, 1115, 1117, 1119, 1120, 1121, 1123, 1124, 1126, 1127, 1128, 1129, 1139, 1146, 1147], "featur": [1, 38, 42, 76, 275], "i": [1, 6, 14, 15, 17, 30, 32, 33, 34, 35, 36, 37, 42, 50, 51, 52, 56, 61, 62, 71, 76, 77, 78, 79, 81, 83, 85, 86, 88, 92, 94, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 137, 139, 140, 141, 145, 147, 150, 156, 158, 160, 163, 167, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 201, 203, 204, 205, 213, 214, 215, 216, 219, 225, 226, 227, 228, 229, 231, 236, 237, 240, 241, 242, 244, 245, 246, 247, 251, 253, 257, 261, 274, 275, 282, 285, 287, 288, 289, 290, 300, 313, 330, 331, 335, 336, 337, 339, 349, 362, 366, 369, 373, 381, 382, 383, 386, 390, 399, 402, 404, 420, 426, 435, 436, 439, 455, 460, 461, 466, 471, 472, 473, 477, 480, 481, 482, 499, 507, 510, 512, 513, 514, 517, 518, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 537, 538, 541, 542, 543, 544, 546, 548, 549, 550, 555, 556, 557, 559, 560, 563, 564, 566, 567, 569, 570, 571, 574, 576, 577, 578, 579, 582, 583, 584, 587, 590, 607, 608, 611, 613, 616, 621, 624, 626, 627, 629, 630, 634, 635, 637, 638, 643, 652, 655, 666, 667, 668, 669, 671, 677, 678, 679, 680, 686, 690, 704, 706, 710, 711, 712, 716, 718, 720, 723, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 738, 740, 741, 745, 746, 750, 757, 758, 762, 763, 764, 765, 769, 770, 772, 773, 776, 779, 782, 783, 787, 799, 802, 806, 807, 808, 809, 834, 837, 845, 852, 853, 857, 858, 860, 862, 872, 889, 893, 896, 900, 907, 908, 909, 910, 912, 913, 917, 921, 922, 923, 924, 929, 931, 938, 945, 946, 947, 949, 950, 951, 953, 956, 965, 966, 969, 985, 990, 991, 999, 1017, 1019, 1021, 1023, 1026, 1028, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1050, 1051, 1054, 1055, 1058, 1061, 1062, 1063, 1068, 1069, 1070, 1072, 1073, 1076, 1077, 1079, 1080, 1082, 1083, 1084, 1087, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1100, 1103, 1110, 1115, 1120, 1121, 1127, 1128, 1129, 1139, 1146, 1147], "primarili": 1, "intend": 1, "us": [1, 12, 13, 14, 15, 20, 25, 30, 31, 33, 38, 41, 50, 52, 56, 57, 58, 59, 61, 62, 71, 78, 79, 80, 81, 97, 99, 100, 102, 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 139, 144, 145, 148, 154, 156, 161, 162, 166, 171, 172, 173, 174, 175, 176, 183, 185, 187, 188, 190, 193, 195, 197, 200, 201, 203, 204, 205, 213, 214, 215, 216, 218, 219, 226, 227, 228, 233, 234, 235, 236, 237, 241, 242, 244, 245, 246, 247, 250, 251, 254, 261, 275, 283, 285, 287, 289, 290, 300, 308, 309, 316, 330, 335, 336, 365, 366, 369, 372, 373, 376, 378, 381, 382, 383, 384, 389, 390, 403, 404, 420, 436, 461, 471, 472, 473, 476, 499, 507, 510, 512, 514, 517, 518, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 533, 536, 541, 543, 544, 546, 548, 551, 552, 553, 555, 556, 558, 560, 561, 563, 567, 569, 571, 573, 575, 582, 583, 584, 587, 608, 611, 612, 613, 614, 616, 622, 625, 626, 629, 631, 632, 634, 635, 636, 637, 638, 639, 643, 645, 652, 655, 656, 657, 660, 661, 663, 666, 667, 668, 669, 671, 672, 673, 674, 677, 678, 679, 681, 686, 689, 690, 700, 701, 704, 708, 711, 712, 715, 716, 720, 721, 722, 725, 726, 727, 728, 730, 731, 732, 736, 738, 739, 745, 756, 757, 764, 765, 770, 772, 773, 775, 776, 780, 787, 799, 802, 806, 807, 808, 809, 826, 827, 835, 837, 852, 853, 857, 858, 892, 893, 896, 899, 900, 903, 906, 908, 909, 910, 915, 916, 921, 924, 927, 928, 951, 966, 991, 998, 999, 1017, 1019, 1021, 1023, 1026, 1028, 1039, 1042, 1043, 1044, 1048, 1054, 1058, 1061, 1064, 1065, 1068, 1069, 1071, 1073, 1074, 1076, 1080, 1082, 1084, 1086, 1095, 1096, 1097, 1100, 1111, 1116, 1118, 1119, 1120, 1121, 1128, 1129, 1139, 1146, 1147], "librari": [1, 82, 89, 109, 112, 471, 690, 1147], "author": 1, "domain": [1, 556, 1069], "specif": [1, 28, 32, 33, 96, 98, 100, 102, 107, 110, 111, 112, 116, 117, 118, 122, 134, 135, 148, 187, 275, 369, 372, 582, 583, 584, 587, 708, 799, 802, 896, 899, 1095, 1096, 1097, 1100, 1139, 1147], "capabl": [1, 33, 275], "which": [1, 11, 20, 29, 30, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 62, 71, 72, 73, 74, 75, 99, 107, 108, 109, 110, 111, 112, 121, 122, 123, 130, 136, 138, 147, 148, 156, 160, 161, 171, 172, 173, 174, 175, 176, 190, 236, 240, 242, 246, 275, 285, 313, 362, 366, 369, 373, 387, 404, 406, 410, 413, 415, 416, 417, 461, 473, 482, 517, 518, 521, 522, 523, 524, 525, 527, 528, 529, 566, 634, 635, 637, 638, 639, 677, 678, 680, 690, 706, 708, 716, 718, 727, 728, 730, 731, 736, 758, 769, 770, 779, 799, 808, 889, 893, 896, 900, 913, 914, 928, 932, 937, 941, 942, 943, 944, 991, 1026, 1042, 1079, 1120, 1139, 1147], "mai": [1, 32, 42, 52, 78, 79, 96, 98, 99, 100, 102, 107, 109, 111, 113, 116, 117, 122, 123, 124, 127, 158, 160, 172, 173, 190, 193, 222, 223, 237, 244, 245, 246, 275, 289, 330, 337, 338, 350, 362, 366, 373, 384, 454, 460, 461, 471, 473, 481, 518, 521, 522, 523, 524, 525, 527, 528, 529, 534, 535, 560, 629, 630, 634, 635, 637, 638, 643, 665, 677, 678, 690, 711, 712, 720, 727, 728, 736, 740, 741, 760, 761, 772, 778, 782, 787, 799, 808, 836, 837, 852, 860, 861, 873, 889, 893, 900, 907, 913, 924, 984, 990, 999, 1017, 1046, 1047, 1073, 1097, 1120, 1139, 1147], "exist": [1, 31, 32, 33, 71, 111, 122, 135, 241, 250, 251, 275, 284, 307, 310, 311, 339, 690, 775, 776, 799, 802, 862], "belong": [1, 172, 275, 727, 799], "core": [1, 237, 275, 1147], "cannot": [1, 107, 108, 112, 113, 118, 130, 139, 193, 215, 216, 261, 275, 308, 384, 472, 473, 531, 551, 573, 592, 655, 690, 762, 787, 799, 826, 999, 1039, 1064, 1086, 1139], "overrid": [1, 33, 96, 98, 99, 100, 101, 102, 107, 109, 110, 112, 116, 117, 118, 132, 133, 137, 139, 275, 472, 690, 799, 998, 1139], "str": [1, 7, 8, 10, 11, 14, 16, 17, 20, 21, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 50, 51, 52, 56, 57, 58, 59, 60, 61, 71, 72, 73, 74, 75, 76, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 133, 135, 136, 137, 138, 141, 147, 148, 151, 153, 154, 155, 156, 157, 158, 159, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 176, 178, 180, 183, 185, 186, 187, 189, 190, 194, 195, 196, 197, 198, 199, 201, 203, 205, 207, 209, 210, 211, 212, 213, 214, 216, 220, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 282, 283, 284, 307, 309, 310, 311, 315, 331, 334, 340, 362, 365, 366, 369, 372, 373, 384, 386, 390, 392, 396, 402, 404, 429, 430, 439, 440, 442, 455, 459, 461, 470, 472, 473, 481, 483, 484, 486, 496, 499, 503, 505, 507, 513, 515, 517, 518, 521, 522, 523, 524, 525, 527, 528, 529, 535, 536, 543, 544, 591, 592, 594, 597, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 690, 696, 706, 708, 711, 712, 713, 714, 715, 716, 718, 719, 720, 723, 725, 726, 727, 728, 730, 731, 733, 735, 736, 745, 746, 750, 752, 753, 754, 758, 759, 761, 762, 763, 764, 769, 770, 771, 772, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 805, 831, 833, 853, 854, 863, 889, 892, 893, 896, 899, 900, 912, 916, 960, 961, 962, 972, 991, 998, 1008, 1009, 1017, 1022, 1042, 1043, 1104, 1106, 1116, 1117, 1118, 1127, 1139, 1143, 1146, 1147], "dt": [1, 71, 112, 118, 173, 275, 518, 634, 639, 690, 698, 728, 799, 802, 1145], "attempt": [1, 236, 275], "do": [1, 33, 50, 51, 52, 71, 77, 78, 79, 107, 121, 130, 131, 160, 172, 173, 175, 176, 190, 205, 231, 241, 244, 275, 330, 436, 499, 518, 577, 578, 579, 663, 666, 681, 690, 711, 712, 718, 727, 728, 730, 731, 736, 740, 741, 750, 762, 799, 802, 808, 852, 913, 966, 1090, 1091, 1092, 1120, 1129, 1139], "so": [1, 109, 110, 121, 139, 170, 172, 173, 175, 176, 205, 275, 300, 313, 404, 439, 461, 473, 518, 577, 578, 579, 690, 727, 728, 730, 731, 799, 969, 1090, 1091, 1092], "rais": [1, 16, 20, 32, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 108, 112, 118, 121, 130, 131, 143, 205, 213, 275, 308, 365, 366, 373, 460, 481, 507, 548, 551, 566, 582, 583, 584, 587, 636, 652, 690, 826, 892, 893, 900, 990, 1017, 1061, 1064, 1079, 1095, 1096, 1097, 1100, 1120, 1129, 1139], "an": [1, 28, 30, 31, 32, 33, 42, 50, 51, 72, 74, 75, 77, 78, 81, 82, 86, 87, 89, 96, 107, 108, 109, 110, 111, 112, 114, 118, 119, 121, 123, 124, 133, 135, 137, 148, 149, 150, 158, 161, 163, 166, 172, 173, 175, 176, 187, 188, 190, 193, 201, 205, 211, 213, 231, 236, 241, 244, 250, 261, 275, 284, 308, 314, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 339, 340, 362, 365, 369, 376, 387, 389, 390, 396, 419, 431, 432, 436, 439, 460, 461, 470, 471, 473, 482, 506, 507, 514, 517, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 548, 551, 556, 582, 583, 584, 587, 597, 603, 611, 617, 621, 634, 635, 637, 638, 640, 645, 649, 650, 652, 663, 665, 666, 669, 672, 677, 678, 680, 681, 686, 690, 701, 708, 709, 710, 711, 712, 718, 720, 723, 727, 728, 730, 731, 736, 741, 750, 762, 775, 777, 787, 799, 802, 826, 831, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 862, 896, 903, 907, 914, 938, 950, 961, 962, 966, 969, 990, 999, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1042, 1043, 1061, 1064, 1069, 1095, 1096, 1097, 1100, 1120, 1129, 1139, 1146], "attributeerror": 1, "howev": [1, 99, 109, 158, 193, 236, 275, 907, 1139], "can": [1, 15, 32, 33, 38, 41, 61, 62, 71, 80, 81, 87, 97, 99, 107, 108, 109, 112, 113, 118, 119, 121, 124, 126, 127, 133, 134, 135, 137, 139, 141, 147, 149, 156, 157, 166, 171, 172, 173, 174, 175, 176, 183, 185, 193, 201, 205, 215, 218, 226, 236, 240, 241, 244, 250, 261, 275, 285, 289, 326, 329, 330, 358, 359, 362, 365, 373, 387, 404, 419, 436, 461, 473, 481, 489, 499, 505, 507, 512, 518, 521, 522, 523, 524, 525, 527, 528, 529, 533, 536, 538, 541, 544, 559, 577, 578, 579, 582, 594, 620, 643, 645, 655, 680, 686, 689, 690, 700, 706, 711, 716, 718, 720, 727, 728, 730, 731, 756, 758, 764, 769, 775, 778, 799, 802, 809, 837, 852, 853, 885, 886, 889, 892, 893, 900, 914, 928, 966, 991, 999, 1004, 1017, 1021, 1042, 1043, 1044, 1048, 1051, 1054, 1062, 1063, 1070, 1072, 1090, 1091, 1092, 1095, 1097, 1120, 1139, 1146], "other": [1, 20, 32, 33, 38, 61, 78, 107, 108, 109, 121, 130, 131, 156, 160, 167, 189, 190, 197, 198, 213, 215, 218, 219, 245, 248, 250, 251, 273, 275, 282, 286, 288, 300, 319, 320, 321, 334, 379, 380, 394, 397, 398, 404, 409, 422, 429, 434, 441, 450, 451, 452, 453, 458, 462, 468, 472, 477, 480, 488, 490, 494, 495, 498, 544, 593, 601, 603, 610, 612, 614, 623, 624, 625, 632, 634, 657, 661, 669, 672, 674, 690, 701, 712, 716, 735, 736, 745, 746, 756, 757, 772, 775, 776, 777, 799, 802, 808, 842, 843, 844, 856, 913, 936, 959, 964, 971, 980, 981, 982, 983, 988, 992, 1041, 1122, 1130, 1138, 1139], "onli": [1, 20, 28, 30, 33, 50, 56, 58, 62, 71, 76, 79, 81, 107, 108, 111, 113, 115, 119, 121, 122, 124, 125, 126, 135, 137, 141, 144, 156, 160, 172, 173, 175, 187, 189, 190, 193, 195, 205, 214, 215, 228, 233, 235, 236, 246, 261, 275, 283, 285, 287, 289, 300, 313, 318, 319, 320, 321, 362, 370, 384, 393, 419, 473, 499, 505, 512, 521, 522, 523, 524, 525, 527, 528, 529, 594, 605, 634, 635, 655, 690, 711, 716, 727, 728, 730, 731, 732, 735, 736, 739, 787, 799, 806, 807, 808, 839, 842, 843, 844, 853, 889, 913, 919, 938, 999, 1017, 1021, 1115, 1118, 1139, 1146, 1147], "gener": [1, 109, 110, 128, 132, 133, 134, 135, 137, 143, 152, 205, 216, 234, 236, 241, 275, 531, 537, 617, 634, 637, 649, 650, 666, 677, 678, 690, 799, 1039, 1050, 1116, 1139, 1147], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 74, 75, 79, 80, 81, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 109, 110, 111, 112, 113, 118, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 141, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 686, 690, 702, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 909, 910, 913, 914, 915, 916, 917, 919, 922, 923, 924, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 952, 955, 956, 963, 965, 966, 967, 970, 972, 974, 980, 981, 983, 984, 985, 986, 989, 991, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1061, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1079, 1080, 1081, 1082, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1139, 1146, 1147], "register_expr_namespac": [1, 72, 74, 75], "greet": 1, "def": [1, 62, 72, 73, 74, 75, 133, 134, 135, 137, 141, 204, 241, 275, 282, 503, 556, 610, 654, 690, 712, 749, 799, 802, 1069, 1147], "__init__": [1, 2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 132, 1146], "self": [1, 57, 58, 59, 61, 72, 73, 74, 75, 77, 78, 149, 150, 153, 160, 178, 180, 181, 192, 194, 195, 196, 197, 199, 202, 203, 205, 207, 208, 210, 211, 216, 222, 224, 225, 227, 228, 229, 234, 241, 243, 246, 247, 248, 252, 253, 275, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 306, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 686, 690, 704, 705, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 799, 808, 809, 831, 845, 913, 917, 925, 997, 998, 999, 1010, 1014, 1015, 1020, 1042, 1043, 1044, 1056, 1126, 1130, 1139], "_expr": [1, 73], "hello": [1, 20, 57, 60, 577, 578, 579, 972, 1090, 1091, 1092], "return": [1, 10, 11, 28, 30, 33, 34, 35, 36, 37, 50, 51, 52, 56, 60, 62, 71, 72, 73, 74, 75, 76, 77, 78, 88, 90, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 134, 144, 147, 149, 152, 155, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 174, 175, 178, 180, 186, 187, 188, 189, 191, 192, 193, 200, 201, 203, 204, 205, 213, 214, 215, 216, 229, 230, 236, 237, 240, 241, 242, 246, 250, 251, 259, 261, 264, 269, 275, 285, 287, 291, 292, 293, 294, 295, 296, 299, 300, 307, 309, 310, 311, 312, 322, 323, 324, 331, 332, 337, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 373, 374, 375, 377, 386, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 423, 424, 427, 428, 430, 437, 439, 440, 442, 444, 445, 459, 460, 467, 472, 482, 484, 489, 503, 507, 509, 513, 514, 516, 531, 532, 538, 539, 540, 547, 549, 550, 552, 554, 555, 556, 557, 559, 560, 561, 562, 563, 565, 566, 569, 571, 572, 573, 574, 590, 596, 597, 598, 599, 600, 602, 603, 605, 606, 607, 610, 611, 615, 617, 618, 619, 620, 621, 633, 634, 635, 636, 637, 638, 639, 645, 647, 649, 650, 652, 653, 654, 655, 663, 666, 669, 672, 675, 676, 677, 678, 680, 681, 690, 706, 709, 711, 712, 717, 718, 720, 727, 728, 730, 731, 732, 738, 739, 741, 749, 750, 758, 762, 767, 768, 769, 770, 775, 776, 779, 785, 790, 795, 799, 806, 807, 808, 816, 817, 819, 820, 825, 827, 830, 834, 837, 841, 853, 854, 860, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 897, 898, 900, 901, 902, 904, 907, 912, 913, 921, 923, 924, 930, 932, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 948, 950, 952, 953, 957, 958, 960, 967, 969, 970, 972, 974, 975, 989, 990, 997, 998, 999, 1004, 1011, 1017, 1023, 1024, 1025, 1026, 1039, 1040, 1041, 1043, 1051, 1060, 1061, 1062, 1063, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1082, 1084, 1085, 1086, 1087, 1103, 1110, 1112, 1123, 1125, 1126, 1127, 1130, 1139, 1146, 1147], "lit": [1, 284, 307, 404, 419, 629, 643, 663, 666, 680, 681, 690, 916, 1139], "alia": [1, 14, 71, 73, 75, 172, 173, 192, 205, 243, 250, 275, 282, 286, 307, 309, 310, 311, 312, 319, 320, 321, 325, 326, 327, 328, 329, 331, 333, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 390, 392, 394, 397, 398, 402, 404, 408, 409, 412, 419, 422, 423, 424, 432, 436, 450, 451, 452, 453, 468, 470, 472, 473, 477, 478, 479, 480, 482, 485, 488, 490, 494, 495, 498, 500, 504, 507, 510, 512, 532, 548, 550, 553, 555, 556, 560, 561, 571, 572, 573, 574, 575, 580, 581, 591, 592, 593, 601, 602, 603, 609, 610, 617, 618, 619, 622, 623, 624, 625, 629, 630, 634, 639, 640, 643, 644, 654, 655, 665, 666, 672, 677, 680, 690, 727, 728, 733, 739, 771, 775, 799, 853, 861, 863, 869, 889, 892, 896, 898, 953, 966, 998, 1017, 1022, 1068, 1069, 1086, 1087, 1139], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 20, 57, 60, 577, 578, 579, 588, 972, 1090, 1091, 1092, 1101], "select": [1, 31, 56, 57, 58, 71, 72, 73, 74, 106, 107, 108, 109, 110, 111, 113, 115, 119, 121, 127, 134, 186, 190, 193, 201, 204, 213, 219, 225, 238, 243, 246, 275, 281, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 315, 317, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 344, 348, 349, 350, 351, 352, 354, 356, 358, 359, 361, 362, 365, 368, 373, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 391, 393, 395, 399, 401, 402, 403, 405, 406, 409, 410, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 456, 457, 461, 463, 464, 465, 466, 467, 471, 473, 474, 475, 476, 487, 489, 491, 492, 493, 496, 497, 498, 501, 502, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 520, 526, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 554, 555, 556, 557, 558, 559, 563, 566, 569, 573, 574, 577, 578, 579, 582, 585, 586, 588, 589, 591, 592, 595, 598, 599, 600, 602, 604, 605, 606, 607, 608, 611, 613, 616, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 639, 641, 642, 643, 644, 645, 647, 651, 656, 658, 659, 660, 662, 665, 666, 670, 671, 672, 673, 675, 679, 686, 690, 713, 733, 736, 749, 757, 758, 763, 771, 777, 799, 802, 823, 824, 892, 955, 956, 966, 1042, 1043, 1055, 1072, 1095, 1111, 1139, 1146], "shape": [1, 2, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 53, 56, 57, 58, 60, 62, 63, 71, 72, 73, 74, 75, 79, 80, 81, 93, 96, 97, 98, 99, 100, 101, 102, 103, 121, 127, 135, 137, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 166, 168, 169, 171, 172, 173, 177, 178, 180, 181, 182, 183, 185, 186, 189, 190, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 216, 218, 222, 223, 225, 226, 227, 228, 229, 230, 232, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 637, 639, 640, 641, 642, 643, 644, 645, 647, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 686, 690, 704, 706, 708, 709, 711, 712, 714, 715, 716, 719, 720, 721, 722, 723, 724, 726, 727, 728, 732, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 805, 808, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 830, 831, 833, 835, 836, 838, 839, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 909, 910, 913, 914, 915, 916, 917, 919, 922, 923, 924, 927, 928, 930, 932, 934, 936, 937, 940, 941, 942, 943, 944, 948, 950, 955, 956, 963, 965, 966, 967, 970, 972, 974, 980, 981, 983, 984, 985, 986, 989, 991, 997, 998, 999, 1004, 1011, 1013, 1014, 1015, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1061, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1079, 1080, 1081, 1082, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1108, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1122, 1123, 1124, 1125, 1126, 1127, 1130, 1139, 1146], "3": [1, 2, 12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 53, 56, 58, 59, 61, 63, 71, 72, 73, 74, 75, 79, 81, 96, 97, 98, 99, 100, 101, 102, 103, 110, 112, 118, 121, 127, 129, 130, 131, 134, 135, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 282, 283, 284, 285, 287, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 344, 346, 347, 349, 350, 355, 357, 362, 364, 365, 366, 367, 369, 371, 372, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 418, 419, 420, 422, 423, 424, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 464, 465, 466, 467, 468, 470, 472, 473, 488, 489, 490, 494, 496, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 541, 543, 544, 545, 548, 549, 552, 553, 555, 556, 557, 558, 560, 561, 564, 567, 570, 571, 572, 573, 574, 575, 576, 583, 587, 591, 592, 593, 594, 596, 597, 598, 602, 605, 606, 607, 609, 610, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 686, 690, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 805, 808, 810, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 830, 831, 833, 835, 836, 838, 839, 840, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 866, 867, 869, 870, 872, 874, 875, 876, 878, 880, 881, 882, 884, 888, 890, 892, 893, 894, 896, 898, 899, 900, 902, 903, 907, 909, 910, 913, 914, 915, 916, 917, 919, 922, 923, 924, 927, 928, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 951, 952, 961, 963, 965, 966, 967, 970, 974, 980, 981, 983, 984, 985, 986, 989, 991, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1050, 1052, 1053, 1054, 1055, 1056, 1058, 1062, 1065, 1066, 1068, 1069, 1070, 1071, 1073, 1074, 1077, 1080, 1083, 1084, 1088, 1089, 1096, 1100, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1139, 1146, 1147], "1": [1, 2, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 52, 53, 56, 57, 58, 59, 60, 61, 63, 71, 72, 73, 74, 75, 79, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 112, 113, 118, 121, 122, 123, 126, 127, 129, 130, 131, 132, 135, 137, 143, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 573, 574, 575, 577, 578, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 616, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 686, 690, 704, 706, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 732, 733, 734, 735, 736, 737, 739, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 805, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 830, 831, 835, 836, 838, 839, 840, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 909, 910, 913, 914, 915, 916, 917, 919, 922, 923, 924, 927, 928, 930, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 947, 948, 950, 952, 955, 956, 963, 965, 966, 967, 969, 970, 974, 980, 981, 983, 984, 985, 986, 989, 991, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1013, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1068, 1070, 1071, 1072, 1073, 1074, 1080, 1086, 1087, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1139, 1146, 1147], "2": [1, 2, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 53, 56, 58, 59, 61, 63, 71, 72, 73, 74, 75, 79, 96, 97, 98, 99, 100, 101, 102, 103, 110, 121, 127, 128, 129, 130, 131, 134, 135, 137, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 281, 282, 283, 284, 286, 288, 290, 297, 299, 300, 301, 302, 303, 304, 305, 306, 312, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 337, 339, 340, 343, 344, 345, 347, 348, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 484, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 541, 542, 543, 544, 545, 547, 550, 553, 555, 557, 558, 559, 560, 561, 566, 567, 568, 571, 573, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 639, 640, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 665, 669, 670, 671, 672, 673, 675, 678, 679, 680, 686, 690, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 732, 733, 735, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 753, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 805, 808, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 830, 835, 836, 838, 839, 840, 841, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 860, 862, 864, 865, 868, 870, 874, 875, 876, 881, 882, 884, 885, 886, 891, 892, 893, 897, 900, 902, 903, 904, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 919, 922, 923, 924, 927, 928, 930, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 947, 948, 952, 963, 965, 966, 967, 970, 972, 974, 980, 981, 983, 984, 985, 986, 989, 991, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1013, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1060, 1063, 1068, 1070, 1071, 1072, 1074, 1079, 1080, 1081, 1086, 1087, 1090, 1091, 1092, 1095, 1097, 1098, 1099, 1101, 1102, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1139, 1146, 1147], "column_0": [1, 193, 241, 275], "register_dataframe_namespac": [1, 73, 74, 75], "split": [1, 33, 72, 188, 275, 573, 574, 1086, 1087], "splitfram": [1, 72], "df": [1, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 53, 56, 57, 72, 73, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 121, 133, 135, 141, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 639, 640, 641, 642, 643, 644, 645, 647, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 686, 690, 727, 728, 758, 771, 772, 785, 787, 795, 799, 802, 823, 824, 835, 892, 955, 956, 966, 1072, 1081, 1086, 1087, 1117, 1139, 1147], "_df": [1, 72], "by_alternate_row": 1, "list": [1, 2, 32, 33, 41, 56, 60, 71, 72, 74, 77, 78, 96, 98, 99, 100, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 133, 134, 135, 137, 151, 154, 157, 158, 159, 163, 169, 171, 172, 180, 187, 200, 203, 213, 214, 215, 218, 226, 232, 233, 241, 242, 243, 244, 250, 254, 255, 275, 283, 305, 331, 386, 392, 401, 469, 471, 473, 482, 483, 499, 507, 513, 514, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 543, 544, 556, 572, 591, 592, 597, 601, 620, 624, 635, 638, 640, 648, 650, 652, 655, 670, 672, 678, 690, 713, 717, 719, 726, 727, 756, 764, 770, 771, 775, 777, 780, 781, 799, 802, 824, 840, 853, 907, 912, 917, 920, 924, 925, 936, 1017, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1040, 1069, 1085, 1111, 1119, 1122, 1139, 1147], "with_row_count": [1, 275, 472, 521, 522, 524, 527, 528, 529, 690, 799, 1043, 1139], "name": [1, 18, 22, 24, 30, 31, 33, 36, 50, 57, 58, 59, 60, 61, 72, 73, 74, 75, 79, 85, 96, 98, 99, 100, 101, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 147, 148, 151, 154, 155, 156, 159, 164, 165, 168, 170, 171, 174, 186, 187, 189, 190, 193, 197, 198, 203, 205, 209, 213, 214, 215, 217, 218, 219, 226, 232, 234, 236, 239, 240, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 275, 284, 289, 307, 309, 310, 311, 331, 384, 404, 419, 461, 470, 473, 481, 483, 499, 505, 507, 544, 556, 557, 591, 592, 594, 611, 612, 613, 614, 616, 618, 619, 620, 623, 624, 625, 626, 628, 631, 632, 634, 641, 647, 648, 656, 657, 660, 661, 664, 666, 667, 668, 669, 672, 673, 674, 675, 677, 680, 686, 690, 706, 708, 713, 715, 716, 719, 726, 729, 735, 736, 745, 746, 753, 755, 756, 757, 758, 764, 769, 770, 771, 772, 775, 776, 778, 780, 799, 802, 805, 841, 853, 991, 1017, 1022, 1068, 1069, 1070, 1080, 1104, 1106, 1116, 1117, 1121, 1139, 1146, 1147], "n": [1, 14, 17, 25, 30, 37, 41, 43, 50, 58, 59, 72, 73, 74, 75, 105, 107, 108, 121, 144, 149, 160, 172, 178, 187, 188, 192, 193, 214, 215, 216, 227, 229, 230, 233, 235, 247, 259, 269, 275, 312, 330, 333, 338, 339, 346, 371, 376, 387, 400, 424, 433, 440, 450, 459, 461, 500, 503, 513, 527, 529, 531, 541, 546, 560, 561, 567, 573, 574, 577, 578, 584, 596, 598, 602, 603, 608, 610, 626, 634, 635, 636, 637, 638, 645, 647, 663, 666, 667, 668, 671, 675, 679, 681, 690, 709, 711, 727, 732, 739, 765, 767, 768, 773, 785, 795, 799, 802, 808, 830, 841, 852, 855, 861, 862, 869, 898, 903, 913, 914, 923, 953, 963, 970, 980, 989, 991, 1013, 1035, 1037, 1039, 1054, 1058, 1073, 1074, 1080, 1086, 1087, 1097, 1110, 1112, 1118, 1123, 1128, 1139, 1146, 1147], "filter": [1, 72, 111, 121, 122, 127, 156, 183, 184, 185, 205, 261, 275, 481, 483, 553, 575, 609, 643, 680, 690, 716, 720, 733, 787, 799, 802, 1042, 1139], "col": [1, 14, 30, 33, 50, 71, 72, 73, 74, 100, 102, 121, 133, 135, 163, 171, 172, 173, 184, 186, 191, 193, 201, 204, 205, 213, 218, 226, 243, 244, 250, 254, 275, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 402, 403, 404, 405, 408, 409, 412, 413, 415, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 461, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 621, 623, 624, 625, 629, 630, 631, 639, 642, 643, 644, 645, 646, 651, 656, 660, 664, 665, 673, 680, 690, 710, 723, 726, 727, 728, 733, 738, 749, 756, 764, 771, 775, 777, 780, 799, 802, 823, 824, 835, 889, 892, 955, 956, 966, 1023, 1042, 1043, 1072, 1095, 1139, 1147], "0": [1, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 38, 52, 53, 56, 61, 71, 72, 73, 75, 79, 81, 97, 107, 108, 109, 110, 112, 113, 115, 118, 119, 121, 124, 125, 126, 127, 129, 132, 133, 134, 135, 137, 143, 144, 146, 148, 149, 150, 152, 153, 154, 157, 161, 162, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 181, 186, 187, 188, 189, 191, 193, 194, 195, 196, 199, 200, 201, 202, 205, 206, 207, 211, 214, 215, 216, 217, 218, 223, 225, 226, 227, 228, 234, 235, 236, 237, 238, 241, 244, 246, 247, 250, 252, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 275, 281, 283, 284, 286, 289, 291, 292, 293, 294, 295, 296, 299, 300, 301, 313, 314, 317, 318, 320, 321, 322, 323, 325, 330, 331, 332, 335, 336, 347, 351, 352, 354, 355, 361, 365, 367, 368, 373, 379, 380, 381, 382, 383, 385, 387, 388, 389, 390, 393, 394, 397, 398, 399, 403, 406, 407, 410, 411, 413, 414, 415, 416, 417, 419, 420, 422, 427, 428, 431, 432, 434, 436, 439, 441, 445, 447, 458, 461, 462, 464, 465, 466, 468, 469, 471, 472, 474, 475, 476, 482, 487, 488, 490, 492, 493, 494, 495, 497, 498, 500, 503, 504, 507, 508, 509, 510, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 536, 538, 539, 540, 541, 545, 546, 549, 550, 555, 556, 562, 564, 565, 570, 576, 582, 584, 590, 593, 595, 599, 600, 601, 603, 608, 609, 611, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626, 628, 629, 634, 636, 640, 643, 649, 650, 653, 655, 658, 659, 663, 664, 665, 666, 670, 676, 677, 678, 679, 680, 681, 686, 690, 705, 708, 709, 710, 715, 717, 721, 722, 725, 726, 727, 729, 730, 731, 735, 738, 740, 741, 744, 748, 750, 751, 752, 755, 756, 761, 762, 764, 765, 773, 775, 777, 778, 779, 780, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 799, 802, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 831, 836, 838, 839, 841, 846, 847, 852, 853, 854, 856, 857, 858, 870, 875, 876, 877, 878, 879, 880, 882, 887, 888, 892, 894, 895, 900, 906, 908, 909, 910, 915, 919, 922, 924, 932, 933, 935, 937, 939, 941, 942, 943, 944, 950, 951, 961, 964, 966, 969, 971, 975, 988, 991, 992, 997, 1001, 1002, 1013, 1017, 1018, 1019, 1026, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1051, 1052, 1053, 1057, 1058, 1060, 1062, 1063, 1068, 1069, 1072, 1075, 1077, 1078, 1083, 1089, 1095, 1097, 1103, 1113, 1114, 1116, 1121, 1122, 1126, 1128, 1129, 1139, 1147], "drop": [1, 99, 155, 156, 193, 242, 250, 275, 333, 335, 336, 433, 435, 507, 690, 716, 770, 775, 799, 855, 857, 858, 963, 965, 1017, 1139], "aaa": [1, 33, 275, 548, 591, 592, 1061], "bbb": [1, 33, 275, 591, 592, 802], "ccc": [1, 33, 275, 591, 592], "ddd": [1, 33, 275, 591, 592], "eee": [1, 33, 275, 802], "fff": 1, "column": [1, 17, 18, 21, 22, 24, 32, 33, 36, 41, 62, 71, 72, 79, 81, 83, 85, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 135, 147, 148, 152, 154, 155, 156, 157, 159, 164, 165, 168, 170, 171, 172, 173, 174, 175, 176, 180, 181, 186, 187, 189, 190, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 226, 227, 228, 232, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 254, 275, 284, 285, 287, 299, 324, 331, 339, 341, 342, 343, 347, 349, 350, 351, 353, 355, 357, 360, 363, 364, 367, 369, 370, 372, 374, 375, 377, 384, 386, 390, 392, 404, 419, 423, 429, 437, 456, 460, 461, 472, 473, 479, 481, 483, 499, 505, 507, 511, 513, 514, 518, 521, 522, 523, 524, 525, 527, 528, 529, 536, 543, 544, 554, 573, 574, 582, 583, 584, 585, 587, 594, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 690, 706, 708, 715, 716, 717, 719, 726, 727, 728, 729, 730, 731, 735, 736, 741, 742, 743, 744, 745, 747, 748, 749, 751, 753, 755, 756, 757, 758, 759, 764, 765, 766, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 787, 799, 802, 806, 807, 834, 836, 853, 864, 865, 866, 870, 872, 873, 877, 879, 882, 884, 887, 890, 891, 894, 896, 897, 899, 901, 902, 904, 912, 921, 959, 967, 986, 990, 1017, 1023, 1048, 1067, 1086, 1087, 1095, 1096, 1097, 1098, 1100, 1108, 1116, 1117, 1139, 1147], "txt": [1, 14, 121], "utf8": [1, 20, 32, 99, 103, 107, 108, 121, 132, 134, 137, 148, 157, 158, 159, 166, 217, 236, 275, 309, 369, 372, 442, 472, 547, 552, 554, 555, 556, 557, 559, 571, 572, 573, 574, 582, 583, 584, 585, 587, 625, 690, 708, 717, 719, 755, 799, 802, 896, 899, 949, 972, 1060, 1065, 1067, 1068, 1069, 1070, 1072, 1084, 1085, 1086, 1087, 1095, 1096, 1097, 1098, 1100, 1139], "register_lazyframe_namespac": [1, 72, 73, 75], "dtypeoper": [1, 74], "ldf": [1, 74, 780, 781, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794], "_ldf": [1, 74], "upcast_integer_typ": [1, 74], "with_column": [1, 14, 74, 172, 173, 204, 244, 251, 275, 282, 284, 300, 309, 314, 316, 319, 320, 321, 326, 329, 331, 333, 337, 343, 345, 346, 347, 355, 357, 362, 363, 364, 365, 366, 367, 369, 371, 372, 374, 375, 379, 380, 388, 389, 394, 397, 398, 399, 403, 404, 408, 412, 413, 415, 416, 417, 419, 422, 436, 450, 451, 452, 453, 468, 470, 472, 473, 488, 490, 494, 495, 499, 500, 503, 504, 505, 507, 510, 517, 518, 521, 522, 523, 524, 525, 527, 528, 529, 534, 535, 548, 553, 556, 557, 560, 561, 567, 568, 571, 572, 573, 574, 575, 580, 581, 590, 593, 594, 601, 603, 610, 612, 614, 623, 625, 632, 635, 640, 650, 654, 657, 661, 670, 674, 678, 680, 686, 690, 727, 728, 749, 776, 799, 802, 835, 853, 892, 966, 1017, 1139], "tp": [1, 74], "cast": [1, 32, 73, 74, 96, 130, 131, 166, 172, 173, 175, 176, 204, 237, 250, 275, 288, 316, 328, 329, 338, 369, 372, 472, 498, 503, 512, 518, 558, 559, 590, 595, 601, 625, 670, 690, 727, 728, 730, 731, 749, 775, 799, 802, 835, 837, 850, 851, 861, 896, 899, 1021, 1071, 1072, 1109, 1117, 1122, 1139], "int64": [1, 2, 32, 33, 36, 73, 74, 79, 103, 107, 157, 166, 172, 173, 175, 176, 191, 204, 217, 231, 237, 275, 302, 303, 304, 305, 328, 329, 344, 348, 352, 354, 356, 361, 368, 384, 503, 512, 518, 558, 595, 601, 617, 641, 649, 650, 652, 666, 672, 690, 710, 717, 727, 728, 730, 731, 733, 738, 749, 755, 758, 799, 821, 822, 823, 824, 850, 851, 867, 871, 878, 880, 883, 888, 895, 1021, 1041, 1109, 1120, 1121, 1122, 1139], "int8": [1, 74, 166, 275, 328, 329, 595, 663, 666, 681, 690, 850, 851, 855, 998, 1024, 1109, 1126, 1139], "int16": [1, 74, 328, 329, 595, 690, 802, 850, 851, 998, 1109, 1118, 1139], "int32": [1, 74, 79, 96, 99, 103, 112, 134, 135, 172, 173, 175, 176, 188, 275, 314, 350, 377, 518, 566, 601, 666, 690, 727, 728, 730, 731, 799, 802, 873, 904, 997, 1079, 1122, 1139], "b": [1, 29, 30, 32, 34, 35, 38, 58, 59, 61, 63, 74, 79, 96, 97, 98, 99, 100, 101, 102, 103, 112, 143, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 177, 178, 180, 181, 183, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 275, 282, 284, 285, 287, 288, 301, 306, 307, 309, 310, 311, 314, 316, 324, 331, 334, 384, 386, 388, 389, 390, 392, 395, 399, 401, 403, 404, 406, 410, 413, 415, 416, 417, 419, 423, 429, 436, 442, 450, 451, 452, 453, 470, 473, 478, 489, 496, 497, 499, 503, 505, 507, 510, 515, 517, 536, 542, 544, 554, 558, 567, 594, 605, 609, 611, 612, 613, 614, 616, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 640, 641, 642, 643, 644, 647, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 667, 668, 671, 672, 673, 674, 675, 679, 690, 704, 706, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 732, 735, 737, 738, 739, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 780, 781, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 805, 808, 834, 835, 836, 837, 853, 854, 856, 906, 907, 913, 916, 928, 936, 949, 966, 980, 981, 983, 1017, 1022, 1041, 1067, 1071, 1080, 1108, 1121, 1125, 1139, 1146], "4": [1, 2, 17, 25, 29, 30, 32, 33, 34, 35, 38, 53, 56, 58, 59, 61, 63, 71, 72, 73, 74, 75, 79, 96, 97, 98, 99, 100, 101, 102, 103, 112, 121, 129, 130, 131, 137, 143, 145, 147, 148, 149, 150, 153, 156, 159, 160, 161, 162, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 195, 197, 198, 200, 201, 203, 204, 205, 206, 210, 214, 215, 221, 226, 229, 230, 231, 232, 233, 234, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 281, 282, 283, 284, 286, 288, 301, 302, 303, 304, 306, 312, 314, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 332, 334, 339, 343, 348, 356, 363, 364, 365, 366, 368, 369, 372, 373, 375, 379, 380, 385, 386, 388, 389, 392, 393, 394, 395, 397, 398, 400, 401, 402, 403, 404, 416, 417, 419, 422, 423, 424, 432, 433, 435, 436, 437, 440, 450, 451, 452, 453, 454, 455, 459, 465, 468, 470, 472, 473, 488, 490, 494, 495, 498, 499, 501, 502, 503, 504, 505, 508, 510, 514, 515, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 534, 535, 538, 542, 543, 544, 545, 548, 550, 556, 560, 561, 563, 566, 567, 569, 571, 572, 573, 574, 580, 581, 582, 591, 592, 593, 594, 596, 597, 598, 601, 602, 603, 610, 612, 614, 616, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 637, 638, 640, 642, 643, 647, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 686, 690, 704, 706, 708, 709, 710, 711, 712, 716, 718, 719, 720, 721, 722, 724, 726, 727, 728, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 808, 811, 818, 821, 822, 823, 830, 839, 840, 842, 852, 854, 856, 870, 871, 877, 879, 882, 883, 884, 885, 886, 887, 891, 892, 893, 895, 896, 899, 900, 901, 902, 913, 915, 916, 923, 924, 927, 928, 930, 936, 941, 942, 943, 944, 948, 963, 965, 966, 967, 970, 980, 981, 983, 984, 985, 989, 998, 1005, 1013, 1014, 1015, 1019, 1023, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1051, 1055, 1056, 1061, 1063, 1069, 1073, 1074, 1076, 1079, 1082, 1084, 1086, 1087, 1093, 1094, 1095, 1108, 1110, 1111, 1112, 1118, 1121, 1122, 1123, 1130, 1139, 1147], "c": [1, 29, 30, 32, 34, 35, 38, 58, 59, 61, 63, 72, 74, 79, 97, 99, 101, 103, 112, 121, 133, 143, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 163, 164, 166, 167, 169, 170, 171, 172, 178, 180, 181, 188, 189, 191, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 216, 217, 218, 222, 223, 225, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 240, 241, 244, 245, 247, 248, 250, 254, 257, 258, 259, 260, 262, 263, 265, 268, 269, 275, 282, 284, 285, 287, 289, 306, 331, 404, 419, 429, 442, 470, 473, 499, 503, 507, 536, 573, 582, 605, 612, 614, 616, 622, 623, 625, 626, 627, 628, 629, 630, 632, 642, 643, 644, 647, 651, 654, 656, 657, 658, 659, 660, 661, 662, 671, 673, 674, 675, 679, 686, 690, 706, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 723, 726, 727, 735, 738, 745, 748, 750, 753, 754, 755, 756, 762, 763, 764, 769, 772, 775, 777, 780, 783, 784, 785, 786, 788, 789, 791, 794, 795, 799, 802, 836, 853, 854, 928, 949, 1017, 1086, 1095, 1125, 1139], "5": [1, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 32, 34, 35, 38, 59, 61, 63, 71, 72, 74, 75, 79, 96, 99, 100, 101, 102, 103, 105, 108, 129, 135, 148, 149, 150, 153, 159, 160, 161, 162, 166, 168, 169, 170, 171, 172, 173, 178, 179, 181, 182, 184, 186, 187, 190, 191, 192, 193, 195, 197, 200, 201, 203, 205, 206, 207, 210, 215, 221, 226, 229, 230, 231, 232, 233, 234, 236, 239, 244, 246, 249, 250, 252, 254, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 275, 282, 283, 286, 312, 314, 316, 318, 319, 320, 321, 330, 331, 332, 333, 334, 339, 340, 344, 365, 367, 368, 369, 372, 380, 383, 384, 387, 389, 393, 394, 397, 398, 400, 401, 404, 408, 412, 413, 415, 416, 417, 419, 422, 424, 432, 436, 437, 440, 444, 447, 450, 451, 452, 453, 457, 459, 488, 490, 495, 498, 499, 500, 501, 502, 503, 507, 508, 510, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 532, 538, 544, 550, 559, 560, 561, 566, 590, 593, 596, 598, 602, 603, 616, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 639, 640, 641, 642, 643, 647, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 671, 673, 674, 675, 679, 686, 690, 708, 709, 710, 711, 712, 718, 719, 720, 721, 722, 724, 726, 727, 728, 732, 734, 736, 737, 738, 739, 743, 744, 745, 750, 760, 761, 762, 763, 764, 765, 766, 767, 768, 774, 775, 778, 780, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 808, 811, 815, 818, 830, 835, 840, 842, 848, 852, 853, 854, 855, 856, 862, 863, 864, 865, 866, 867, 892, 894, 895, 896, 897, 899, 901, 902, 910, 913, 914, 923, 924, 927, 928, 934, 940, 966, 967, 970, 974, 980, 981, 983, 989, 997, 998, 1005, 1013, 1014, 1015, 1017, 1018, 1019, 1023, 1026, 1028, 1029, 1030, 1032, 1033, 1036, 1039, 1041, 1051, 1057, 1063, 1072, 1073, 1079, 1110, 1123, 1126, 1130, 1139, 1147], "6": [1, 29, 30, 32, 33, 34, 35, 36, 37, 38, 59, 61, 62, 63, 72, 74, 79, 80, 81, 96, 99, 100, 101, 102, 129, 148, 151, 154, 155, 156, 157, 159, 160, 163, 164, 167, 168, 169, 170, 172, 173, 178, 180, 181, 182, 184, 186, 187, 189, 193, 194, 195, 196, 197, 199, 202, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 241, 243, 244, 245, 246, 247, 248, 250, 252, 259, 268, 269, 275, 282, 286, 306, 314, 328, 329, 334, 339, 343, 357, 362, 363, 364, 374, 375, 378, 380, 388, 389, 395, 400, 401, 403, 424, 425, 426, 437, 450, 451, 452, 453, 473, 495, 498, 506, 509, 510, 511, 514, 516, 518, 521, 522, 523, 524, 525, 527, 528, 529, 532, 544, 550, 554, 560, 561, 566, 593, 596, 598, 610, 629, 630, 631, 640, 643, 654, 655, 673, 686, 690, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 727, 728, 732, 734, 735, 737, 739, 741, 745, 748, 750, 753, 755, 756, 758, 760, 761, 762, 763, 764, 767, 768, 771, 772, 774, 775, 778, 785, 794, 795, 799, 802, 840, 846, 850, 851, 856, 889, 902, 924, 955, 956, 967, 980, 981, 983, 1005, 1019, 1023, 1025, 1031, 1033, 1035, 1037, 1041, 1063, 1067, 1073, 1079, 1109, 1139, 1146, 1147], "7": [1, 29, 30, 32, 33, 34, 35, 36, 37, 38, 61, 72, 74, 79, 148, 151, 152, 153, 154, 155, 157, 159, 163, 164, 167, 172, 173, 178, 180, 182, 189, 194, 195, 196, 198, 199, 202, 205, 207, 209, 211, 213, 215, 216, 217, 218, 222, 223, 225, 227, 228, 229, 230, 235, 236, 237, 238, 244, 245, 246, 247, 248, 275, 282, 286, 304, 329, 339, 343, 363, 365, 366, 373, 375, 385, 400, 403, 424, 450, 451, 452, 453, 472, 498, 510, 514, 518, 528, 544, 585, 596, 598, 629, 630, 637, 643, 654, 655, 673, 690, 708, 713, 715, 717, 719, 723, 727, 728, 732, 734, 735, 739, 746, 748, 751, 753, 755, 756, 767, 768, 772, 799, 802, 815, 823, 862, 866, 873, 892, 893, 900, 902, 950, 980, 981, 983, 998, 1023, 1036, 1098, 1139, 1147], "float32": [1, 30, 50, 74, 148, 166, 235, 236, 275, 652, 708, 799, 802, 931, 997, 1139], "lazi": [1, 56, 57, 58, 59, 61, 74, 79, 121, 135, 190, 204, 205, 275, 473, 645, 663, 666, 681, 690, 735, 736, 777, 780, 781, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 799, 802, 1146, 1147], "i16": [1, 74, 536, 690, 802, 998, 1118, 1139, 1147], "i32": [1, 74, 96, 99, 103, 134, 135, 218, 275, 314, 350, 377, 516, 536, 566, 680, 690, 756, 799, 873, 904, 997, 1025, 1079, 1139, 1147], "f32": [1, 74, 148, 156, 235, 275, 536, 690, 708, 716, 799, 802, 997, 1139], "i64": [1, 2, 17, 21, 53, 56, 58, 72, 73, 74, 75, 79, 96, 97, 98, 99, 100, 101, 102, 103, 109, 121, 147, 149, 150, 151, 154, 156, 157, 159, 160, 162, 163, 168, 169, 170, 171, 172, 173, 178, 180, 181, 182, 183, 185, 189, 190, 193, 194, 197, 198, 199, 203, 204, 205, 206, 209, 210, 211, 212, 216, 218, 222, 223, 225, 226, 228, 229, 230, 232, 238, 240, 241, 242, 243, 244, 245, 246, 248, 250, 252, 253, 254, 255, 258, 259, 260, 261, 262, 265, 268, 269, 275, 282, 284, 288, 302, 303, 304, 305, 306, 312, 316, 319, 320, 321, 326, 327, 328, 329, 331, 333, 334, 344, 346, 348, 352, 354, 356, 361, 368, 371, 384, 386, 387, 389, 390, 391, 392, 394, 395, 400, 401, 402, 403, 404, 408, 412, 413, 415, 416, 417, 419, 421, 424, 433, 435, 436, 437, 438, 439, 440, 443, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 463, 467, 470, 471, 473, 488, 489, 490, 499, 500, 503, 504, 505, 506, 507, 510, 511, 512, 514, 515, 516, 517, 518, 531, 533, 534, 535, 536, 537, 538, 542, 543, 544, 567, 568, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 606, 609, 617, 623, 625, 629, 630, 631, 632, 639, 640, 641, 642, 643, 647, 649, 650, 651, 652, 654, 655, 656, 657, 660, 661, 665, 669, 670, 673, 674, 675, 680, 686, 690, 706, 709, 711, 712, 714, 715, 716, 719, 720, 722, 723, 724, 726, 727, 728, 732, 734, 735, 736, 737, 739, 741, 742, 745, 746, 747, 749, 750, 753, 754, 756, 758, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 778, 780, 781, 784, 785, 786, 787, 788, 791, 794, 795, 799, 802, 805, 808, 821, 822, 823, 824, 830, 835, 842, 845, 848, 849, 850, 851, 853, 854, 867, 869, 871, 878, 880, 883, 888, 895, 898, 913, 914, 916, 917, 923, 927, 936, 963, 965, 966, 967, 970, 980, 981, 983, 984, 985, 986, 989, 991, 999, 1004, 1017, 1022, 1023, 1025, 1029, 1032, 1036, 1039, 1042, 1043, 1046, 1050, 1051, 1055, 1056, 1108, 1110, 1111, 1112, 1117, 1123, 1124, 1130, 1139, 1146, 1147], "register_series_namespac": [1, 72, 73, 74], "math": [1, 75, 332, 618, 619, 690, 846, 1052, 1113, 1139], "mathshortcut": [1, 75], "": [1, 2, 13, 30, 33, 38, 50, 56, 59, 63, 75, 96, 97, 103, 107, 108, 109, 110, 112, 118, 122, 123, 126, 127, 137, 147, 148, 156, 158, 171, 172, 174, 175, 181, 189, 190, 197, 203, 205, 210, 211, 215, 218, 219, 226, 230, 234, 240, 242, 243, 244, 245, 250, 251, 275, 346, 369, 372, 384, 420, 440, 442, 454, 455, 459, 471, 473, 482, 489, 492, 493, 499, 500, 512, 516, 544, 548, 555, 556, 557, 563, 567, 569, 571, 572, 574, 582, 583, 584, 587, 588, 590, 591, 592, 611, 612, 613, 614, 620, 626, 631, 632, 641, 644, 645, 654, 655, 656, 657, 660, 661, 669, 670, 672, 673, 674, 686, 690, 706, 708, 715, 716, 726, 727, 729, 730, 736, 745, 756, 757, 764, 769, 770, 771, 772, 775, 776, 782, 787, 799, 802, 805, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 830, 831, 833, 834, 836, 837, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 862, 866, 868, 869, 872, 874, 875, 879, 881, 885, 886, 890, 893, 894, 896, 899, 900, 902, 903, 904, 907, 909, 910, 914, 915, 916, 917, 919, 922, 923, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 963, 965, 967, 970, 972, 974, 984, 985, 986, 989, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1061, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1076, 1079, 1080, 1082, 1084, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1139], "_": [1, 71, 75, 205, 234, 275, 442, 556, 560, 561, 572, 573, 836, 1069, 1073, 1074, 1086, 1116, 1139], "squar": [1, 75, 261, 420, 545, 690, 787, 951, 1057, 1139], "cube": [1, 75, 317, 504, 690, 838, 1139], "s2": [1, 62, 80, 81, 131, 166, 275, 840, 856, 936, 950, 991, 1005, 1041, 1121, 1130, 1139], "renam": [1, 99, 107, 108, 144, 146, 174, 175, 176, 218, 219, 250, 251, 254, 256, 275, 284, 289, 407, 411, 414, 431, 434, 441, 445, 458, 462, 469, 470, 485, 505, 519, 549, 562, 564, 565, 570, 576, 592, 594, 615, 653, 669, 672, 690, 705, 729, 730, 731, 740, 752, 756, 757, 775, 776, 779, 780, 782, 799, 805, 809, 853, 933, 939, 961, 964, 971, 975, 988, 992, 1017, 1027, 1062, 1075, 1077, 1078, 1083, 1089, 1106, 1117, 1139], "n2": [1, 461], "in_plac": [1, 180, 224, 248, 275, 1020, 1049, 1056, 1139], "true": [1, 6, 12, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 36, 38, 50, 51, 52, 56, 58, 60, 77, 78, 79, 96, 97, 101, 103, 105, 107, 108, 109, 111, 112, 113, 115, 118, 119, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 141, 143, 147, 148, 149, 150, 153, 162, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 181, 183, 184, 185, 187, 190, 191, 195, 200, 201, 203, 205, 206, 213, 214, 215, 216, 218, 226, 232, 234, 236, 237, 240, 241, 242, 243, 244, 246, 250, 255, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 275, 283, 284, 285, 286, 287, 288, 289, 300, 307, 308, 310, 311, 314, 325, 326, 327, 328, 329, 331, 338, 340, 343, 344, 346, 348, 349, 351, 352, 354, 356, 358, 359, 361, 362, 363, 365, 366, 367, 368, 371, 373, 375, 376, 378, 379, 380, 381, 382, 383, 397, 398, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 422, 425, 426, 430, 456, 460, 461, 468, 473, 477, 478, 479, 480, 481, 482, 484, 485, 494, 495, 496, 498, 501, 502, 507, 512, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 541, 543, 544, 548, 550, 551, 553, 558, 559, 566, 572, 573, 575, 582, 583, 584, 587, 591, 592, 597, 604, 607, 610, 611, 612, 613, 614, 615, 617, 620, 621, 626, 627, 634, 635, 636, 637, 638, 643, 649, 650, 655, 663, 666, 672, 677, 678, 680, 681, 690, 706, 708, 709, 710, 711, 712, 718, 720, 722, 726, 727, 728, 729, 730, 731, 735, 736, 738, 740, 741, 745, 750, 756, 758, 762, 764, 769, 770, 771, 775, 781, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 799, 802, 806, 807, 808, 809, 819, 826, 831, 834, 837, 840, 841, 853, 860, 861, 863, 866, 867, 868, 869, 870, 871, 872, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 900, 901, 902, 906, 908, 909, 910, 917, 921, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 947, 948, 949, 951, 955, 956, 986, 990, 999, 1005, 1011, 1014, 1015, 1017, 1021, 1034, 1041, 1054, 1056, 1061, 1063, 1064, 1066, 1071, 1072, 1079, 1085, 1086, 1088, 1095, 1096, 1097, 1100, 1120, 1121, 1129, 1130, 1139, 1146, 1147], "s3": [1, 32, 111, 122, 123, 126, 127, 275, 991, 1139], "n3": 1, "8": [1, 13, 29, 30, 32, 34, 35, 36, 37, 38, 49, 56, 61, 68, 70, 71, 72, 74, 75, 79, 129, 133, 148, 151, 152, 153, 154, 155, 156, 157, 159, 163, 164, 167, 170, 178, 180, 189, 193, 194, 195, 196, 199, 207, 209, 211, 213, 215, 216, 217, 218, 222, 223, 225, 227, 228, 229, 230, 235, 236, 237, 238, 244, 245, 247, 248, 250, 275, 286, 288, 301, 324, 326, 329, 330, 339, 403, 423, 433, 436, 445, 450, 451, 452, 453, 490, 498, 504, 514, 515, 520, 536, 542, 544, 562, 563, 565, 569, 582, 598, 610, 616, 622, 626, 627, 628, 630, 632, 640, 642, 647, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 671, 674, 675, 679, 690, 708, 713, 715, 716, 717, 719, 723, 732, 735, 739, 741, 750, 753, 755, 756, 767, 768, 772, 775, 799, 802, 808, 852, 873, 924, 950, 963, 966, 975, 980, 981, 983, 1013, 1023, 1026, 1028, 1031, 1033, 1035, 1037, 1075, 1076, 1078, 1082, 1095, 1139, 1147], "9": [1, 29, 30, 32, 33, 34, 35, 38, 56, 61, 71, 79, 129, 152, 153, 166, 173, 178, 182, 193, 214, 215, 218, 229, 244, 245, 248, 250, 268, 275, 282, 286, 288, 301, 313, 324, 326, 329, 332, 339, 403, 409, 419, 423, 433, 449, 456, 498, 509, 514, 518, 520, 526, 528, 538, 542, 556, 585, 598, 624, 629, 630, 678, 690, 728, 732, 734, 739, 756, 767, 772, 775, 794, 799, 802, 854, 866, 877, 879, 887, 893, 900, 901, 936, 950, 963, 986, 1023, 1028, 1034, 1036, 1038, 1051, 1069, 1098, 1139], "27": [1, 75, 268, 329, 357, 364, 374, 690, 794, 1139, 1147], "16": [1, 33, 46, 65, 73, 172, 173, 250, 275, 326, 329, 403, 490, 504, 518, 566, 629, 639, 640, 643, 690, 727, 728, 762, 775, 799, 802, 893, 900, 1013, 1052, 1079, 1113, 1139], "64": [1, 45, 48, 67, 73, 75, 128, 143, 490, 504, 690, 1013, 1139], "25": [1, 33, 75, 103, 135, 153, 172, 173, 190, 246, 250, 275, 333, 343, 345, 363, 366, 373, 375, 507, 518, 521, 522, 523, 524, 525, 527, 528, 529, 603, 634, 635, 637, 638, 639, 645, 655, 677, 678, 690, 727, 728, 736, 743, 773, 775, 799, 802, 854, 855, 868, 893, 900, 906, 924, 1013, 1017, 1139], "125": [1, 33, 75, 275, 282, 690, 1013, 1139], "arg": [2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 204, 237, 275, 503, 620, 644, 690, 749, 799, 999, 1120, 1121, 1139], "ani": [2, 3, 4, 5, 9, 30, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69, 70, 76, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 126, 132, 134, 135, 137, 141, 144, 152, 156, 160, 162, 163, 166, 186, 187, 188, 193, 203, 204, 213, 214, 215, 232, 233, 236, 237, 242, 244, 275, 282, 285, 286, 289, 314, 367, 379, 380, 389, 394, 397, 398, 409, 422, 429, 436, 468, 469, 471, 472, 473, 485, 488, 490, 494, 495, 498, 499, 503, 505, 514, 519, 520, 532, 566, 582, 583, 584, 587, 593, 594, 597, 603, 610, 611, 614, 615, 626, 642, 651, 652, 655, 680, 690, 716, 722, 749, 770, 799, 802, 806, 808, 809, 856, 894, 913, 916, 936, 950, 959, 966, 998, 999, 1023, 1027, 1028, 1040, 1043, 1079, 1095, 1096, 1097, 1100, 1111, 1119, 1120, 1121, 1139, 1146, 1147], "kwarg": [2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 109, 152, 204, 237, 275, 503, 690, 749, 799, 1121, 1139, 1146], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 690, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1139, 1146], "nest": [2, 53, 62, 103, 119, 126, 158, 275, 701, 907, 1139, 1146, 1147], "fix": [2, 112, 133, 135, 376, 521, 522, 523, 524, 525, 527, 528, 529, 639, 690, 903], "length": [2, 53, 79, 121, 133, 170, 172, 173, 175, 176, 225, 275, 330, 366, 373, 455, 461, 482, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 542, 560, 561, 563, 565, 569, 571, 590, 663, 666, 667, 668, 681, 690, 727, 728, 730, 731, 750, 763, 799, 840, 852, 862, 893, 900, 985, 991, 1010, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1055, 1073, 1074, 1076, 1078, 1082, 1084, 1103, 1139], "inner": [2, 53, 134, 189, 245, 275, 302, 303, 304, 305, 334, 442, 513, 601, 690, 735, 758, 772, 799, 821, 822, 823, 824, 856, 972, 1122, 1139], "width": [2, 26, 33, 107, 108, 121, 275, 302, 303, 304, 305, 563, 569, 590, 799, 821, 822, 823, 824, 1076, 1082, 1103], "int": [2, 14, 15, 17, 25, 26, 30, 33, 38, 42, 50, 52, 58, 61, 73, 99, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 121, 122, 124, 125, 126, 127, 128, 133, 134, 135, 136, 137, 138, 139, 144, 147, 149, 158, 161, 162, 164, 170, 177, 178, 179, 181, 186, 187, 188, 190, 192, 193, 194, 195, 199, 200, 201, 211, 213, 216, 221, 222, 223, 225, 227, 228, 229, 230, 235, 238, 240, 244, 247, 249, 252, 259, 269, 275, 282, 306, 312, 330, 333, 381, 382, 383, 387, 388, 389, 395, 399, 400, 424, 430, 433, 439, 440, 454, 455, 459, 460, 461, 498, 500, 503, 504, 507, 510, 513, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 537, 542, 546, 555, 558, 563, 566, 567, 569, 571, 573, 574, 585, 590, 596, 597, 598, 602, 608, 610, 617, 626, 627, 633, 636, 639, 645, 647, 649, 650, 659, 662, 663, 666, 667, 668, 671, 672, 675, 676, 679, 681, 690, 706, 709, 720, 721, 722, 732, 736, 739, 750, 760, 761, 763, 765, 767, 768, 769, 773, 774, 778, 785, 795, 799, 816, 817, 830, 831, 840, 841, 852, 855, 907, 908, 909, 910, 914, 915, 916, 922, 923, 924, 950, 952, 953, 960, 961, 962, 963, 969, 970, 984, 985, 989, 990, 991, 1001, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1019, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1047, 1050, 1055, 1058, 1068, 1071, 1076, 1079, 1080, 1082, 1084, 1086, 1087, 1098, 1103, 1109, 1110, 1111, 1112, 1118, 1123, 1128, 1139, 1146, 1147], "polarsdatatyp": [2, 53, 107, 108, 114, 120, 121, 132, 133, 134, 135, 137, 144, 148, 157, 193, 275, 289, 314, 384, 469, 471, 472, 473, 558, 615, 641, 652, 653, 654, 655, 663, 666, 681, 686, 690, 708, 717, 799, 802, 809, 831, 998, 999, 1071, 1139], "pythondatatyp": [2, 53], "null": [2, 30, 32, 50, 58, 71, 79, 99, 107, 108, 117, 121, 127, 143, 147, 149, 153, 156, 162, 166, 167, 182, 189, 195, 196, 202, 205, 207, 222, 223, 226, 227, 228, 232, 237, 240, 243, 245, 247, 250, 257, 275, 285, 287, 288, 289, 299, 306, 308, 319, 320, 321, 324, 326, 329, 333, 335, 336, 344, 348, 352, 354, 356, 361, 362, 368, 380, 381, 382, 383, 384, 387, 388, 389, 395, 403, 413, 415, 416, 417, 423, 425, 426, 433, 435, 438, 439, 443, 444, 450, 451, 452, 453, 454, 460, 461, 472, 473, 495, 496, 497, 500, 511, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 538, 543, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 563, 566, 569, 571, 573, 574, 575, 590, 591, 592, 601, 611, 612, 613, 614, 623, 624, 625, 627, 632, 641, 652, 657, 661, 667, 668, 672, 674, 680, 690, 706, 709, 716, 722, 734, 735, 748, 758, 760, 761, 764, 769, 771, 772, 775, 777, 783, 799, 806, 807, 809, 818, 826, 841, 842, 855, 857, 858, 867, 871, 878, 880, 883, 888, 895, 908, 909, 910, 914, 916, 921, 927, 943, 944, 952, 955, 956, 963, 965, 974, 981, 983, 984, 990, 991, 999, 1012, 1013, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1046, 1047, 1051, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1079, 1082, 1084, 1086, 1087, 1088, 1118, 1120, 1121, 1122, 1129, 1139, 1146, 1147], "paramet": [2, 7, 8, 11, 13, 14, 15, 16, 17, 20, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 50, 51, 52, 53, 56, 57, 58, 59, 61, 63, 71, 72, 73, 74, 75, 77, 78, 79, 81, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 144, 147, 148, 149, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 186, 187, 188, 189, 190, 192, 193, 195, 197, 198, 200, 201, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 256, 259, 261, 267, 269, 275, 282, 284, 285, 286, 287, 288, 289, 299, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 333, 334, 338, 339, 340, 346, 362, 365, 366, 367, 369, 371, 372, 373, 376, 378, 379, 380, 381, 382, 383, 384, 387, 389, 390, 394, 395, 396, 397, 398, 399, 400, 403, 404, 409, 420, 422, 424, 429, 430, 431, 432, 433, 436, 439, 440, 442, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 463, 464, 468, 469, 470, 471, 472, 473, 484, 488, 490, 494, 495, 498, 499, 500, 503, 504, 505, 507, 508, 510, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 590, 591, 592, 593, 594, 596, 597, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 690, 706, 708, 709, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 739, 740, 741, 745, 746, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 785, 787, 793, 795, 799, 802, 805, 806, 807, 808, 809, 818, 824, 825, 826, 827, 828, 829, 830, 831, 835, 841, 842, 843, 844, 848, 849, 850, 851, 852, 853, 854, 855, 856, 861, 862, 863, 869, 889, 892, 893, 894, 896, 898, 899, 900, 903, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 922, 923, 924, 927, 928, 938, 946, 947, 951, 953, 959, 960, 961, 962, 963, 966, 969, 970, 972, 980, 981, 982, 983, 984, 985, 986, 989, 990, 991, 993, 998, 999, 1013, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050, 1054, 1055, 1056, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1103, 1104, 1106, 1110, 1111, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1127, 1128, 1129, 1130, 1139, 1146], "The": [2, 20, 31, 32, 33, 38, 52, 53, 56, 60, 62, 63, 71, 76, 77, 81, 96, 98, 99, 100, 102, 105, 107, 108, 109, 110, 112, 116, 117, 119, 121, 127, 139, 155, 156, 157, 159, 160, 163, 170, 171, 172, 173, 175, 177, 182, 187, 190, 193, 198, 203, 213, 214, 215, 218, 219, 236, 243, 246, 250, 251, 254, 261, 275, 284, 306, 307, 308, 309, 331, 335, 336, 343, 357, 362, 363, 366, 369, 373, 374, 384, 387, 390, 395, 399, 435, 460, 471, 473, 499, 507, 510, 513, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 538, 541, 547, 551, 552, 558, 563, 564, 569, 570, 576, 577, 578, 579, 580, 581, 582, 590, 641, 645, 655, 667, 668, 669, 672, 680, 682, 683, 685, 686, 690, 691, 692, 696, 697, 698, 716, 719, 723, 727, 728, 730, 732, 734, 736, 739, 741, 746, 750, 756, 757, 758, 771, 775, 776, 780, 787, 799, 805, 808, 825, 826, 827, 841, 853, 857, 858, 866, 884, 889, 890, 893, 896, 900, 901, 913, 914, 917, 922, 965, 990, 999, 1017, 1019, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1043, 1051, 1054, 1060, 1064, 1065, 1071, 1076, 1077, 1082, 1083, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1103, 1131, 1133, 1135, 1139, 1140, 1143, 1144, 1145, 1147], "size": [2, 15, 38, 52, 107, 108, 109, 133, 134, 135, 137, 139, 158, 244, 275, 514, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 617, 649, 650, 667, 668, 690, 711, 799, 907, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1139, 1147], "datatyp": [2, 30, 36, 50, 53, 69, 96, 98, 99, 100, 102, 104, 112, 114, 116, 117, 120, 137, 157, 159, 166, 217, 275, 314, 384, 536, 601, 641, 652, 690, 701, 719, 755, 758, 799, 809, 831, 854, 938, 945, 947, 949, 999, 1048, 1122, 1139], "valu": [2, 9, 13, 14, 17, 28, 30, 33, 36, 50, 53, 54, 56, 60, 62, 69, 71, 79, 81, 99, 101, 107, 108, 109, 110, 112, 121, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 145, 146, 147, 153, 156, 160, 161, 162, 167, 170, 172, 173, 175, 177, 178, 182, 186, 187, 190, 192, 193, 194, 195, 196, 197, 199, 201, 203, 205, 206, 207, 209, 213, 214, 215, 216, 222, 223, 226, 227, 228, 229, 232, 233, 237, 240, 241, 244, 245, 246, 247, 257, 258, 260, 262, 263, 265, 266, 275, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 329, 330, 331, 333, 335, 336, 339, 343, 357, 363, 374, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 431, 432, 433, 435, 438, 439, 440, 443, 444, 446, 447, 448, 454, 457, 459, 463, 465, 467, 468, 471, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 503, 504, 507, 508, 510, 513, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 538, 539, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 555, 558, 559, 567, 568, 571, 573, 574, 575, 590, 593, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 610, 611, 613, 616, 623, 625, 627, 629, 630, 631, 632, 642, 643, 648, 651, 652, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 673, 674, 680, 690, 704, 705, 706, 716, 721, 722, 727, 728, 730, 733, 734, 736, 742, 743, 744, 745, 747, 748, 751, 753, 758, 760, 761, 764, 765, 766, 769, 772, 773, 783, 784, 786, 788, 789, 791, 792, 799, 802, 804, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 827, 828, 829, 835, 839, 842, 843, 844, 846, 847, 852, 853, 854, 855, 857, 858, 862, 866, 884, 890, 901, 907, 908, 909, 910, 913, 914, 915, 916, 919, 921, 922, 923, 924, 925, 927, 928, 930, 932, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 948, 952, 953, 955, 956, 957, 958, 961, 962, 963, 965, 968, 969, 970, 973, 974, 976, 977, 978, 984, 989, 993, 998, 1000, 1001, 1003, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1019, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1051, 1052, 1053, 1054, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1080, 1081, 1084, 1086, 1087, 1088, 1103, 1109, 1110, 1111, 1112, 1113, 1114, 1120, 1121, 1122, 1125, 1127, 1129, 1130, 1139, 1147], "within": [2, 53, 130, 131, 171, 172, 173, 174, 175, 176, 190, 246, 275, 510, 518, 544, 690, 727, 728, 730, 731, 736, 799, 1146], "exampl": [2, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 74, 75, 79, 80, 81, 96, 97, 98, 99, 100, 101, 102, 103, 105, 108, 109, 110, 111, 112, 118, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 637, 639, 640, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 686, 690, 701, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 919, 922, 923, 924, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 952, 955, 956, 963, 965, 966, 967, 970, 972, 974, 980, 981, 983, 984, 985, 986, 989, 991, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1060, 1061, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1079, 1080, 1081, 1082, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1139, 1146], "dtype": [2, 33, 41, 62, 74, 80, 81, 96, 98, 100, 102, 103, 107, 108, 109, 110, 116, 117, 118, 121, 132, 133, 134, 135, 137, 143, 148, 172, 173, 175, 176, 190, 235, 236, 237, 244, 275, 289, 314, 315, 319, 320, 321, 328, 329, 376, 384, 429, 460, 467, 469, 471, 472, 473, 512, 513, 518, 521, 522, 523, 524, 525, 527, 528, 529, 536, 558, 582, 595, 597, 601, 606, 615, 617, 627, 641, 645, 649, 650, 652, 653, 654, 655, 663, 666, 672, 681, 690, 708, 727, 728, 730, 731, 736, 799, 802, 821, 822, 831, 833, 834, 836, 841, 842, 843, 844, 850, 851, 854, 855, 903, 907, 931, 938, 947, 959, 990, 997, 998, 1024, 1041, 1048, 1071, 1095, 1109, 1118, 1120, 1121, 1122, 1126, 1139, 1147], "method": [2, 3, 4, 5, 9, 29, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 97, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 132, 141, 144, 146, 156, 160, 171, 174, 175, 176, 182, 187, 193, 201, 207, 213, 214, 215, 242, 250, 256, 261, 267, 275, 282, 285, 286, 289, 313, 369, 372, 379, 380, 387, 394, 397, 398, 403, 407, 411, 414, 419, 422, 431, 434, 441, 445, 458, 462, 468, 469, 473, 488, 490, 494, 495, 498, 504, 505, 508, 510, 519, 521, 522, 523, 524, 525, 527, 528, 529, 549, 562, 564, 565, 570, 576, 585, 593, 594, 603, 605, 610, 626, 634, 655, 664, 666, 677, 682, 683, 685, 686, 690, 691, 692, 695, 696, 697, 698, 701, 705, 712, 714, 716, 725, 729, 730, 731, 734, 740, 751, 752, 770, 775, 779, 782, 787, 793, 799, 808, 809, 896, 899, 913, 914, 927, 933, 939, 961, 964, 971, 975, 988, 992, 999, 1018, 1019, 1027, 1033, 1062, 1075, 1077, 1078, 1083, 1089, 1098, 1122, 1131, 1133, 1135, 1139, 1140, 1143, 1144, 1145], "attribut": [2, 3, 4, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 63, 64, 65, 66, 67, 68, 69, 70, 132, 275, 682, 683, 685, 686, 691, 692, 696, 697, 698, 799, 1131, 1133, 1135, 1140, 1143, 1144, 1145], "A": [5, 30, 33, 50, 56, 59, 77, 78, 103, 107, 108, 109, 110, 121, 123, 128, 139, 166, 172, 189, 190, 205, 232, 244, 245, 246, 250, 251, 275, 281, 335, 336, 339, 379, 380, 387, 397, 398, 406, 410, 413, 415, 422, 461, 468, 471, 482, 494, 495, 515, 520, 521, 522, 523, 524, 525, 527, 528, 529, 548, 549, 550, 555, 556, 557, 559, 567, 568, 590, 624, 639, 640, 644, 690, 727, 735, 736, 753, 772, 775, 776, 799, 802, 857, 858, 862, 914, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1061, 1062, 1063, 1068, 1069, 1070, 1072, 1080, 1081, 1103, 1139, 1146], "encod": [5, 70, 107, 108, 121, 234, 275, 308, 396, 551, 690, 826, 1064], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 20, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 50, 51, 52, 71, 72, 97, 99, 102, 107, 108, 109, 112, 113, 115, 118, 119, 121, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 143, 151, 156, 165, 171, 172, 173, 174, 175, 176, 177, 187, 190, 197, 216, 218, 225, 234, 236, 241, 242, 244, 250, 275, 285, 287, 289, 313, 331, 376, 399, 409, 434, 441, 450, 451, 452, 453, 455, 458, 460, 461, 462, 472, 473, 503, 507, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 537, 541, 542, 564, 570, 571, 576, 577, 578, 579, 582, 583, 584, 587, 607, 611, 613, 617, 621, 634, 635, 637, 638, 649, 650, 663, 666, 667, 668, 672, 677, 678, 680, 681, 690, 701, 711, 716, 718, 726, 727, 728, 729, 730, 731, 735, 736, 740, 741, 745, 756, 758, 763, 770, 775, 779, 782, 787, 799, 806, 807, 808, 837, 853, 903, 922, 936, 964, 971, 980, 981, 982, 983, 985, 988, 990, 991, 992, 998, 999, 1017, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1043, 1050, 1054, 1055, 1077, 1083, 1084, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1100, 1120, 1127, 1139, 1147], "string": [5, 7, 8, 10, 11, 14, 15, 16, 20, 30, 31, 33, 36, 37, 41, 50, 56, 62, 70, 80, 81, 103, 107, 108, 109, 110, 121, 130, 131, 132, 133, 134, 137, 140, 147, 166, 170, 171, 172, 173, 174, 190, 203, 205, 215, 218, 219, 226, 235, 240, 241, 244, 246, 250, 251, 254, 275, 282, 310, 316, 362, 366, 369, 372, 373, 384, 386, 392, 396, 404, 442, 472, 484, 499, 503, 518, 521, 522, 523, 524, 525, 527, 528, 529, 544, 547, 548, 550, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 590, 612, 614, 620, 623, 624, 625, 632, 634, 635, 637, 638, 644, 657, 661, 669, 672, 674, 677, 678, 680, 690, 706, 718, 725, 726, 727, 728, 729, 736, 756, 757, 758, 764, 769, 775, 776, 779, 780, 799, 802, 828, 834, 835, 889, 893, 896, 899, 900, 912, 928, 972, 1059, 1060, 1061, 1063, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1101, 1102, 1103, 1118, 1139, 1147], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 396, 690, 714, 725, 752, 799], "activ": [6, 12, 18, 19, 21, 22, 23, 24, 27, 436, 556, 966, 1069], "bool": [6, 12, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 36, 38, 50, 51, 52, 71, 77, 78, 79, 80, 81, 96, 97, 101, 103, 107, 108, 112, 113, 115, 117, 118, 119, 121, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 140, 143, 147, 148, 149, 150, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 183, 184, 185, 190, 203, 205, 215, 216, 220, 224, 226, 232, 234, 236, 237, 240, 241, 242, 243, 246, 248, 250, 258, 260, 262, 265, 275, 284, 285, 286, 287, 288, 289, 299, 305, 307, 308, 310, 311, 314, 325, 326, 327, 328, 329, 330, 331, 349, 365, 367, 373, 378, 379, 380, 381, 382, 383, 397, 398, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 422, 425, 426, 430, 436, 456, 460, 463, 468, 469, 471, 473, 477, 478, 479, 480, 481, 484, 494, 495, 496, 498, 501, 502, 507, 510, 512, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 536, 541, 543, 544, 548, 550, 551, 553, 566, 567, 568, 572, 573, 575, 582, 583, 584, 587, 592, 604, 607, 610, 611, 612, 613, 614, 615, 617, 620, 621, 626, 629, 634, 635, 636, 637, 638, 649, 650, 652, 655, 663, 666, 672, 677, 678, 681, 690, 706, 708, 709, 711, 712, 718, 720, 722, 726, 727, 728, 729, 730, 731, 735, 736, 740, 741, 745, 750, 759, 762, 764, 769, 770, 771, 775, 784, 786, 788, 791, 799, 802, 806, 807, 808, 809, 818, 824, 826, 831, 834, 837, 841, 848, 849, 850, 851, 852, 853, 872, 892, 894, 900, 906, 908, 909, 910, 917, 921, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 955, 956, 960, 961, 962, 966, 986, 990, 993, 999, 1011, 1014, 1015, 1017, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1043, 1044, 1049, 1054, 1056, 1061, 1063, 1064, 1066, 1079, 1080, 1081, 1085, 1086, 1088, 1095, 1096, 1097, 1100, 1119, 1120, 1121, 1124, 1127, 1129, 1139, 1146], "none": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 50, 51, 52, 54, 56, 58, 59, 61, 71, 78, 81, 96, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 144, 149, 153, 156, 161, 162, 170, 172, 173, 175, 176, 177, 182, 186, 189, 190, 191, 193, 195, 197, 201, 202, 205, 213, 216, 223, 225, 226, 232, 234, 237, 241, 242, 243, 244, 245, 246, 275, 285, 287, 288, 289, 301, 306, 319, 320, 321, 324, 326, 329, 331, 335, 336, 362, 365, 366, 373, 380, 381, 382, 383, 384, 387, 388, 389, 395, 399, 403, 404, 413, 415, 416, 417, 423, 425, 426, 435, 439, 444, 450, 451, 452, 453, 455, 461, 469, 471, 472, 473, 481, 484, 486, 495, 496, 497, 500, 504, 507, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 535, 536, 537, 538, 542, 543, 547, 548, 550, 552, 553, 556, 558, 559, 560, 561, 563, 564, 566, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 587, 590, 591, 592, 601, 611, 612, 613, 614, 615, 623, 625, 627, 632, 634, 635, 636, 637, 638, 639, 641, 642, 651, 652, 653, 654, 655, 657, 661, 666, 667, 668, 671, 672, 674, 676, 677, 678, 679, 680, 690, 709, 710, 712, 716, 721, 722, 727, 728, 730, 731, 734, 735, 736, 738, 740, 741, 745, 748, 758, 761, 762, 763, 764, 770, 771, 772, 777, 779, 782, 787, 799, 802, 806, 807, 808, 809, 816, 817, 841, 842, 853, 854, 856, 857, 858, 874, 875, 876, 881, 892, 893, 900, 905, 906, 908, 909, 910, 914, 915, 916, 918, 922, 924, 926, 927, 928, 938, 943, 944, 947, 950, 951, 952, 955, 956, 965, 969, 974, 980, 981, 983, 985, 991, 998, 999, 1000, 1001, 1002, 1003, 1007, 1017, 1018, 1019, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1043, 1045, 1047, 1050, 1051, 1054, 1055, 1058, 1060, 1061, 1063, 1065, 1066, 1069, 1071, 1072, 1073, 1074, 1076, 1077, 1079, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1100, 1117, 1118, 1121, 1122, 1128, 1129, 1139, 1146], "decim": [6, 13, 30, 33, 50, 275, 530, 585, 690, 799, 1038, 1098, 1139], "temporari": 6, "remov": [6, 9, 107, 108, 121, 143, 154, 234, 245, 275, 289, 384, 470, 473, 564, 570, 576, 577, 578, 579, 580, 581, 641, 690, 715, 772, 799, 808, 853, 1017, 1077, 1083, 1089, 1090, 1091, 1092, 1093, 1094, 1097, 1139], "onc": [6, 59, 107, 108, 112, 139, 193, 214, 216, 254, 275, 313, 473, 531, 580, 581, 690, 707, 780, 799, 999, 1039, 1093, 1094, 1139], "stabil": 6, "current": [6, 7, 8, 10, 11, 28, 58, 97, 103, 109, 110, 126, 149, 150, 189, 190, 275, 345, 366, 461, 500, 690, 701, 709, 710, 711, 735, 736, 799, 802, 841, 845, 860, 868, 893, 1013, 1139, 1146], "consid": [6, 78, 80, 81, 107, 108, 121, 127, 156, 167, 193, 197, 214, 242, 244, 245, 275, 289, 319, 320, 321, 330, 366, 471, 473, 521, 522, 523, 524, 525, 527, 528, 529, 629, 643, 686, 690, 712, 716, 732, 739, 745, 770, 772, 787, 799, 834, 837, 842, 843, 844, 852, 893, 924, 938, 999, 1017, 1041, 1042, 1043, 1139], "beta": 6, "cfg": [7, 9, 17, 141], "previous": [7, 8], "save": [7, 8, 11, 172, 173, 190, 246, 275, 337, 345, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 639, 677, 678, 686, 690, 701, 727, 728, 736, 799, 868, 889, 893, 900], "option": [7, 8, 9, 10, 11, 28, 32, 33, 42, 71, 107, 109, 111, 112, 113, 115, 119, 122, 123, 124, 126, 127, 129, 132, 133, 134, 135, 136, 137, 138, 172, 186, 190, 197, 232, 236, 241, 275, 420, 519, 521, 522, 523, 524, 525, 527, 528, 529, 541, 571, 607, 652, 672, 680, 690, 701, 727, 735, 736, 745, 758, 799, 802, 947, 951, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1054, 1084, 1117, 1127, 1139], "from": [7, 8, 9, 10, 11, 30, 33, 50, 56, 57, 58, 71, 79, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 148, 153, 154, 158, 160, 165, 170, 172, 173, 175, 187, 188, 190, 191, 197, 205, 209, 213, 215, 216, 218, 219, 234, 241, 242, 244, 245, 246, 275, 325, 331, 332, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 380, 384, 396, 403, 420, 461, 473, 492, 493, 495, 500, 503, 507, 509, 518, 520, 521, 522, 524, 527, 528, 529, 531, 544, 555, 556, 558, 566, 580, 581, 582, 583, 584, 587, 605, 618, 619, 623, 633, 634, 635, 636, 637, 639, 666, 671, 676, 677, 678, 686, 689, 690, 708, 714, 715, 720, 725, 727, 728, 730, 736, 745, 752, 753, 756, 757, 770, 772, 777, 799, 802, 808, 853, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 913, 947, 951, 991, 1008, 1009, 1010, 1013, 1017, 1028, 1039, 1068, 1069, 1071, 1079, 1093, 1094, 1095, 1096, 1097, 1100, 1130, 1139, 1146, 1147], "json": [7, 8, 10, 11, 36, 37, 116, 117, 123, 125, 275, 396, 486, 558, 559, 690, 701, 714, 725, 752, 758, 779, 799, 1071, 1072], "produc": [7, 8, 134, 135, 137, 431, 432, 481, 654, 740, 741, 799, 961, 962], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 29, 30, 34, 35, 36, 37, 38, 50, 51, 52, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 160, 275, 486, 714, 752, 758, 779, 799, 808, 913, 1139], "path": [8, 11, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 50, 51, 52, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 275, 486, 533, 559, 690, 714, 752, 758, 762, 779, 799, 1044, 1072, 1139, 1147], "load": [8, 10, 11, 99, 101, 109, 111, 112, 118, 122, 123, 136, 138, 275, 701, 732, 739, 799, 1147], "reset": [9, 141], "default": [9, 12, 15, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 50, 52, 71, 78, 79, 96, 98, 99, 100, 101, 102, 103, 107, 108, 110, 112, 116, 117, 118, 119, 121, 132, 133, 134, 135, 136, 137, 141, 156, 158, 171, 172, 173, 174, 175, 176, 177, 187, 189, 190, 197, 203, 205, 213, 214, 215, 216, 227, 234, 242, 244, 247, 252, 275, 284, 285, 287, 316, 331, 365, 366, 373, 378, 380, 381, 382, 383, 399, 455, 460, 461, 464, 472, 481, 492, 493, 495, 500, 507, 510, 518, 521, 522, 523, 524, 525, 527, 528, 529, 531, 537, 546, 555, 564, 566, 570, 571, 576, 577, 578, 579, 582, 583, 584, 587, 607, 608, 611, 613, 617, 621, 626, 634, 635, 636, 637, 638, 645, 649, 650, 652, 663, 666, 671, 672, 677, 678, 679, 681, 690, 711, 712, 716, 718, 726, 727, 728, 729, 730, 731, 735, 736, 745, 758, 765, 770, 773, 779, 799, 806, 807, 808, 835, 853, 892, 893, 900, 906, 907, 908, 909, 910, 922, 985, 990, 991, 998, 1008, 1009, 1013, 1017, 1019, 1039, 1050, 1058, 1061, 1068, 1077, 1079, 1083, 1084, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1100, 1127, 1128, 1139, 1147], "state": [9, 77, 78, 89, 629, 701, 711, 712, 718, 720, 750, 762, 799], "note": [9, 20, 32, 33, 42, 56, 60, 61, 62, 71, 78, 80, 81, 96, 97, 98, 100, 102, 103, 107, 109, 110, 111, 112, 116, 117, 119, 122, 123, 126, 127, 133, 135, 137, 139, 141, 143, 147, 152, 161, 172, 173, 175, 176, 186, 187, 189, 190, 193, 201, 204, 205, 213, 214, 215, 233, 236, 240, 241, 245, 246, 250, 275, 328, 329, 335, 336, 358, 359, 362, 366, 373, 404, 413, 415, 419, 436, 460, 471, 473, 505, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 541, 548, 555, 556, 557, 560, 561, 567, 577, 578, 579, 582, 594, 595, 603, 629, 634, 635, 637, 638, 639, 643, 652, 663, 665, 666, 677, 678, 680, 681, 686, 690, 700, 706, 712, 720, 721, 727, 728, 730, 731, 732, 736, 739, 753, 762, 764, 769, 772, 775, 799, 850, 851, 857, 858, 885, 886, 889, 900, 921, 966, 990, 999, 1034, 1042, 1043, 1049, 1054, 1061, 1068, 1069, 1070, 1073, 1074, 1080, 1090, 1091, 1092, 1095, 1109, 1120, 1139, 1146], "oper": [9, 33, 62, 79, 81, 86, 87, 96, 98, 99, 100, 101, 102, 107, 109, 119, 144, 150, 160, 166, 171, 174, 181, 191, 193, 198, 201, 203, 204, 208, 215, 216, 231, 236, 237, 241, 244, 253, 254, 275, 282, 283, 286, 325, 326, 327, 328, 329, 330, 379, 380, 394, 397, 398, 419, 422, 450, 451, 452, 453, 461, 468, 485, 488, 490, 494, 495, 498, 504, 505, 512, 531, 593, 594, 603, 610, 611, 613, 624, 625, 640, 690, 701, 710, 720, 726, 729, 732, 735, 739, 745, 746, 780, 799, 808, 845, 848, 849, 850, 851, 852, 913, 980, 981, 982, 983, 1021, 1039, 1115, 1119, 1120, 1121, 1129, 1139], "environ": [9, 28, 126, 136, 139], "local": [9, 32, 109, 111, 122, 123, 126, 137, 275, 373, 501, 502, 690, 834, 836, 864, 865, 897, 900, 1014, 1015, 1139], "non": [9, 30, 32, 33, 42, 50, 71, 101, 128, 173, 176, 188, 197, 218, 219, 241, 245, 250, 251, 275, 404, 461, 472, 500, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 549, 550, 556, 560, 612, 614, 623, 624, 625, 632, 639, 657, 661, 667, 668, 669, 672, 674, 690, 728, 731, 745, 756, 757, 772, 775, 776, 799, 928, 991, 1013, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1062, 1063, 1069, 1073, 1120, 1139], "env": [9, 138], "back": [9, 71, 160, 237, 275, 499, 588, 690, 758, 799, 808, 913, 1101, 1121, 1139], "contain": [10, 30, 31, 32, 33, 50, 71, 76, 97, 98, 101, 103, 109, 111, 122, 123, 130, 134, 147, 156, 172, 175, 188, 201, 205, 240, 275, 285, 287, 289, 310, 311, 409, 472, 473, 553, 555, 557, 559, 574, 575, 611, 613, 655, 690, 706, 716, 727, 730, 750, 769, 799, 802, 806, 807, 853, 998, 1005, 1017, 1066, 1068, 1070, 1072, 1087, 1088, 1115, 1139], "save_to_fil": 10, "json_str": 10, "written": [11, 29, 30, 33, 34, 35, 36, 37, 38, 50, 51, 52, 275, 758, 779, 799], "leav": [11, 197, 275, 461, 745, 799], "directli": [11, 28, 58, 78, 109, 135, 137, 141, 215, 275, 381, 382, 383, 666, 690, 712, 799, 908, 909, 910, 1139, 1147], "json_fil": 11, "ascii": [12, 20, 560, 561, 563, 569, 590, 1073, 1074, 1076, 1082, 1103], "charact": [12, 14, 20, 26, 30, 31, 50, 107, 108, 121, 275, 362, 554, 556, 560, 561, 563, 564, 565, 569, 570, 572, 573, 576, 577, 578, 579, 590, 750, 799, 802, 889, 1067, 1069, 1073, 1074, 1076, 1077, 1078, 1082, 1083, 1085, 1086, 1089, 1090, 1091, 1092, 1103], "displai": [12, 13, 14, 17, 19, 23, 25, 33, 170, 275], "tabl": [12, 16, 17, 19, 20, 21, 22, 23, 25, 26, 31, 32, 33, 57, 58, 59, 61, 96, 103, 107, 108, 111, 112, 121, 122, 123, 205, 231, 237, 244, 245, 275, 772, 799, 1121, 1139, 1146], "outlin": 12, "fals": [12, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 32, 33, 36, 38, 50, 51, 52, 56, 71, 77, 78, 97, 101, 103, 107, 108, 109, 112, 113, 115, 117, 118, 119, 121, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 143, 147, 148, 149, 150, 153, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 183, 184, 185, 187, 190, 191, 195, 200, 201, 203, 205, 206, 213, 214, 215, 216, 220, 224, 226, 232, 234, 236, 237, 240, 241, 242, 246, 248, 250, 257, 258, 260, 262, 263, 265, 268, 275, 285, 286, 287, 289, 299, 305, 307, 310, 311, 325, 326, 327, 328, 329, 330, 331, 349, 365, 367, 373, 378, 379, 380, 381, 382, 383, 397, 398, 404, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 422, 425, 426, 430, 436, 456, 460, 463, 468, 469, 471, 473, 477, 480, 482, 484, 494, 495, 496, 498, 501, 502, 507, 510, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 536, 541, 543, 544, 548, 550, 553, 558, 566, 567, 568, 572, 573, 575, 582, 583, 584, 604, 607, 610, 611, 612, 613, 614, 617, 620, 621, 626, 629, 634, 635, 636, 637, 638, 649, 650, 652, 663, 666, 672, 677, 678, 680, 681, 690, 706, 708, 709, 710, 711, 712, 718, 720, 726, 727, 728, 729, 730, 731, 735, 736, 738, 740, 741, 750, 759, 762, 764, 769, 770, 775, 783, 784, 786, 788, 789, 791, 794, 799, 802, 806, 807, 808, 818, 824, 831, 834, 837, 840, 841, 848, 849, 850, 851, 852, 853, 872, 892, 894, 900, 906, 908, 909, 910, 917, 921, 928, 929, 930, 932, 934, 936, 937, 938, 940, 941, 942, 943, 944, 946, 947, 948, 951, 955, 956, 966, 986, 990, 993, 1005, 1011, 1014, 1015, 1017, 1019, 1020, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1044, 1049, 1054, 1056, 1061, 1063, 1066, 1071, 1079, 1080, 1081, 1085, 1086, 1088, 1095, 1096, 1097, 1119, 1120, 1121, 1124, 1127, 1129, 1130, 1139, 1146], "revert": 12, "utf8_full_condens": [12, 20, 103], "format": [12, 13, 16, 20, 30, 33, 34, 35, 50, 106, 107, 108, 109, 121, 127, 159, 170, 187, 197, 214, 215, 233, 273, 275, 366, 369, 372, 484, 582, 583, 584, 587, 639, 719, 725, 745, 758, 779, 799, 896, 899, 1095, 1096, 1097, 1100, 1138], "style": [12, 20, 33, 119, 126, 205, 275], "abc": [12, 18, 19, 20, 21, 22, 23, 24, 25, 282, 556, 567, 690, 802, 1069, 1080], "xyz": [12, 18, 19, 20, 21, 22, 23, 24, 25, 282, 550, 556, 690, 1063, 1069, 1117, 1139], "f64": [12, 13, 16, 18, 19, 21, 22, 23, 24, 25, 53, 56, 71, 73, 75, 79, 97, 99, 127, 135, 149, 150, 152, 153, 154, 157, 161, 162, 166, 169, 170, 171, 172, 181, 189, 190, 195, 196, 205, 206, 207, 225, 226, 227, 247, 250, 254, 258, 260, 262, 263, 264, 265, 267, 268, 275, 281, 284, 291, 292, 293, 294, 295, 296, 314, 317, 318, 322, 323, 330, 331, 332, 335, 336, 367, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 393, 394, 397, 398, 403, 413, 415, 416, 417, 419, 420, 422, 436, 447, 464, 465, 466, 468, 474, 475, 476, 487, 490, 492, 493, 494, 495, 500, 504, 507, 508, 509, 510, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 539, 540, 541, 545, 546, 599, 600, 603, 608, 618, 619, 622, 623, 624, 626, 628, 640, 641, 655, 658, 659, 670, 671, 679, 686, 690, 709, 715, 721, 722, 726, 727, 735, 736, 743, 744, 751, 764, 765, 773, 775, 777, 780, 784, 786, 788, 789, 790, 791, 793, 794, 799, 802, 810, 811, 812, 813, 814, 815, 838, 839, 846, 847, 852, 853, 854, 857, 858, 894, 909, 910, 915, 919, 924, 966, 1013, 1017, 1019, 1028, 1030, 1031, 1033, 1034, 1035, 1037, 1038, 1052, 1053, 1057, 1113, 1114, 1126, 1139, 1147], "fmt": [13, 402, 644, 690, 733, 799], "floatfmt": 13, "mix": [13, 854, 1097, 1139], "control": [13, 33, 61, 78, 79, 133, 275, 712, 718, 799], "how": [13, 32, 33, 71, 79, 99, 102, 110, 126, 156, 189, 205, 244, 245, 275, 316, 333, 365, 366, 373, 403, 431, 432, 433, 499, 513, 526, 558, 582, 584, 636, 680, 690, 716, 735, 772, 799, 835, 855, 892, 893, 900, 961, 962, 963, 1034, 1071, 1095, 1097, 1139], "float": [13, 30, 33, 44, 45, 50, 112, 127, 130, 131, 132, 135, 137, 143, 153, 158, 161, 190, 207, 216, 223, 267, 275, 318, 331, 335, 336, 367, 378, 379, 380, 381, 382, 383, 388, 393, 397, 398, 403, 406, 410, 413, 415, 416, 417, 422, 430, 464, 468, 474, 487, 492, 493, 494, 495, 504, 507, 508, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 603, 622, 658, 659, 664, 666, 671, 679, 690, 721, 736, 751, 761, 762, 793, 799, 802, 831, 839, 853, 854, 856, 857, 858, 894, 906, 907, 908, 909, 910, 915, 919, 924, 935, 951, 960, 961, 962, 994, 1001, 1002, 1008, 1009, 1016, 1017, 1018, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1054, 1058, 1109, 1120, 1128, 1139, 1147], "point": [13, 33, 44, 45, 135, 137, 161, 172, 175, 191, 275, 318, 331, 335, 367, 388, 393, 413, 415, 473, 530, 531, 690, 721, 727, 730, 740, 741, 753, 799, 839, 853, 857, 894, 915, 919, 935, 1017, 1038, 1039, 1120, 1139], "full": [13, 41, 71, 76, 79, 107, 108, 111, 121, 122, 123, 172, 173, 175, 176, 275, 518, 582, 583, 584, 587, 690, 727, 728, 730, 731, 740, 741, 799, 802, 1095, 1096, 1097, 1100, 1147], "number": [13, 14, 15, 17, 25, 30, 33, 38, 50, 52, 62, 71, 81, 90, 96, 98, 100, 102, 105, 107, 108, 110, 112, 116, 117, 118, 121, 125, 126, 128, 133, 135, 136, 138, 139, 147, 149, 158, 159, 161, 162, 170, 178, 187, 188, 191, 192, 200, 201, 216, 222, 223, 227, 229, 240, 244, 247, 257, 259, 269, 275, 300, 306, 312, 324, 330, 331, 333, 347, 350, 355, 357, 367, 374, 375, 377, 381, 382, 383, 387, 389, 395, 400, 413, 415, 423, 424, 433, 440, 444, 445, 454, 459, 461, 503, 507, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 534, 535, 537, 546, 560, 561, 562, 565, 567, 573, 574, 585, 596, 602, 608, 626, 627, 647, 667, 668, 671, 675, 679, 690, 706, 709, 719, 720, 721, 722, 732, 739, 750, 760, 761, 765, 767, 769, 773, 783, 785, 795, 799, 830, 841, 852, 853, 855, 870, 873, 882, 884, 894, 901, 902, 904, 907, 908, 909, 910, 914, 916, 923, 935, 952, 953, 963, 970, 974, 975, 984, 989, 991, 1005, 1006, 1017, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1046, 1047, 1050, 1058, 1073, 1074, 1075, 1078, 1080, 1086, 1087, 1098, 1110, 1123, 1128, 1139, 1147], "limit": [13, 52, 109, 110, 121, 162, 275, 306, 319, 320, 321, 389, 395, 690, 722, 732, 799, 842, 843, 844, 916, 1139], "place": [13, 30, 50, 147, 155, 160, 180, 181, 205, 210, 215, 222, 223, 226, 240, 248, 275, 299, 442, 454, 534, 535, 543, 690, 706, 760, 761, 764, 769, 799, 808, 818, 913, 972, 984, 1020, 1046, 1047, 1056, 1139], "scientif": 13, "notat": [13, 33, 275], "larg": [13, 15, 32, 71, 109, 172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "small": [13, 110, 134, 191, 275, 366, 720, 799, 1147], "print": [13, 14, 17, 19, 20, 25, 108, 129, 157, 170, 171, 188, 191, 235, 253, 275, 402, 484, 690, 711, 733, 799, 936, 1118, 1139, 1147], "precis": [13, 30, 32, 33, 41, 42, 50, 109, 187, 214, 215, 233, 275, 338, 585, 799, 802, 861, 1098], "2304980958725870923": 13, "1e6": 13, "1e": [13, 130, 131], "230498": 13, "0000e": 13, "230498095872587": 13, "1000000": [13, 361, 590, 888], "00000001": [13, 610, 690], "plai": [14, 625], "sam": 14, "As": [14, 62, 80, 81, 96, 98, 99, 100, 102, 112, 116, 117, 275, 799], "time": [14, 32, 41, 43, 56, 61, 76, 77, 78, 119, 121, 160, 172, 173, 175, 176, 190, 246, 275, 312, 337, 338, 339, 340, 341, 345, 346, 362, 365, 366, 369, 371, 372, 373, 376, 429, 430, 461, 518, 521, 522, 523, 524, 525, 527, 528, 529, 537, 582, 584, 587, 601, 602, 624, 625, 634, 635, 636, 637, 638, 639, 645, 677, 678, 690, 711, 712, 727, 728, 730, 731, 736, 750, 799, 802, 808, 830, 860, 861, 862, 863, 868, 869, 889, 892, 893, 896, 898, 899, 900, 903, 913, 959, 961, 962, 1050, 1095, 1097, 1100, 1122, 1123, 1139, 1147], "goe": 14, "By": [14, 15, 28, 71, 107, 108, 121, 172, 173, 190, 227, 246, 247, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 546, 608, 626, 634, 635, 637, 638, 639, 652, 671, 677, 678, 679, 690, 711, 727, 728, 736, 765, 773, 799, 889, 893, 900, 1058, 1120, 1128, 1139], "begin": [14, 33, 275, 381, 382, 383, 555, 690, 908, 909, 910, 1068, 1139], "beauti": 14, "friendship": 14, "len_byt": [14, 561, 562, 1074, 1075], "len": [14, 33, 133, 135, 188, 275, 325, 445, 473, 563, 569, 590, 690, 975, 1076, 1082, 1103, 1139], "u32": [14, 56, 109, 145, 148, 202, 252, 257, 266, 268, 275, 283, 290, 297, 298, 299, 300, 301, 324, 325, 343, 347, 351, 355, 357, 363, 364, 367, 374, 375, 423, 427, 428, 432, 444, 472, 491, 497, 510, 517, 521, 522, 524, 527, 528, 529, 532, 550, 560, 561, 601, 605, 611, 616, 620, 621, 627, 662, 690, 704, 708, 748, 778, 783, 792, 794, 799, 818, 819, 820, 831, 836, 866, 870, 877, 879, 882, 884, 887, 890, 891, 894, 901, 902, 924, 974, 1019, 1026, 1063, 1073, 1074, 1122, 1125, 1127, 1139], "37": 14, "beaut": 14, "48": [14, 173, 275, 518, 690, 728, 799], "fmt_str_length": 14, "50": [14, 33, 153, 160, 170, 275, 319, 320, 321, 366, 373, 690, 842, 854, 900, 1139], "overwrit": [15, 31, 32, 96, 98, 99, 100, 102, 107, 108, 116, 117, 121, 143, 275, 284, 690, 720, 799], "chunk": [15, 52, 105, 107, 108, 119, 121, 124, 125, 126, 135, 137, 160, 188, 200, 275, 288, 511, 690, 799, 808, 840, 913, 920, 1005, 1020, 1115, 1139], "stream": [15, 34, 35, 50, 51, 52, 77, 78, 115, 147, 171, 174, 189, 240, 242, 275, 706, 711, 712, 718, 720, 726, 729, 735, 740, 741, 745, 750, 762, 764, 769, 770, 799], "engin": [15, 31, 109, 110, 112, 139, 171, 174, 189, 193, 242, 261, 275, 726, 729, 735, 740, 741, 745, 770, 787, 799, 999, 1139], "determin": [15, 30, 33, 50, 69, 71, 79, 99, 102, 107, 108, 109, 112, 118, 119, 121, 126, 128, 144, 154, 166, 172, 173, 175, 187, 188, 193, 205, 241, 246, 275, 316, 349, 365, 366, 373, 461, 472, 481, 507, 513, 521, 522, 523, 524, 525, 527, 528, 529, 541, 558, 582, 584, 585, 636, 663, 666, 681, 690, 727, 728, 730, 799, 835, 872, 892, 893, 900, 924, 991, 998, 1017, 1054, 1071, 1095, 1097, 1098, 1139], "schema": [15, 32, 56, 72, 73, 74, 79, 91, 92, 94, 96, 98, 99, 100, 102, 103, 107, 108, 109, 110, 114, 116, 117, 120, 121, 125, 126, 133, 135, 144, 149, 150, 157, 158, 188, 193, 198, 201, 236, 275, 302, 303, 304, 461, 481, 558, 610, 672, 690, 709, 710, 717, 740, 741, 746, 758, 782, 787, 799, 802, 823, 845, 1071, 1139], "thread": [15, 30, 50, 78, 105, 107, 108, 110, 139, 275, 289, 436, 473, 690, 712, 799, 966], "pool": [15, 78, 139, 712, 799], "For": [15, 32, 33, 110, 111, 112, 122, 123, 156, 160, 173, 189, 190, 261, 275, 381, 382, 383, 461, 473, 482, 512, 541, 548, 555, 556, 557, 567, 629, 639, 643, 644, 686, 690, 716, 728, 736, 787, 799, 808, 908, 909, 910, 913, 1021, 1054, 1061, 1068, 1069, 1070, 1080, 1120, 1139], "some": [15, 28, 32, 33, 62, 81, 99, 107, 108, 109, 112, 121, 143, 156, 275, 686, 716, 799, 936, 1139, 1147], "dataset": [15, 38, 107, 108, 119, 121, 126, 127, 189, 275, 420, 690, 701, 735, 740, 741, 799, 951, 1139], "esp": 15, "when": [15, 17, 19, 23, 30, 33, 38, 41, 50, 52, 61, 62, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 108, 109, 112, 113, 115, 118, 119, 121, 122, 124, 125, 127, 135, 137, 144, 147, 157, 158, 160, 162, 166, 172, 173, 175, 176, 189, 193, 204, 213, 215, 218, 219, 226, 234, 236, 240, 242, 251, 275, 319, 320, 321, 381, 382, 383, 389, 461, 472, 482, 503, 517, 518, 543, 544, 560, 561, 577, 578, 579, 582, 620, 629, 643, 690, 706, 722, 727, 728, 730, 731, 735, 740, 741, 756, 757, 764, 769, 770, 776, 799, 808, 842, 843, 844, 900, 907, 908, 909, 910, 913, 916, 998, 1026, 1042, 1043, 1073, 1074, 1090, 1091, 1092, 1095, 1116, 1139], "have": [15, 28, 32, 33, 41, 62, 71, 81, 97, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 126, 135, 137, 160, 173, 187, 208, 214, 215, 233, 275, 330, 381, 382, 383, 473, 482, 510, 518, 557, 690, 714, 728, 745, 752, 762, 778, 799, 802, 808, 852, 908, 909, 910, 913, 921, 1019, 1097, 1139, 1147], "element": [15, 25, 134, 137, 147, 186, 205, 213, 227, 240, 247, 275, 289, 291, 292, 293, 294, 295, 296, 312, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 385, 386, 390, 399, 409, 423, 431, 432, 434, 435, 436, 437, 441, 444, 445, 450, 451, 452, 453, 458, 462, 465, 466, 473, 499, 500, 510, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 538, 539, 540, 545, 546, 573, 574, 585, 599, 600, 602, 608, 626, 667, 668, 671, 679, 690, 706, 764, 765, 769, 773, 799, 809, 810, 811, 812, 813, 814, 815, 830, 838, 841, 846, 847, 848, 849, 850, 851, 852, 857, 858, 911, 912, 917, 923, 936, 950, 952, 953, 961, 962, 964, 965, 966, 967, 971, 974, 975, 980, 981, 982, 983, 988, 992, 995, 996, 999, 1013, 1019, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1051, 1052, 1053, 1057, 1058, 1086, 1087, 1098, 1110, 1113, 1114, 1118, 1123, 1124, 1128, 1139], "too": [15, 172, 173, 190, 246, 275, 362, 366, 373, 517, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 720, 727, 728, 736, 799, 889, 893, 900], "optimist": 15, "lead": [15, 38, 103, 127, 172, 173, 175, 176, 275, 471, 473, 518, 533, 564, 576, 577, 579, 590, 597, 626, 690, 727, 728, 730, 731, 740, 741, 782, 787, 799, 999, 1044, 1077, 1089, 1090, 1092, 1103, 1139], "out": [15, 50, 51, 52, 103, 129, 173, 215, 275, 308, 439, 460, 548, 551, 680, 728, 799, 826, 969, 990, 1061, 1064], "memori": [15, 52, 79, 96, 97, 100, 101, 102, 107, 108, 109, 112, 113, 119, 121, 124, 125, 126, 143, 160, 193, 215, 224, 261, 275, 499, 511, 536, 690, 711, 799, 808, 913, 999, 1020, 1048, 1049, 1139], "error": [15, 32, 78, 82, 107, 108, 121, 148, 172, 173, 190, 205, 213, 246, 275, 284, 308, 314, 362, 366, 373, 419, 442, 460, 518, 521, 522, 523, 524, 525, 527, 528, 529, 548, 551, 555, 557, 558, 559, 582, 583, 584, 587, 634, 635, 637, 638, 677, 678, 690, 708, 712, 727, 728, 736, 782, 787, 799, 826, 831, 889, 893, 900, 972, 990, 1061, 1064, 1068, 1070, 1071, 1072, 1095, 1096, 1097, 1100, 1139], "row": [15, 20, 25, 30, 33, 36, 38, 50, 52, 71, 72, 74, 79, 88, 90, 95, 99, 100, 102, 103, 107, 108, 109, 112, 113, 115, 119, 121, 124, 125, 126, 127, 130, 133, 135, 144, 147, 149, 156, 160, 163, 166, 170, 171, 172, 174, 177, 178, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 201, 215, 216, 225, 229, 230, 233, 235, 240, 242, 244, 245, 252, 259, 261, 269, 275, 300, 386, 400, 424, 437, 461, 499, 500, 514, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 542, 544, 554, 558, 596, 617, 620, 629, 630, 643, 647, 649, 650, 665, 667, 668, 675, 680, 690, 706, 709, 711, 716, 720, 723, 724, 727, 732, 735, 736, 737, 739, 741, 745, 763, 767, 768, 769, 770, 772, 778, 785, 787, 795, 799, 808, 912, 913, 923, 967, 1013, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1055, 1067, 1071, 1110, 1139, 1147], "per": [15, 30, 33, 50, 133, 135, 147, 170, 201, 202, 219, 226, 240, 251, 264, 266, 267, 275, 289, 313, 436, 439, 460, 473, 544, 607, 620, 690, 706, 757, 764, 769, 776, 790, 792, 793, 799, 966, 969, 990, 1127, 1139], "everi": [15, 30, 50, 107, 108, 121, 172, 175, 230, 233, 246, 275, 325, 326, 327, 328, 329, 330, 366, 373, 386, 427, 428, 433, 437, 439, 440, 450, 455, 459, 554, 598, 629, 630, 690, 720, 727, 730, 768, 799, 848, 849, 850, 851, 852, 893, 900, 912, 921, 957, 958, 963, 967, 969, 970, 980, 985, 989, 1067, 1112, 1139], "process": [15, 30, 50, 51, 52, 107, 108, 109, 121, 139, 275, 711, 799], "liter": [16, 20, 32, 56, 78, 109, 112, 118, 135, 136, 137, 138, 170, 187, 194, 195, 199, 200, 203, 213, 214, 218, 219, 228, 232, 245, 250, 251, 275, 284, 307, 339, 379, 380, 387, 394, 397, 398, 404, 422, 468, 472, 488, 490, 494, 495, 504, 548, 550, 567, 568, 593, 603, 612, 614, 617, 621, 623, 624, 625, 632, 633, 634, 635, 636, 637, 638, 649, 650, 652, 657, 661, 663, 666, 669, 672, 674, 676, 677, 678, 681, 690, 712, 722, 756, 757, 772, 775, 776, 799, 802, 806, 807, 825, 853, 862, 914, 928, 1017, 1042, 1043, 1061, 1063, 1080, 1081, 1139, 1146], "left": [16, 33, 58, 71, 130, 131, 172, 173, 175, 176, 189, 190, 245, 275, 331, 381, 382, 383, 403, 404, 507, 518, 521, 522, 523, 524, 525, 527, 528, 529, 532, 563, 590, 601, 623, 629, 630, 634, 635, 637, 638, 643, 665, 677, 678, 680, 690, 727, 728, 730, 731, 735, 736, 772, 799, 853, 908, 909, 910, 928, 1017, 1040, 1076, 1103, 1122, 1139], "center": [16, 33, 275, 381, 382, 383, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 690, 908, 909, 910, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1139], "right": [16, 18, 33, 107, 108, 130, 131, 172, 173, 175, 176, 189, 190, 245, 275, 331, 381, 382, 383, 404, 450, 451, 452, 453, 507, 518, 521, 522, 523, 524, 525, 527, 528, 529, 532, 541, 569, 623, 634, 635, 637, 638, 677, 678, 690, 727, 728, 730, 731, 735, 736, 772, 799, 853, 908, 909, 910, 928, 980, 981, 982, 983, 1017, 1040, 1054, 1082, 1139], "cell": [16, 33, 275], "align": [16, 33, 71, 79, 275, 590, 1103], "valueerror": [16, 20], "recognis": [16, 20, 132], "column_abc": 16, "column_xyz": 16, "visibl": [17, 158, 275, 907, 1139], "eg": [17, 25, 33, 79, 110, 141, 275, 366, 582, 584, 603, 690, 921, 1095, 1097, 1139], "low": [17, 109, 139, 507, 690, 1017, 1139], "rang": [17, 33, 109, 110, 153, 158, 172, 188, 275, 332, 343, 357, 363, 364, 366, 373, 374, 403, 617, 624, 633, 634, 635, 636, 637, 638, 649, 650, 676, 677, 678, 690, 727, 799, 854, 866, 884, 890, 891, 893, 900, 901, 907, 1013, 1139], "100": [17, 33, 99, 102, 107, 108, 121, 125, 275, 558, 585, 590, 799, 1029, 1030, 1032, 1071, 1098, 1139, 1147], "98": [17, 181, 275, 312, 543, 585, 597, 602, 690, 1098], "99": [17, 33, 161, 162, 181, 184, 275, 283, 312, 387, 389, 543, 597, 602, 690, 721, 722, 799, 906, 914, 1139], "tbl_col": 17, "10": [17, 29, 30, 32, 33, 34, 35, 38, 52, 56, 71, 79, 103, 110, 121, 129, 135, 137, 150, 160, 169, 170, 172, 173, 178, 180, 181, 182, 200, 204, 205, 206, 210, 211, 218, 229, 250, 254, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 275, 284, 288, 297, 298, 299, 301, 319, 324, 326, 329, 333, 337, 339, 345, 358, 359, 365, 366, 373, 376, 399, 400, 403, 409, 419, 423, 424, 433, 434, 440, 441, 454, 455, 458, 459, 462, 465, 481, 483, 500, 503, 518, 542, 590, 596, 610, 623, 629, 634, 637, 640, 643, 645, 647, 652, 654, 675, 678, 690, 711, 712, 727, 728, 732, 734, 739, 749, 750, 756, 766, 767, 775, 780, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 799, 802, 842, 855, 860, 862, 868, 892, 900, 903, 906, 923, 936, 953, 963, 964, 970, 971, 984, 985, 988, 989, 992, 995, 999, 1013, 1042, 1043, 1110, 1139, 1147], "95": [17, 283, 690], "96": [17, 283, 690], "97": [17, 181, 275, 283, 690], "move": [18, 215, 275, 381, 382, 383, 521, 522, 524, 528, 690, 908, 909, 910, 1029, 1030, 1032, 1036, 1139], "inlin": [18, 215, 275, 548, 555, 556, 567, 1061, 1068, 1069, 1080], "parenthes": 18, "inform": [19, 23, 32, 76, 111, 122, 123, 126, 152, 275, 319, 320, 321, 420, 541, 548, 555, 556, 567, 690, 750, 799, 836, 842, 843, 844, 951, 1054, 1061, 1068, 1069, 1080, 1139], "below": [19, 32, 111, 122, 123, 156, 172, 205, 275, 389, 634, 635, 637, 638, 677, 678, 680, 686, 690, 716, 727, 799], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_no_bord": 20, "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_horizontal_onli": 20, "ascii_markdown": 20, "utf8_ful": [20, 71, 103], "utf8_no_bord": 20, "utf8_borders_onli": 20, "utf8_horizontal_onli": 20, "noth": [20, 313, 555, 559, 690, 1068, 1072], "rounded_corn": 20, "border": 20, "line": [20, 33, 107, 108, 112, 121, 170, 183, 185, 275, 555, 1068], "includ": [20, 28, 30, 32, 33, 50, 76, 109, 111, 122, 123, 135, 147, 153, 158, 203, 215, 240, 241, 244, 275, 331, 367, 404, 507, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 572, 573, 577, 578, 629, 667, 668, 690, 706, 769, 799, 802, 853, 854, 894, 907, 928, 1017, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1085, 1086, 1090, 1129, 1139], "divid": [20, 331, 366, 373, 381, 382, 383, 420, 507, 690, 853, 893, 900, 908, 909, 910, 951, 1017, 1139], "same": [20, 32, 33, 60, 62, 71, 77, 78, 79, 80, 81, 113, 121, 130, 131, 133, 141, 171, 193, 205, 215, 226, 242, 250, 251, 254, 261, 275, 281, 288, 335, 336, 477, 480, 499, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 544, 560, 592, 597, 690, 711, 712, 726, 740, 741, 764, 770, 775, 776, 780, 799, 804, 808, 809, 853, 857, 858, 862, 999, 1017, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1073, 1130, 1139], "dens": [20, 170, 275, 510, 690, 1019, 1139], "space": [20, 172, 275, 727, 799], "horizont": [20, 79, 166, 180, 244, 275, 612, 614, 624, 625, 629, 630, 632, 640, 643, 657, 661, 665, 674], "markdown": 20, "compat": [20, 33, 38, 52, 275, 548, 549, 550, 555, 556, 557, 567, 568, 799, 802, 1061, 1062, 1063, 1068, 1069, 1070, 1080, 1081], "No": [20, 588, 1101], "appli": [20, 30, 33, 50, 56, 79, 121, 132, 135, 137, 166, 193, 204, 261, 275, 341, 342, 343, 347, 349, 350, 351, 353, 355, 357, 360, 363, 364, 367, 370, 374, 375, 377, 382, 383, 469, 471, 473, 503, 519, 521, 522, 524, 528, 567, 582, 583, 584, 587, 629, 630, 643, 653, 654, 655, 665, 680, 690, 732, 739, 740, 741, 749, 787, 799, 864, 865, 866, 870, 872, 873, 877, 879, 882, 884, 887, 890, 891, 894, 897, 901, 902, 904, 909, 910, 999, 1027, 1029, 1030, 1032, 1036, 1080, 1095, 1096, 1097, 1100, 1139], "round": [20, 33, 73, 103, 109, 275, 318, 393, 599, 690, 839, 919, 1139], "corner": [20, 33, 103, 275], "op": [20, 137, 275, 513, 690, 799, 1097, 1139], "one": [20, 30, 31, 33, 50, 61, 71, 88, 96, 98, 99, 100, 101, 102, 107, 108, 112, 116, 117, 118, 121, 136, 137, 138, 141, 162, 163, 170, 171, 172, 173, 175, 176, 187, 197, 205, 213, 214, 220, 236, 239, 255, 275, 283, 331, 389, 461, 466, 518, 543, 556, 597, 655, 670, 680, 686, 690, 722, 723, 726, 727, 728, 730, 731, 745, 759, 777, 781, 799, 808, 853, 916, 947, 991, 996, 1017, 1069, 1104, 1139], "more": [20, 33, 36, 38, 52, 61, 71, 79, 80, 81, 95, 96, 97, 98, 99, 100, 101, 102, 109, 110, 111, 112, 116, 117, 118, 119, 122, 123, 135, 137, 141, 152, 153, 187, 191, 193, 197, 201, 213, 214, 216, 236, 242, 261, 275, 286, 289, 305, 319, 320, 321, 420, 463, 466, 471, 473, 498, 531, 541, 556, 560, 582, 583, 584, 604, 670, 680, 690, 745, 770, 799, 802, 809, 824, 836, 842, 843, 844, 854, 947, 951, 993, 999, 1039, 1054, 1069, 1073, 1095, 1096, 1097, 1124, 1139, 1147], "semigraph": 20, "box": [20, 193, 275], "draw": [20, 25, 134, 1147], "found": [20, 30, 33, 50, 58, 83, 92, 94, 99, 103, 157, 245, 275, 532, 559, 580, 581, 582, 584, 690, 772, 799, 1040, 1072, 1093, 1094, 1095, 1097, 1139, 1146], "unicod": 20, "block": [20, 78, 171, 174, 242, 275, 680, 712, 726, 729, 753, 770, 778, 787, 799, 1042, 1043, 1139], "http": [20, 33, 34, 35, 97, 109, 110, 143, 152, 275, 555, 557, 1068, 1070], "en": [20, 33, 275], "wikipedia": 20, "org": [20, 34, 35, 97, 109, 110, 143, 152, 275], "wiki": 20, "drawing_charact": 20, "box_draw": 20, "mno": 20, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "hide": [21, 22, 23, 24, 33, 275], "etc": [21, 32, 33, 107, 111, 113, 115, 119, 122, 123, 124, 275, 802, 1042, 1043, 1139], "separ": [24, 30, 50, 105, 107, 108, 121, 203, 205, 234, 241, 243, 275, 289, 437, 442, 473, 554, 625, 629, 630, 690, 771, 799, 967, 972, 1067, 1108, 1116, 1139], "between": [24, 79, 132, 133, 135, 137, 152, 207, 267, 275, 314, 334, 404, 434, 441, 442, 450, 451, 452, 453, 458, 462, 500, 507, 508, 525, 547, 618, 619, 626, 628, 664, 667, 668, 690, 751, 793, 799, 831, 836, 856, 928, 964, 971, 972, 980, 981, 982, 983, 988, 992, 1013, 1017, 1018, 1033, 1060, 1139], "set_tbl_column_data_type_inlin": 24, "max": [25, 33, 38, 52, 56, 139, 153, 162, 171, 173, 205, 275, 319, 320, 326, 389, 461, 499, 510, 518, 521, 533, 574, 657, 670, 690, 722, 726, 728, 799, 842, 843, 848, 854, 916, 991, 1019, 1029, 1044, 1087, 1139], "both": [25, 30, 50, 62, 80, 81, 112, 172, 173, 175, 176, 189, 190, 198, 213, 275, 288, 331, 384, 404, 507, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 686, 690, 700, 727, 728, 730, 731, 735, 736, 746, 799, 928, 938, 1139], "tbl_row": 25, "maximum": [26, 30, 50, 107, 108, 121, 127, 133, 134, 135, 137, 170, 172, 194, 275, 427, 474, 492, 501, 510, 656, 657, 690, 727, 742, 799, 842, 874, 957, 1000, 1008, 1014, 1019, 1139], "enabl": [27, 62, 80, 81, 130, 131, 140, 218, 250, 275, 285, 287, 533, 607, 686, 690, 711, 756, 775, 799, 806, 807, 1044, 1127, 1139], "addit": [27, 32, 33, 99, 111, 112, 122, 123, 133, 154, 156, 159, 171, 174, 203, 218, 219, 220, 226, 243, 250, 251, 254, 275, 282, 345, 384, 387, 499, 544, 548, 555, 556, 567, 620, 623, 624, 625, 641, 669, 672, 690, 715, 719, 726, 729, 756, 757, 759, 764, 771, 775, 776, 780, 799, 860, 868, 914, 1061, 1068, 1069, 1080, 1139], "verbos": [27, 141, 556, 1069], "debug": [27, 711, 720, 740, 741, 799, 1147], "log": [27, 73, 312, 378, 466, 490, 504, 602, 690, 830, 906, 1123, 1139], "do_polars_oper": 27, "if_set": 28, "env_onli": 28, "dict": [28, 32, 33, 38, 59, 72, 74, 76, 96, 98, 99, 100, 101, 102, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 135, 165, 187, 203, 209, 213, 214, 215, 217, 232, 233, 241, 275, 472, 517, 690, 753, 755, 799, 998, 1139], "show": [28, 33, 60, 156, 170, 191, 202, 275, 716, 750, 762, 799], "variabl": [28, 53, 58, 126, 136, 139, 197, 234, 275, 745, 799, 1116, 1139, 1146], "chang": [28, 71, 78, 107, 108, 109, 127, 244, 245, 246, 275, 289, 330, 331, 333, 366, 473, 500, 507, 521, 522, 523, 524, 525, 527, 528, 529, 690, 712, 772, 799, 808, 836, 837, 852, 853, 893, 924, 1013, 1017, 1049, 1139], "restrict": [28, 574, 1087], "dictionari": [28, 33, 96, 98, 99, 100, 102, 107, 108, 109, 110, 114, 116, 117, 120, 121, 187, 203, 213, 214, 215, 232, 233, 275, 472, 690, 799, 998, 1139], "those": [28, 33, 107, 112, 215, 275, 510, 555, 655, 690, 802, 1019, 1068, 1139], "been": [28, 33, 143, 144, 146, 174, 175, 176, 256, 275, 289, 313, 407, 411, 414, 431, 434, 441, 445, 458, 462, 469, 473, 510, 519, 521, 522, 523, 524, 525, 527, 528, 529, 549, 562, 564, 565, 570, 576, 615, 653, 690, 705, 729, 730, 731, 740, 752, 779, 782, 799, 809, 933, 939, 961, 964, 971, 975, 988, 992, 1019, 1027, 1062, 1075, 1077, 1078, 1083, 1089, 1139], "set_fmt_float": 28, "via": [28, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 125, 126, 187, 214, 275, 289, 473, 557, 690, 714, 752, 799, 1070], "set_stat": 28, "all_stat": 28, "binaryio": [29, 34, 35, 106, 107, 112, 113, 114, 115, 118, 119, 120, 275], "bytesio": [29, 30, 33, 34, 35, 38, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 275, 714, 752, 799], "compress": [29, 34, 35, 38, 51, 52, 275, 799], "avrocompress": [29, 275], "uncompress": [29, 34, 35, 38, 52, 113, 124, 275, 799], "write": [29, 30, 31, 32, 33, 34, 35, 36, 38, 50, 51, 52, 108, 113, 141, 275, 319, 320, 321, 486, 690, 738, 762, 799, 842, 843, 844, 1139], "apach": [29, 34, 35, 38, 106, 109, 110, 123, 275, 701], "avro": [29, 106, 275, 701], "should": [29, 30, 31, 33, 34, 35, 36, 37, 38, 50, 51, 52, 79, 96, 98, 100, 102, 111, 116, 117, 119, 121, 126, 132, 133, 137, 147, 154, 172, 173, 187, 190, 193, 213, 214, 215, 233, 234, 240, 243, 246, 261, 275, 283, 316, 330, 362, 366, 373, 376, 384, 413, 415, 436, 473, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 532, 541, 607, 634, 635, 637, 638, 639, 641, 648, 652, 655, 667, 668, 677, 678, 680, 690, 706, 715, 720, 727, 728, 735, 736, 741, 758, 762, 764, 769, 771, 779, 799, 802, 835, 852, 889, 893, 900, 903, 966, 999, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1040, 1054, 1127, 1139], "snappi": [29, 38, 52, 275, 799], "deflat": [29, 275], "import": [29, 30, 32, 33, 34, 35, 38, 41, 71, 96, 97, 100, 101, 121, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 148, 153, 154, 156, 170, 172, 188, 190, 197, 203, 205, 234, 236, 237, 244, 246, 275, 332, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 520, 521, 522, 524, 527, 528, 529, 618, 619, 634, 635, 637, 639, 677, 678, 686, 690, 701, 708, 712, 714, 715, 716, 727, 736, 741, 745, 758, 799, 846, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 932, 937, 941, 942, 947, 1028, 1052, 1113, 1139, 1147], "pathlib": [29, 30, 34, 35, 38, 121, 275], "foo": [29, 30, 32, 34, 35, 36, 37, 38, 60, 148, 151, 152, 154, 155, 156, 157, 160, 163, 164, 166, 167, 168, 169, 177, 178, 179, 180, 181, 182, 184, 189, 193, 194, 195, 196, 199, 202, 205, 207, 209, 210, 211, 213, 216, 217, 218, 221, 222, 223, 225, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 241, 242, 243, 247, 248, 249, 253, 275, 315, 319, 320, 321, 331, 362, 400, 402, 424, 430, 438, 439, 443, 477, 480, 481, 482, 483, 484, 485, 507, 514, 534, 535, 547, 550, 552, 554, 556, 557, 572, 574, 577, 578, 579, 580, 581, 586, 589, 596, 598, 616, 622, 626, 627, 628, 642, 646, 647, 651, 656, 658, 659, 660, 662, 664, 669, 671, 675, 679, 680, 686, 690, 708, 713, 715, 716, 717, 723, 733, 734, 735, 748, 753, 755, 756, 770, 771, 774, 777, 799, 802, 833, 842, 853, 889, 972, 1017, 1023, 1063, 1065, 1067, 1069, 1070, 1087, 1093, 1094, 1099, 1102, 1139], "bar": [29, 30, 32, 34, 35, 36, 37, 38, 60, 148, 151, 152, 154, 155, 156, 157, 160, 163, 164, 166, 167, 168, 169, 178, 180, 181, 182, 184, 189, 193, 194, 195, 196, 199, 202, 205, 207, 209, 210, 211, 213, 216, 217, 218, 222, 223, 225, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 242, 243, 247, 248, 253, 275, 315, 402, 477, 478, 479, 480, 481, 482, 483, 484, 485, 541, 550, 552, 554, 556, 557, 572, 574, 580, 581, 616, 622, 626, 627, 628, 642, 647, 651, 656, 658, 659, 660, 662, 669, 671, 675, 679, 680, 686, 690, 708, 713, 715, 716, 717, 723, 733, 734, 735, 748, 753, 755, 756, 770, 771, 774, 799, 802, 833, 972, 1054, 1063, 1065, 1067, 1069, 1070, 1087, 1093, 1094, 1139], "ham": [29, 30, 32, 34, 35, 38, 148, 151, 152, 154, 155, 156, 157, 163, 164, 167, 177, 178, 180, 189, 194, 195, 196, 199, 202, 207, 209, 211, 213, 216, 217, 218, 222, 223, 225, 227, 228, 229, 234, 235, 236, 237, 238, 242, 247, 248, 275, 315, 484, 708, 713, 715, 716, 717, 723, 735, 748, 753, 755, 756, 770, 777, 799, 833], "d": [29, 30, 32, 33, 34, 35, 38, 99, 127, 153, 170, 172, 177, 178, 181, 189, 229, 231, 244, 248, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 275, 282, 284, 346, 369, 372, 404, 503, 536, 550, 556, 573, 582, 583, 584, 623, 639, 645, 690, 727, 735, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 799, 836, 869, 896, 899, 928, 1063, 1069, 1086, 1095, 1096, 1097, 1139], "e": [29, 30, 32, 34, 35, 38, 50, 97, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 153, 170, 172, 173, 178, 190, 229, 231, 236, 244, 246, 275, 282, 289, 362, 366, 373, 378, 384, 404, 464, 472, 473, 478, 479, 481, 482, 483, 484, 485, 518, 521, 522, 523, 524, 525, 527, 528, 529, 536, 541, 634, 635, 637, 638, 641, 655, 677, 678, 680, 690, 714, 727, 728, 736, 738, 752, 753, 799, 802, 889, 893, 900, 906, 928, 1041, 1054, 1120, 1139, 1147], "dirpath": [29, 30, 34, 35, 38, 121, 275], "new_fil": [29, 30, 34, 35, 38, 275], "has_head": [30, 33, 50, 107, 108, 112, 121, 275, 799], "line_termin": [30, 50, 275, 799], "quote_char": [30, 50, 107, 108, 121, 275, 799], "batch_siz": [30, 50, 107, 108, 109, 125, 127, 275, 799], "1024": [30, 50, 52, 107, 108, 109, 125, 275, 799], "datetime_format": [30, 50, 275, 799], "date_format": [30, 50, 275, 799], "time_format": [30, 50, 275, 799], "float_precis": [30, 33, 50, 275, 799], "null_valu": [30, 50, 107, 108, 121, 275, 799], "quote_styl": [30, 50, 275, 799], "csvquotestyl": [30, 50, 275, 799], "textiowrapp": [30, 275], "comma": [30, 275], "csv": [30, 50, 51, 52, 107, 108, 112, 121, 275, 701, 799], "result": [30, 36, 37, 50, 51, 52, 71, 79, 100, 102, 109, 110, 111, 112, 121, 124, 126, 127, 137, 160, 172, 173, 175, 189, 201, 205, 215, 223, 237, 246, 254, 275, 369, 372, 381, 382, 383, 387, 420, 461, 471, 473, 499, 507, 514, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 533, 535, 572, 573, 584, 603, 629, 630, 634, 635, 636, 637, 638, 654, 663, 666, 667, 668, 681, 690, 707, 727, 728, 730, 731, 735, 740, 741, 750, 758, 761, 779, 780, 799, 808, 853, 896, 899, 908, 909, 910, 913, 951, 999, 1017, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1044, 1047, 1085, 1086, 1097, 1120, 1139, 1146, 1147], "If": [30, 31, 32, 33, 34, 35, 36, 37, 38, 50, 52, 56, 62, 76, 78, 79, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 136, 143, 144, 147, 156, 160, 170, 172, 173, 175, 176, 178, 186, 187, 190, 192, 193, 201, 205, 214, 215, 216, 225, 229, 233, 234, 236, 240, 241, 242, 244, 245, 275, 285, 287, 289, 319, 320, 321, 339, 358, 359, 373, 390, 420, 455, 461, 471, 472, 473, 484, 499, 507, 510, 512, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 537, 541, 542, 556, 557, 558, 564, 570, 571, 572, 573, 574, 576, 577, 578, 579, 582, 583, 584, 587, 607, 611, 613, 615, 617, 621, 626, 627, 629, 634, 635, 637, 638, 639, 643, 649, 650, 652, 655, 663, 666, 667, 668, 672, 677, 678, 680, 681, 690, 706, 711, 712, 716, 718, 727, 728, 730, 731, 735, 736, 741, 745, 753, 758, 763, 769, 770, 772, 779, 782, 787, 799, 802, 806, 807, 808, 809, 842, 843, 844, 853, 862, 885, 886, 900, 913, 921, 923, 924, 950, 951, 953, 985, 991, 999, 1017, 1019, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1044, 1050, 1054, 1055, 1069, 1070, 1071, 1077, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1100, 1110, 1115, 1120, 1127, 1129, 1139, 1146], "instead": [30, 36, 37, 56, 60, 71, 78, 79, 107, 108, 109, 112, 118, 119, 121, 126, 135, 170, 172, 173, 187, 190, 193, 201, 203, 213, 214, 215, 218, 219, 237, 246, 250, 251, 275, 299, 331, 362, 365, 366, 373, 384, 471, 507, 518, 521, 522, 523, 524, 525, 527, 528, 529, 560, 561, 564, 570, 576, 577, 578, 579, 582, 584, 617, 621, 622, 634, 635, 636, 637, 638, 639, 649, 650, 663, 666, 672, 677, 678, 681, 690, 712, 721, 727, 728, 736, 756, 757, 758, 775, 776, 779, 799, 802, 818, 853, 889, 892, 893, 900, 1017, 1042, 1043, 1073, 1074, 1077, 1083, 1089, 1090, 1091, 1092, 1095, 1097, 1121, 1139, 1146], "whether": [30, 50, 100, 102, 137, 140, 147, 220, 240, 275, 285, 287, 349, 367, 425, 426, 478, 479, 533, 690, 706, 740, 741, 759, 764, 769, 799, 802, 806, 807, 834, 837, 872, 894, 955, 956, 1139, 1146], "header": [30, 33, 38, 50, 52, 103, 107, 108, 112, 121, 157, 205, 241, 275, 799], "field": [30, 32, 50, 63, 92, 94, 99, 236, 243, 275, 461, 472, 516, 556, 557, 558, 573, 574, 592, 629, 630, 654, 672, 690, 771, 799, 853, 991, 1017, 1025, 1070, 1084, 1086, 1087, 1106, 1108, 1139], "symbol": [30, 50, 275, 799], "end": [30, 33, 50, 107, 108, 119, 121, 172, 275, 307, 310, 311, 337, 366, 384, 404, 455, 548, 553, 556, 571, 575, 617, 634, 635, 637, 638, 641, 649, 650, 677, 678, 680, 690, 727, 732, 739, 750, 799, 802, 828, 860, 893, 928, 985, 1066, 1069, 1084, 1088, 1139], "each": [30, 33, 50, 71, 108, 109, 125, 130, 131, 133, 170, 171, 172, 173, 174, 175, 176, 188, 190, 193, 203, 216, 237, 243, 246, 253, 254, 257, 259, 261, 269, 275, 331, 366, 373, 407, 408, 411, 412, 440, 444, 445, 459, 466, 473, 507, 510, 517, 523, 525, 527, 529, 531, 537, 544, 556, 560, 561, 562, 565, 573, 574, 617, 620, 625, 649, 650, 672, 680, 690, 711, 727, 728, 730, 731, 736, 750, 771, 780, 782, 783, 785, 787, 795, 799, 840, 853, 893, 900, 933, 934, 939, 940, 970, 974, 975, 989, 1017, 1019, 1026, 1039, 1050, 1069, 1073, 1074, 1075, 1078, 1086, 1087, 1108, 1139, 1147], "byte": [30, 50, 52, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 158, 275, 560, 562, 799, 907, 1073, 1075, 1139], "quot": [30, 31, 50, 107, 108, 121, 275, 799], "specifi": [30, 33, 50, 71, 83, 92, 94, 112, 118, 135, 147, 148, 154, 158, 159, 162, 171, 172, 173, 174, 175, 176, 189, 203, 213, 215, 218, 219, 220, 226, 240, 243, 250, 251, 254, 275, 381, 382, 383, 384, 389, 472, 499, 513, 521, 522, 523, 524, 525, 527, 528, 529, 544, 563, 569, 620, 623, 624, 625, 634, 635, 637, 638, 641, 669, 672, 677, 678, 690, 706, 708, 715, 719, 722, 726, 727, 728, 729, 730, 731, 735, 756, 757, 759, 764, 769, 771, 775, 776, 780, 799, 907, 908, 909, 910, 916, 1076, 1082, 1139], "defin": [30, 33, 41, 50, 109, 132, 133, 135, 144, 148, 156, 159, 172, 173, 175, 176, 193, 201, 204, 256, 261, 275, 289, 404, 460, 473, 503, 507, 517, 518, 521, 522, 523, 524, 525, 527, 528, 529, 615, 634, 635, 637, 638, 652, 655, 672, 677, 678, 690, 708, 716, 719, 727, 728, 730, 731, 749, 782, 787, 799, 802, 809, 928, 990, 999, 1017, 1026, 1139], "chrono": [30, 50, 275, 369, 372, 582, 583, 584, 587, 799, 896, 899, 1095, 1096, 1097, 1100], "rust": [30, 38, 50, 89, 109, 113, 115, 119, 193, 261, 275, 557, 799, 999, 1070, 1139], "crate": [30, 50, 275, 548, 549, 550, 555, 556, 557, 567, 568, 582, 583, 584, 587, 799, 802, 1061, 1062, 1063, 1068, 1069, 1070, 1080, 1081, 1095, 1096, 1097, 1100], "fraction": [30, 50, 130, 131, 216, 275, 367, 500, 531, 582, 584, 690, 799, 894, 1013, 1039, 1095, 1097, 1139], "second": [30, 50, 134, 172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 582, 584, 634, 635, 636, 637, 638, 639, 676, 677, 678, 680, 690, 727, 728, 736, 799, 802, 889, 893, 900, 1095, 1097, 1147], "infer": [30, 50, 96, 98, 99, 100, 101, 102, 107, 108, 109, 112, 116, 117, 121, 125, 126, 144, 193, 275, 514, 558, 582, 583, 584, 585, 587, 666, 690, 799, 1023, 1071, 1095, 1096, 1097, 1098, 1100, 1139], "timeunit": [30, 41, 43, 50, 275, 338, 339, 371, 376, 584, 634, 635, 636, 637, 638, 639, 799, 802, 861, 862, 898, 903, 1097], "frame": [30, 31, 33, 50, 56, 57, 58, 59, 60, 61, 71, 78, 79, 99, 108, 112, 118, 130, 135, 148, 149, 187, 188, 193, 198, 201, 204, 213, 214, 215, 237, 244, 245, 275, 708, 709, 746, 749, 772, 799, 802, 841, 1139, 1146, 1147], "datetim": [30, 32, 33, 50, 71, 103, 112, 135, 148, 153, 170, 172, 173, 175, 176, 188, 190, 246, 275, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 430, 518, 521, 522, 523, 524, 525, 527, 528, 529, 582, 584, 601, 634, 635, 637, 638, 639, 645, 652, 677, 678, 690, 708, 727, 728, 730, 731, 736, 799, 802, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 947, 960, 961, 962, 1008, 1009, 1043, 1095, 1097, 1122, 1139], "float64": [30, 33, 50, 99, 107, 135, 157, 158, 166, 217, 237, 250, 275, 291, 292, 293, 294, 295, 296, 314, 322, 323, 332, 367, 384, 413, 415, 509, 539, 540, 599, 600, 641, 663, 666, 681, 690, 717, 755, 775, 799, 802, 894, 1121, 1126, 1139], "repres": [30, 33, 50, 54, 69, 96, 98, 100, 101, 102, 109, 112, 227, 247, 253, 275, 413, 415, 471, 546, 608, 611, 626, 639, 641, 652, 654, 655, 667, 668, 671, 679, 686, 690, 765, 773, 799, 1043, 1058, 1128, 1139], "empti": [30, 50, 87, 99, 107, 108, 112, 118, 121, 149, 150, 172, 184, 197, 275, 652, 669, 709, 710, 727, 745, 799, 802, 841, 845, 931, 1139], "necessari": [30, 50, 62, 81, 112, 275, 799], "alwai": [30, 32, 50, 56, 107, 134, 171, 174, 193, 261, 275, 481, 582, 634, 680, 741, 799, 808, 999, 1095, 1139, 1146, 1147], "non_numer": [30, 50, 275, 799], "never": [30, 50, 109, 213, 275, 799], "strategi": [30, 50, 71, 79, 107, 132, 133, 134, 135, 137, 162, 172, 175, 189, 190, 200, 275, 289, 389, 461, 473, 690, 722, 727, 730, 735, 736, 799, 916, 991, 1139], "put": [30, 50, 275, 799], "around": [30, 50, 275, 799], "thei": [30, 32, 33, 50, 62, 78, 79, 80, 81, 99, 121, 130, 141, 191, 215, 275, 712, 799, 802], "record": [30, 35, 50, 115, 127, 190, 236, 275, 736, 799], "termin": [30, 50, 275, 799], "also": [30, 33, 50, 61, 62, 99, 109, 112, 118, 121, 133, 134, 135, 136, 137, 141, 157, 171, 172, 173, 175, 176, 198, 201, 214, 218, 226, 250, 275, 326, 329, 362, 365, 404, 473, 510, 521, 522, 523, 524, 525, 527, 528, 529, 544, 577, 578, 629, 630, 634, 643, 645, 665, 680, 689, 690, 695, 726, 727, 728, 730, 731, 746, 756, 764, 775, 777, 799, 802, 892, 928, 1019, 1062, 1063, 1090, 1139], "indistinguish": [30, 50, 275, 799], "even": [30, 50, 107, 275, 503, 507, 690, 799, 1017, 1139], "invalid": [30, 50, 107, 108, 121, 275, 558, 559, 566, 603, 690, 799, 1071, 1072, 1079], "g": [30, 50, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 143, 172, 173, 190, 236, 244, 246, 275, 282, 289, 362, 366, 373, 384, 473, 518, 521, 522, 523, 524, 525, 527, 528, 529, 536, 634, 635, 637, 638, 641, 677, 678, 690, 714, 727, 728, 736, 752, 753, 799, 889, 893, 900, 1041, 1120, 1139, 1147], "numer": [30, 33, 50, 148, 154, 190, 197, 205, 244, 275, 282, 319, 320, 321, 394, 404, 466, 488, 490, 504, 513, 536, 557, 593, 603, 690, 701, 708, 715, 736, 745, 799, 802, 842, 843, 844, 854, 928, 945, 1041, 1048, 1070, 1120, 1139, 1147], "doe": [30, 32, 50, 71, 79, 90, 96, 98, 99, 100, 102, 103, 107, 108, 109, 111, 112, 116, 117, 121, 122, 127, 130, 131, 150, 160, 188, 189, 213, 214, 215, 242, 250, 275, 313, 376, 461, 472, 605, 642, 651, 686, 690, 710, 720, 735, 741, 770, 775, 799, 808, 845, 903, 913, 921, 998, 1049, 1129, 1139], "pars": [30, 50, 56, 107, 108, 112, 117, 121, 124, 125, 147, 171, 174, 218, 219, 226, 240, 250, 251, 254, 275, 404, 472, 499, 544, 558, 566, 585, 612, 614, 620, 623, 624, 625, 632, 645, 657, 661, 669, 670, 672, 674, 680, 690, 706, 726, 729, 756, 757, 764, 769, 775, 776, 780, 799, 928, 1071, 1079, 1097, 1098, 1139], "valid": [30, 33, 41, 50, 56, 109, 113, 115, 119, 137, 141, 158, 189, 275, 330, 548, 549, 550, 555, 556, 557, 559, 567, 568, 680, 690, 735, 799, 802, 852, 907, 921, 1061, 1062, 1063, 1068, 1069, 1070, 1072, 1080, 1081, 1139], "integ": [30, 32, 33, 46, 47, 48, 49, 50, 65, 66, 67, 68, 128, 133, 135, 136, 138, 156, 172, 173, 234, 275, 286, 318, 367, 393, 394, 498, 507, 512, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 566, 610, 617, 645, 649, 650, 666, 690, 716, 727, 728, 799, 802, 839, 894, 919, 938, 1017, 1021, 1034, 1043, 1079, 1139, 1146, 1147], "aren": [30, 50, 275, 799], "t": [30, 50, 58, 59, 79, 107, 112, 118, 121, 172, 193, 204, 242, 244, 275, 289, 330, 337, 345, 365, 378, 381, 382, 383, 436, 473, 499, 503, 555, 579, 582, 584, 680, 690, 727, 749, 770, 799, 802, 852, 892, 906, 908, 909, 910, 966, 999, 1041, 1068, 1091, 1092, 1095, 1097, 1120, 1129, 1139], "strictli": [30, 50, 62, 81, 275, 720, 799], "table_nam": [31, 33, 275], "connect": [31, 107, 109, 110, 113, 115, 119, 124, 126, 127, 275, 702], "if_exist": [31, 275], "dbwritemod": [31, 275], "fail": [31, 32, 97, 111, 113, 117, 122, 126, 143, 242, 275, 300, 370, 461, 582, 583, 584, 587, 690, 770, 799, 999, 1095, 1096, 1097, 1100, 1139], "dbwriteengin": [31, 275], "sqlalchemi": [31, 109, 129, 275], "databas": [31, 109, 110, 275, 701], "creat": [31, 33, 62, 81, 96, 100, 102, 109, 110, 122, 123, 133, 134, 135, 136, 137, 138, 149, 150, 172, 173, 176, 202, 205, 246, 250, 275, 339, 366, 373, 461, 511, 518, 521, 522, 524, 527, 528, 529, 571, 624, 633, 634, 635, 636, 637, 638, 639, 676, 677, 678, 686, 690, 709, 710, 718, 727, 728, 731, 775, 799, 841, 845, 853, 862, 893, 900, 1010, 1017, 1020, 1084, 1120, 1139, 1146, 1147], "append": [31, 32, 135, 160, 189, 190, 275, 511, 680, 690, 735, 736, 799, 913, 1139], "your": [31, 33, 62, 71, 81, 107, 108, 109, 112, 130, 131, 187, 193, 214, 215, 218, 233, 250, 254, 261, 275, 289, 473, 557, 582, 583, 584, 655, 690, 732, 739, 741, 756, 775, 780, 787, 799, 999, 1070, 1095, 1096, 1097, 1139, 1147], "special": [31, 107, 108, 121, 275, 520, 556, 690, 809, 999, 1028, 1069, 1139], "uri": [31, 32, 109, 110, 111, 122, 123, 275], "postgresql": [31, 109, 110, 275, 499, 690], "user": [31, 109, 110, 144, 193, 204, 256, 261, 275, 289, 471, 473, 503, 533, 615, 655, 690, 749, 782, 787, 799, 809, 999, 1044, 1139], "pass": [31, 32, 33, 38, 59, 71, 98, 109, 110, 112, 121, 126, 127, 133, 135, 137, 147, 152, 154, 171, 172, 173, 175, 178, 192, 203, 204, 218, 226, 229, 240, 246, 250, 254, 275, 289, 346, 362, 365, 387, 402, 473, 499, 503, 521, 522, 523, 524, 525, 527, 528, 529, 544, 577, 578, 579, 611, 620, 634, 645, 672, 680, 686, 690, 706, 715, 726, 727, 728, 730, 731, 733, 740, 741, 749, 756, 762, 764, 769, 775, 780, 787, 799, 809, 869, 892, 914, 923, 953, 999, 1090, 1091, 1092, 1110, 1139], "server": [31, 109, 110, 275], "port": [31, 107, 109, 110, 113, 115, 119, 124, 275], "sqlite": [31, 109, 275], "db": [31, 110, 275], "replac": [31, 32, 107, 108, 121, 161, 162, 211, 241, 250, 251, 275, 339, 365, 472, 568, 690, 721, 775, 776, 799, 862, 892, 998, 1042, 1043, 1081, 1139], "insert": [31, 107, 108, 113, 115, 119, 121, 124, 125, 126, 181, 210, 241, 243, 275, 532, 547, 590, 690, 771, 799, 1040, 1060, 1103, 1139], "mode": [31, 32, 50, 51, 52, 56, 205, 275, 556, 663, 666, 681, 690, 711, 799, 1069, 1139, 1146], "new": [31, 32, 33, 112, 121, 141, 180, 181, 193, 201, 202, 209, 210, 230, 241, 243, 244, 250, 251, 275, 284, 339, 386, 403, 470, 567, 568, 573, 574, 591, 592, 598, 686, 690, 701, 753, 768, 771, 775, 776, 782, 787, 799, 805, 862, 912, 1010, 1022, 1080, 1081, 1086, 1087, 1104, 1106, 1112, 1117, 1139, 1146], "alreadi": [31, 32, 275, 330, 436, 607, 690, 852, 966, 1127, 1139], "adbc": [31, 109, 110, 275], "deltalak": [32, 111, 122, 129, 275], "deltat": [32, 275], "ignor": [32, 134, 135, 137, 195, 228, 275, 285, 287, 333, 365, 381, 382, 383, 433, 492, 493, 611, 613, 690, 806, 807, 855, 892, 908, 909, 910, 963, 1008, 1009, 1139], "overwrite_schema": [32, 275], "storage_opt": [32, 107, 111, 113, 115, 119, 122, 123, 124, 126, 275], "delta_write_opt": [32, 275], "delta": [32, 43, 111, 122, 227, 247, 275, 527, 529, 546, 608, 626, 667, 668, 671, 679, 690, 701, 765, 773, 799, 1035, 1037, 1058, 1128, 1139], "object": [32, 33, 34, 35, 61, 79, 97, 98, 103, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 133, 135, 137, 143, 171, 172, 173, 174, 175, 190, 191, 215, 236, 237, 275, 634, 635, 637, 638, 652, 677, 678, 701, 714, 727, 728, 730, 731, 736, 752, 799, 802, 832, 859, 954, 1059, 1115, 1139], "handl": [32, 79, 103, 107, 108, 121, 127, 275, 333, 433, 590, 690, 711, 799, 855, 963, 1103, 1139], "throw": [32, 148, 275, 314, 558, 559, 690, 708, 799, 831, 1071, 1072, 1139], "add": [32, 33, 108, 160, 172, 175, 193, 250, 251, 252, 275, 331, 505, 507, 594, 639, 643, 680, 690, 727, 730, 735, 775, 776, 777, 778, 799, 808, 913, 1139], "anyth": [32, 213, 275], "updat": [32, 275, 799], "extra": [32, 38, 52, 107, 108, 111, 112, 113, 115, 119, 121, 122, 123, 124, 160, 172, 275, 727, 799, 808, 913, 1139], "storag": [32, 107, 111, 113, 115, 119, 122, 123, 124, 126, 275], "backend": [32, 109, 110, 111, 122, 123, 275], "cloud": [32, 109, 111, 122, 123, 126, 127, 275], "configur": [32, 111, 122, 123, 141, 275], "authent": [32, 111, 122, 123, 275], "see": [32, 33, 34, 35, 41, 109, 110, 111, 112, 122, 123, 126, 130, 131, 135, 137, 152, 172, 189, 204, 205, 275, 319, 320, 321, 389, 420, 471, 541, 548, 555, 556, 567, 634, 635, 637, 638, 665, 677, 678, 686, 690, 711, 727, 799, 802, 836, 842, 843, 844, 951, 1054, 1061, 1068, 1069, 1080, 1139, 1147], "here": [32, 33, 38, 96, 98, 99, 100, 102, 109, 110, 111, 116, 117, 122, 123, 126, 133, 135, 137, 275, 473, 557, 559, 690, 799, 1072], "gc": [32, 111, 122, 123, 275], "azur": [32, 111, 122, 123, 126, 275], "keyword": [32, 59, 111, 119, 122, 152, 204, 213, 218, 219, 250, 251, 254, 275, 503, 669, 672, 690, 749, 756, 757, 775, 776, 780, 799, 1139], "argument": [32, 38, 81, 107, 111, 119, 121, 122, 152, 154, 159, 171, 172, 173, 174, 175, 176, 195, 203, 204, 205, 218, 219, 220, 226, 228, 237, 243, 246, 250, 251, 254, 275, 366, 373, 384, 404, 499, 503, 518, 521, 522, 523, 524, 525, 527, 528, 529, 544, 577, 578, 579, 611, 618, 619, 620, 623, 624, 625, 634, 641, 666, 669, 672, 677, 690, 715, 719, 726, 727, 728, 729, 730, 731, 749, 756, 757, 759, 764, 771, 775, 776, 780, 799, 808, 893, 900, 928, 1090, 1091, 1092, 1121, 1139], "while": [32, 78, 108, 111, 112, 122, 135, 137, 141, 187, 197, 241, 275, 561, 712, 745, 799, 921, 1074, 1139], "lake": [32, 111, 122, 275, 701], "typeerror": [32, 275], "unsupport": [32, 275], "arrowinvaliderror": [32, 275], "could": [32, 69, 84, 148, 275, 314, 629, 639, 643, 690, 708, 716, 799, 831, 921, 1139], "primit": [32, 275, 409, 690, 1120, 1139], "categor": [32, 62, 80, 81, 97, 130, 131, 189, 234, 235, 275, 315, 316, 331, 472, 507, 601, 690, 802, 832, 833, 834, 835, 836, 837, 853, 1017, 1122, 1139], "protocol": [32, 97, 110, 143, 275], "associ": [32, 33, 57, 59, 71, 110, 134, 215, 275], "affect": [32, 275], "follow": [32, 33, 38, 76, 107, 108, 111, 121, 122, 123, 172, 173, 190, 193, 204, 246, 275, 362, 366, 373, 503, 510, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 592, 603, 634, 635, 637, 638, 655, 677, 678, 680, 682, 683, 685, 690, 691, 692, 696, 697, 698, 727, 728, 736, 749, 799, 889, 893, 900, 1019, 1042, 1043, 1131, 1133, 1135, 1139, 1140, 1143, 1144, 1145, 1147], "unsign": [32, 65, 66, 67, 68, 275, 512, 690, 802, 938, 1021, 1139], "millisecond": [32, 172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 639, 677, 678, 690, 727, 728, 736, 799, 802, 889, 893, 900], "nanosecond": [32, 172, 173, 190, 246, 275, 362, 366, 367, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 639, 677, 678, 690, 727, 728, 736, 799, 889, 893, 894, 900], "zone": [32, 41, 275, 337, 340, 365, 584, 634, 635, 636, 637, 638, 802, 860, 863, 892, 1097], "binari": [32, 34, 109, 112, 275, 307, 309, 310, 311, 802, 825, 828, 829], "nullabl": [32, 275], "To": [32, 78, 161, 275, 335, 336, 389, 548, 555, 556, 567, 588, 634, 690, 721, 799, 857, 858, 921, 1061, 1068, 1069, 1080, 1101, 1120, 1139], "pyarrow": [32, 38, 96, 97, 101, 107, 110, 111, 113, 115, 119, 122, 127, 129, 231, 236, 237, 275, 702, 1115, 1119, 1120, 1121, 1139], "ha": [32, 33, 71, 78, 109, 112, 121, 143, 144, 146, 172, 173, 174, 175, 176, 246, 256, 275, 289, 312, 313, 330, 407, 411, 414, 431, 434, 441, 445, 458, 462, 469, 482, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 549, 562, 564, 565, 570, 576, 602, 615, 653, 686, 690, 705, 712, 727, 728, 729, 730, 731, 740, 752, 779, 782, 787, 799, 809, 830, 841, 852, 854, 921, 933, 935, 939, 961, 964, 971, 975, 988, 992, 1027, 1062, 1075, 1077, 1078, 1083, 1089, 1123, 1139], "last": [32, 147, 178, 190, 192, 205, 215, 226, 229, 240, 242, 269, 275, 299, 330, 343, 358, 363, 374, 411, 412, 419, 439, 459, 505, 543, 574, 594, 596, 634, 675, 690, 706, 736, 764, 767, 769, 770, 795, 799, 802, 818, 852, 866, 885, 890, 901, 923, 939, 940, 953, 969, 989, 1087, 1110, 1139], "filesystem": [32, 111, 122, 123, 275], "table_path": [32, 111, 122, 123, 275], "match": [32, 33, 41, 79, 90, 96, 98, 99, 100, 102, 116, 117, 130, 131, 162, 190, 213, 245, 275, 479, 526, 548, 549, 550, 553, 555, 556, 558, 559, 567, 568, 575, 582, 583, 584, 690, 722, 736, 772, 799, 802, 938, 947, 1034, 1061, 1062, 1063, 1066, 1068, 1069, 1071, 1072, 1080, 1081, 1088, 1095, 1096, 1097, 1139], "version": [32, 76, 81, 111, 112, 122, 129, 143, 144, 146, 172, 174, 175, 176, 256, 275, 289, 313, 358, 359, 365, 373, 407, 411, 414, 431, 434, 441, 445, 458, 462, 469, 519, 549, 562, 564, 565, 570, 576, 582, 584, 615, 622, 634, 636, 653, 665, 666, 677, 690, 705, 725, 727, 729, 730, 731, 740, 752, 779, 782, 799, 808, 809, 853, 885, 886, 892, 900, 933, 939, 961, 964, 971, 975, 988, 992, 1017, 1027, 1062, 1075, 1077, 1078, 1083, 1089, 1095, 1097, 1139], "old": [32, 209, 275, 753, 799], "existing_table_path": [32, 275], "store": [32, 107, 119, 123, 160, 187, 214, 275, 315, 808, 833, 913, 1139], "like": [32, 78, 97, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 172, 183, 185, 189, 236, 275, 324, 337, 423, 436, 444, 485, 510, 555, 607, 686, 690, 712, 714, 727, 752, 799, 808, 860, 952, 966, 974, 1019, 1068, 1127, 1139], "bucket": [32, 111, 122, 123, 126, 275, 366, 373, 893, 900, 924, 1139], "prefix": [32, 141, 275, 284, 311, 470, 575, 580, 590, 594, 690, 802, 829, 1088, 1093, 1103], "aws_region": [32, 122, 126, 275], "the_aws_region": [32, 275], "aws_access_key_id": [32, 111, 122, 126, 275], "the_aws_access_key_id": [32, 111, 122, 123, 275], "aws_secret_access_kei": [32, 111, 122, 126, 275], "the_aws_secret_access_kei": [32, 111, 122, 123, 275], "pa": [32, 96, 127, 275], "workbook": [33, 112, 275], "worksheet": [33, 112, 118, 275], "posit": [33, 154, 159, 171, 174, 203, 218, 219, 220, 226, 243, 250, 251, 254, 275, 381, 382, 383, 384, 499, 507, 544, 557, 566, 618, 619, 620, 623, 624, 625, 641, 669, 672, 690, 715, 719, 726, 729, 756, 757, 759, 764, 771, 775, 776, 780, 799, 908, 909, 910, 1017, 1070, 1079, 1139], "tupl": [33, 110, 112, 118, 144, 187, 193, 213, 214, 215, 221, 253, 275, 514, 690, 750, 762, 799, 802, 1023, 1139], "a1": [33, 72, 74, 275], "table_styl": [33, 275], "column_format": [33, 275], "columnformatdict": [33, 275], "dtype_format": [33, 275], "oneormoredatatyp": [33, 133, 275, 947, 1139], "conditional_format": [33, 275], "conditionalformatdict": [33, 275], "header_format": [33, 275], "column_tot": [33, 275], "columntotalsdefinit": [33, 275], "column_width": [33, 275], "columnwidthsdefinit": [33, 275], "row_tot": [33, 275], "rowtotalsdefinit": [33, 275], "row_height": [33, 275], "sparklin": [33, 275], "sequenc": [33, 63, 71, 77, 78, 96, 98, 99, 100, 102, 107, 108, 112, 116, 117, 118, 121, 133, 134, 135, 147, 153, 159, 160, 189, 190, 197, 201, 203, 204, 205, 215, 226, 234, 240, 244, 245, 246, 275, 331, 409, 461, 469, 471, 503, 507, 544, 592, 615, 620, 629, 630, 643, 645, 653, 654, 655, 665, 670, 690, 706, 719, 735, 736, 745, 749, 764, 769, 772, 799, 808, 853, 854, 856, 913, 991, 1017, 1043, 1106, 1139], "formula": [33, 275, 378, 690, 906, 1139], "autofilt": [33, 275], "autofit": [33, 275], "hidden_column": [33, 275], "selectortyp": [33, 275, 802], "hide_gridlin": [33, 275], "sheet_zoom": [33, 275], "freeze_pan": [33, 275], "excel": [33, 112, 275], "open": [33, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 126, 275, 714, 752, 799], "xlsxwriter": [33, 129, 275], "close": [33, 109, 172, 173, 175, 176, 275, 331, 404, 466, 507, 518, 521, 522, 523, 524, 525, 527, 528, 529, 541, 634, 635, 637, 638, 677, 678, 690, 727, 728, 730, 731, 799, 853, 928, 1017, 1054, 1139], "xlsx": [33, 112, 275], "work": [33, 42, 97, 108, 210, 219, 251, 275, 285, 287, 289, 305, 318, 319, 320, 321, 384, 393, 436, 463, 473, 499, 517, 560, 561, 604, 690, 757, 776, 799, 802, 806, 807, 824, 839, 842, 843, 844, 919, 966, 993, 1073, 1074, 1124, 1139], "directori": [33, 38, 119, 126, 275], "sheet1": [33, 275], "medium": [33, 275], "kei": [33, 71, 76, 79, 123, 126, 172, 187, 189, 190, 198, 203, 205, 209, 212, 214, 215, 245, 275, 473, 672, 690, 720, 727, 735, 736, 746, 753, 754, 772, 799], "first_column": [33, 275], "last_column": [33, 275], "banded_column": [33, 275], "banded_row": [33, 275], "sheet": [33, 112, 118, 275], "chart": [33, 275, 750, 799], "subsequ": [33, 61, 208, 237, 275, 461, 680, 718, 799], "colnam": [33, 121, 135, 157, 275, 717, 799], "given": [33, 56, 57, 71, 96, 98, 99, 100, 102, 107, 108, 109, 110, 112, 116, 117, 118, 121, 126, 132, 133, 135, 136, 137, 138, 144, 147, 158, 159, 161, 172, 173, 175, 176, 186, 193, 203, 204, 213, 215, 222, 223, 226, 240, 245, 275, 337, 340, 369, 371, 372, 378, 404, 430, 454, 461, 464, 473, 499, 503, 510, 513, 514, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 556, 557, 582, 584, 592, 615, 641, 653, 654, 655, 666, 667, 668, 690, 706, 719, 727, 728, 730, 731, 740, 741, 749, 760, 761, 764, 769, 772, 782, 787, 799, 802, 809, 860, 863, 896, 898, 899, 906, 907, 924, 928, 950, 960, 984, 991, 994, 997, 999, 1010, 1019, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1046, 1047, 1069, 1070, 1095, 1097, 1126, 1130, 1139, 1146, 1147], "dd": [33, 275], "mm": [33, 275], "yyyi": [33, 275], "00": [33, 135, 172, 190, 246, 275, 337, 338, 340, 344, 345, 347, 348, 351, 352, 354, 355, 356, 358, 359, 361, 362, 365, 366, 367, 368, 369, 372, 373, 376, 521, 522, 524, 527, 528, 529, 582, 584, 587, 637, 639, 677, 678, 690, 727, 736, 799, 802, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 876, 877, 878, 880, 882, 883, 885, 886, 887, 888, 889, 892, 893, 895, 897, 898, 900, 903, 1095, 1097, 1100], "overridden": [33, 96, 98, 100, 102, 116, 117, 139, 275, 799], "basi": [33, 135, 275], "param": [33, 96, 98, 99, 100, 102, 107, 108, 116, 117, 121, 134, 135, 137, 213, 275, 799], "It": [33, 62, 81, 198, 204, 261, 275, 313, 481, 517, 686, 690, 740, 741, 746, 787, 799, 1042, 1043, 1139], "group": [33, 38, 52, 56, 108, 171, 172, 173, 174, 175, 176, 188, 201, 203, 205, 215, 244, 246, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275, 283, 330, 386, 392, 436, 473, 481, 483, 499, 510, 517, 518, 543, 544, 548, 555, 556, 557, 567, 597, 607, 655, 690, 726, 727, 728, 729, 730, 731, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 802, 852, 966, 1026, 1061, 1068, 1069, 1070, 1080, 1127, 1139], "float_dtyp": [33, 275], "simplifi": [33, 50, 51, 52, 77, 78, 275, 711, 712, 718, 720, 750, 762, 799], "uniform": [33, 275, 507, 690, 1017, 1139], "condit": [33, 156, 163, 213, 275, 553, 575, 621, 643, 680, 716, 723, 799], "suppli": [33, 96, 98, 99, 100, 102, 109, 116, 117, 213, 275, 503, 690, 799], "typenam": [33, 275], "3_color_scal": [33, 275], "data_bar": [33, 275], "make": [33, 63, 79, 96, 101, 107, 108, 113, 115, 119, 124, 198, 201, 208, 246, 275, 382, 383, 472, 499, 513, 573, 590, 690, 746, 799, 909, 910, 924, 998, 1086, 1103, 1139, 1147], "icon": [33, 275], "multipl": [33, 59, 77, 78, 79, 107, 108, 112, 118, 121, 124, 125, 126, 133, 137, 147, 154, 158, 160, 163, 171, 172, 180, 188, 203, 205, 215, 218, 220, 226, 240, 245, 250, 254, 275, 460, 478, 482, 489, 490, 499, 514, 517, 521, 522, 523, 524, 525, 527, 528, 529, 544, 620, 629, 630, 643, 653, 654, 656, 660, 665, 670, 673, 680, 686, 690, 706, 711, 712, 715, 723, 726, 727, 756, 759, 764, 769, 772, 775, 780, 787, 799, 808, 907, 913, 990, 1004, 1023, 1139], "singl": [33, 57, 71, 78, 79, 107, 108, 109, 110, 112, 119, 121, 126, 133, 148, 154, 155, 156, 160, 168, 186, 189, 193, 203, 213, 215, 226, 275, 289, 362, 390, 431, 432, 460, 471, 473, 511, 514, 544, 547, 609, 615, 620, 624, 625, 650, 654, 655, 670, 678, 690, 708, 711, 715, 716, 735, 764, 799, 808, 889, 913, 961, 962, 990, 1020, 1023, 1060, 1115, 1139], "across": [33, 71, 275, 612, 614, 632, 657, 661, 674], "effect": [33, 166, 172, 175, 236, 275, 345, 473, 634, 635, 690, 727, 730, 778, 799, 860, 868], "heatmap": [33, 275], "min": [33, 38, 52, 153, 162, 173, 205, 275, 319, 321, 327, 389, 499, 510, 518, 524, 661, 669, 690, 722, 728, 799, 842, 844, 849, 854, 916, 1019, 1032, 1139, 1147], "entir": [33, 275, 711, 799], "final": [33, 71, 126, 275, 381, 382, 383, 690, 720, 799, 908, 909, 910, 1139], "made": [33, 109, 275, 1120, 1139], "up": [33, 63, 110, 187, 190, 214, 215, 233, 275, 289, 318, 473, 590, 690, 735, 736, 741, 799, 802, 839, 1103, 1139], "abov": [33, 205, 275, 680], "order": [33, 50, 51, 52, 56, 58, 71, 77, 99, 109, 128, 130, 147, 156, 163, 171, 172, 173, 174, 175, 176, 189, 203, 204, 205, 216, 220, 226, 236, 240, 242, 246, 275, 299, 305, 316, 335, 336, 390, 435, 456, 463, 510, 518, 522, 523, 524, 525, 527, 529, 531, 532, 533, 543, 544, 592, 604, 605, 607, 620, 690, 700, 706, 716, 723, 726, 727, 728, 729, 730, 731, 735, 745, 759, 764, 769, 770, 799, 818, 824, 835, 837, 857, 858, 917, 946, 965, 986, 993, 1019, 1024, 1039, 1040, 1044, 1056, 1106, 1124, 1125, 1127, 1139, 1147], "than": [33, 50, 51, 52, 95, 100, 102, 107, 108, 109, 112, 118, 121, 127, 135, 137, 149, 171, 174, 187, 190, 193, 203, 213, 214, 216, 244, 261, 275, 397, 398, 422, 468, 473, 484, 507, 517, 531, 541, 560, 563, 569, 574, 590, 626, 634, 655, 690, 711, 726, 729, 736, 787, 799, 999, 1017, 1026, 1039, 1054, 1073, 1076, 1082, 1087, 1103, 1139, 1147], "bold": [33, 275], "font_color": [33, 275], "702963": [33, 275], "total": [33, 158, 275, 907, 1139], "export": [33, 187, 188, 214, 215, 233, 236, 275, 686], "sum": [33, 56, 158, 166, 171, 172, 173, 186, 205, 254, 275, 328, 329, 378, 390, 461, 473, 481, 483, 484, 485, 518, 521, 524, 528, 609, 611, 629, 631, 632, 643, 655, 665, 674, 690, 711, 712, 714, 718, 720, 726, 727, 728, 748, 750, 758, 762, 780, 799, 802, 850, 851, 906, 907, 1029, 1030, 1032, 1035, 1036, 1037, 1139], "must": [33, 97, 98, 111, 122, 123, 127, 153, 159, 172, 173, 175, 176, 190, 198, 213, 275, 331, 461, 471, 507, 518, 521, 522, 523, 524, 525, 527, 528, 529, 680, 690, 719, 727, 728, 730, 731, 736, 740, 741, 746, 799, 853, 854, 1017, 1139], "funcnam": [33, 275], "averag": [33, 275, 381, 382, 383, 510, 690, 908, 909, 910, 1019, 1139], "count_num": [33, 275], "count": [33, 56, 107, 108, 113, 115, 119, 121, 124, 125, 126, 127, 145, 146, 153, 172, 173, 190, 201, 202, 205, 241, 245, 246, 252, 261, 266, 275, 290, 325, 362, 423, 431, 432, 473, 481, 483, 491, 497, 518, 521, 522, 523, 524, 525, 527, 528, 529, 549, 550, 605, 607, 616, 662, 690, 704, 705, 727, 728, 736, 748, 772, 778, 787, 792, 799, 854, 889, 924, 961, 962, 1006, 1012, 1062, 1063, 1125, 1127, 1139], "std_dev": [33, 275], "var": [33, 138, 275, 529, 690, 799, 1139], "pixel": [33, 275], "unit": [33, 41, 43, 135, 137, 158, 275, 338, 339, 346, 371, 376, 467, 482, 582, 584, 606, 634, 635, 636, 637, 638, 645, 690, 750, 799, 802, 861, 862, 869, 898, 903, 907, 997, 1095, 1097, 1126, 1139, 1147], "hand": [33, 107, 108, 121, 275, 450, 451, 452, 453, 980, 981, 982, 983], "side": [33, 172, 173, 175, 176, 275, 404, 450, 451, 452, 453, 518, 521, 522, 523, 524, 525, 527, 528, 529, 532, 634, 635, 637, 638, 677, 678, 690, 727, 728, 730, 731, 799, 928, 980, 981, 982, 983, 1040, 1139], "call": [33, 60, 62, 81, 108, 109, 135, 137, 141, 171, 172, 173, 175, 191, 193, 274, 275, 289, 326, 329, 419, 473, 505, 537, 594, 686, 690, 702, 726, 727, 728, 730, 731, 798, 799, 802, 809, 999, 1050, 1139], "ad": [33, 99, 112, 172, 175, 241, 250, 251, 275, 288, 387, 629, 630, 690, 727, 730, 775, 776, 799, 853, 914, 1017, 1139], "wise": [33, 71, 109, 166, 275, 291, 292, 293, 294, 295, 296, 322, 323, 385, 465, 538, 539, 540, 599, 600, 629, 630, 643, 665, 690, 810, 811, 812, 813, 814, 815, 846, 847, 911, 995, 996, 1051, 1052, 1053, 1113, 1114, 1139], "particip": [33, 275], "distinct": [33, 137, 203, 275, 305, 407, 408, 411, 412, 463, 510, 639, 690, 824, 933, 934, 939, 940, 993, 1019, 1139, 1147], "referenc": [33, 275, 592], "differ": [33, 107, 127, 130, 160, 172, 173, 187, 214, 215, 233, 241, 275, 333, 343, 362, 363, 365, 374, 380, 433, 450, 452, 458, 472, 473, 492, 493, 495, 582, 605, 642, 645, 651, 690, 718, 727, 728, 799, 802, 808, 836, 855, 866, 889, 890, 892, 901, 913, 963, 980, 982, 988, 999, 1008, 1009, 1041, 1095, 1139], "row_index": [33, 275], "height": [33, 156, 275], "provid": [33, 59, 107, 108, 110, 111, 121, 122, 123, 126, 135, 137, 186, 275, 308, 309, 384, 461, 471, 473, 551, 552, 555, 558, 559, 645, 672, 690, 701, 826, 827, 924, 950, 999, 1064, 1065, 1068, 1071, 1072, 1139, 1146, 1147], "intersect": [33, 275, 451, 802, 981], "bodi": [33, 275], "start": [33, 106, 107, 108, 109, 110, 113, 115, 118, 119, 121, 124, 125, 126, 139, 171, 172, 174, 175, 191, 225, 246, 252, 275, 307, 310, 311, 343, 357, 363, 366, 373, 374, 384, 404, 455, 521, 522, 524, 527, 528, 529, 542, 548, 553, 556, 571, 575, 617, 629, 634, 635, 637, 638, 641, 643, 649, 650, 677, 678, 680, 690, 726, 727, 729, 730, 750, 763, 778, 799, 802, 829, 861, 863, 866, 869, 870, 877, 879, 882, 884, 887, 890, 893, 898, 900, 901, 928, 985, 1055, 1066, 1069, 1084, 1088, 1139, 1147], "zero": [33, 96, 97, 106, 107, 108, 113, 115, 119, 134, 143, 162, 187, 213, 231, 236, 237, 275, 389, 461, 466, 532, 541, 590, 603, 690, 709, 722, 799, 841, 916, 991, 1054, 1103, 1115, 1120, 1121, 1139], "unless": [33, 71, 98, 237, 275, 577, 578, 666, 799, 1090, 1121, 1129, 1139], "marker": [33, 275], "compliant": [33, 275], "case": [33, 62, 71, 78, 96, 98, 99, 100, 102, 109, 116, 117, 126, 139, 144, 160, 172, 173, 175, 176, 187, 193, 214, 215, 233, 275, 337, 470, 471, 481, 482, 518, 548, 556, 567, 690, 712, 727, 728, 730, 731, 799, 802, 808, 860, 913, 1061, 1069, 1080, 1139], "three": [33, 239, 275, 331, 461, 507, 532, 690, 853, 991, 1017, 1139], "avail": [33, 105, 109, 110, 111, 122, 123, 133, 141, 205, 274, 275, 510, 682, 683, 685, 689, 690, 691, 692, 695, 696, 697, 698, 701, 702, 720, 798, 799, 802, 1019, 1131, 1133, 1135, 1139, 1140, 1143, 1144, 1145], "insert_befor": [33, 275], "insert_aft": [33, 275], "respect": [33, 275, 802], "direct": [33, 110, 119, 123, 126, 244, 275], "far": [33, 275], "strongli": [33, 139, 193, 213, 261, 275, 473, 690, 999, 1139], "advis": [33, 62, 81, 191, 275], "structur": [33, 87, 91, 93, 160, 204, 215, 236, 275, 503, 690, 749, 799, 808, 913, 1139], "wherev": [33, 193, 261, 275, 473, 690, 999, 1139], "possibl": [33, 107, 147, 171, 174, 187, 193, 214, 240, 242, 261, 275, 467, 473, 481, 520, 574, 606, 690, 706, 726, 729, 764, 769, 770, 799, 999, 1028, 1087, 1139], "simpl": [33, 137, 201, 275], "colx": [33, 61, 275, 802, 1147], "coli": [33, 275, 802, 1147], "after": [33, 61, 79, 99, 106, 107, 108, 113, 115, 119, 121, 124, 125, 126, 160, 243, 274, 275, 384, 472, 499, 510, 590, 690, 771, 799, 808, 913, 998, 1019, 1103, 1139], "befor": [33, 107, 109, 112, 121, 127, 130, 131, 139, 141, 160, 172, 175, 190, 243, 275, 328, 329, 330, 472, 499, 500, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 590, 595, 667, 668, 690, 727, 730, 733, 736, 771, 799, 808, 850, 851, 852, 913, 998, 1013, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1103, 1109, 1139], "most": [33, 58, 96, 107, 108, 110, 121, 275, 482, 489, 500, 574, 690, 1004, 1013, 1087, 1139, 1146], "mandatori": [33, 275], "return_dtyp": [33, 144, 193, 275, 289, 469, 471, 472, 473, 615, 653, 654, 655, 690, 809, 998, 999, 1139], "latter": [33, 160, 275, 808, 913, 1139], "appropri": [33, 127, 236, 275, 510, 690, 1019, 1139], "pure": [33, 275, 1120, 1139], "actual": [33, 99, 135, 137, 215, 275, 1049, 1139], "indic": [33, 106, 107, 108, 109, 113, 115, 119, 121, 132, 133, 137, 172, 173, 175, 176, 190, 215, 220, 234, 246, 275, 300, 362, 366, 373, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 460, 477, 480, 518, 521, 522, 523, 524, 525, 527, 528, 529, 532, 538, 597, 620, 621, 634, 635, 637, 638, 677, 678, 690, 727, 728, 730, 731, 736, 759, 799, 802, 889, 893, 900, 932, 933, 934, 937, 939, 940, 941, 942, 943, 944, 990, 1040, 1051, 1111, 1116, 1139, 1147], "calcul": [33, 71, 172, 227, 247, 275, 333, 381, 382, 383, 420, 433, 450, 467, 526, 541, 546, 606, 608, 626, 667, 668, 671, 679, 690, 727, 765, 773, 799, 855, 908, 909, 910, 951, 963, 980, 1034, 1054, 1058, 1128, 1139], "individu": [33, 52, 135, 141, 173, 236, 275, 473, 556, 690, 711, 728, 799, 840, 1069, 1139], "gridlin": [33, 275], "zoom": [33, 275], "level": [33, 38, 52, 121, 124, 125, 126, 135, 166, 193, 201, 275, 390, 690, 732, 739, 799], "freez": [33, 275], "pane": [33, 275], "top": [33, 147, 240, 275, 706, 769, 799], "index": [33, 97, 101, 104, 129, 143, 164, 172, 173, 175, 176, 181, 186, 187, 190, 205, 211, 213, 214, 225, 236, 238, 246, 252, 275, 283, 297, 298, 299, 301, 362, 427, 428, 439, 455, 460, 461, 518, 521, 522, 523, 524, 525, 527, 528, 529, 532, 542, 555, 571, 597, 690, 727, 728, 730, 731, 736, 763, 778, 799, 816, 817, 818, 819, 820, 889, 950, 957, 958, 969, 985, 990, 991, 1010, 1040, 1043, 1055, 1068, 1084, 1111, 1139], "thu": [33, 160, 275, 626, 808, 913, 1139], "altern": [33, 275, 686, 1120, 1139], "a2": [33, 72, 74, 275], "occur": [33, 77, 78, 275, 431, 432, 489, 510, 690, 711, 712, 718, 720, 750, 762, 799, 961, 962, 1004, 1019, 1139], "equival": [33, 96, 98, 99, 100, 102, 111, 116, 117, 172, 186, 201, 275, 282, 286, 379, 380, 394, 397, 398, 422, 468, 488, 490, 494, 495, 498, 504, 561, 593, 603, 610, 690, 727, 799, 950, 1074, 1099, 1101, 1102, 1139], "top_row": [33, 275], "top_col": [33, 275], "base": [33, 39, 156, 163, 172, 173, 175, 176, 275, 337, 345, 378, 381, 382, 383, 464, 465, 507, 518, 566, 690, 716, 723, 727, 728, 730, 731, 799, 802, 860, 868, 906, 908, 909, 910, 924, 994, 995, 1017, 1079, 1130, 1139, 1147], "scroll": [33, 275], "region": [33, 123, 275], "initit": [33, 275], "5th": [33, 275], "properti": [33, 143, 151, 157, 165, 179, 217, 221, 249, 275, 713, 717, 755, 774, 799, 802, 1147], "readthedoc": [33, 275], "io": [33, 123, 275, 714, 758, 799], "html": [33, 34, 35, 97, 109, 143, 152, 275], "definit": [33, 133, 275, 420, 690, 951, 1139], "take": [33, 112, 118, 135, 141, 166, 172, 175, 198, 204, 205, 230, 236, 275, 362, 544, 598, 634, 635, 640, 642, 651, 690, 727, 730, 746, 768, 799, 889, 1112, 1130, 1139], "care": [33, 275, 289, 473, 533, 690, 1044, 1139], "rel": [33, 110, 111, 122, 123, 130, 131, 275, 362, 381, 382, 383, 523, 525, 527, 529, 690, 889, 908, 909, 910, 1139], "working_with_conditional_format": [33, 275], "similarli": [33, 99, 172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "well": [33, 107, 108, 109, 121, 205, 275, 404, 690, 928, 1139], "adjac": [33, 275], "two": [33, 61, 62, 80, 81, 98, 100, 102, 110, 166, 197, 198, 205, 239, 255, 261, 275, 283, 334, 339, 461, 507, 543, 597, 618, 619, 626, 628, 667, 668, 690, 745, 746, 781, 787, 799, 856, 862, 991, 1017, 1139], "help": [33, 130, 131, 275, 720, 799], "where": [33, 56, 71, 109, 110, 134, 156, 160, 172, 187, 197, 214, 227, 247, 275, 300, 375, 378, 380, 495, 513, 532, 541, 544, 546, 608, 621, 626, 667, 668, 671, 679, 680, 690, 716, 727, 745, 765, 773, 799, 808, 819, 902, 906, 913, 1040, 1054, 1058, 1128, 1130, 1139, 1146], "appear": [33, 99, 130, 275, 605, 690, 1125, 1139], "working_with_sparklin": [33, 275], "inject": [33, 71, 275], "locat": [33, 160, 211, 238, 243, 275, 532, 690, 771, 799, 808, 913, 1040, 1043, 1111, 1139], "syntax": [33, 193, 201, 275, 548, 555, 556, 567, 686, 762, 799, 1061, 1068, 1069, 1080, 1139], "ensur": [33, 110, 134, 135, 137, 171, 174, 203, 213, 275, 404, 690, 726, 729, 740, 741, 799, 802, 1120, 1139], "correctli": [33, 112, 275], "microsoft": [33, 275], "com": [33, 110, 275, 381, 382, 383, 555, 556, 557, 690, 908, 909, 910, 1068, 1069, 1070, 1139], "u": [33, 41, 43, 59, 103, 126, 275, 338, 339, 346, 371, 376, 582, 584, 634, 635, 636, 637, 638, 639, 645, 802, 861, 862, 869, 898, 903, 1095, 1097], "offic": [33, 275], "f5ed2452": [33, 275], "2337": [33, 275], "4f71": [33, 275], "bed3": [33, 275], "c8ae6d2b276": [33, 275], "instanti": [33, 109, 218, 250, 275, 756, 775, 799], "basic": [33, 275, 1147], "random": [33, 34, 128, 133, 135, 137, 177, 216, 275, 399, 510, 531, 537, 607, 690, 701, 922, 1019, 1039, 1050, 1127, 1139], "date": [33, 41, 71, 107, 108, 110, 112, 118, 121, 127, 135, 148, 153, 170, 172, 173, 175, 176, 188, 190, 246, 275, 338, 339, 340, 343, 344, 346, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 430, 518, 521, 522, 523, 524, 525, 527, 528, 529, 582, 583, 601, 634, 635, 637, 638, 645, 652, 676, 677, 678, 690, 708, 727, 728, 730, 731, 736, 799, 802, 861, 862, 863, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 904, 947, 960, 961, 962, 1008, 1009, 1043, 1095, 1096, 1122, 1139], "dtm": [33, 275, 339, 802, 862], "2023": [33, 103, 129, 188, 275, 339, 639, 652, 802, 862], "num": [33, 239, 275, 404, 590, 690, 928, 1139], "500": [33, 187, 245, 275, 720, 772, 799, 877, 879, 887, 1029, 1030, 1032, 1139], "val": [33, 212, 275, 316, 473, 503, 601, 680, 690, 754, 799, 835], "10_000": [33, 275], "20_000": [33, 275], "30_000": [33, 275], "increas": [33, 71, 107, 119, 275, 330, 690, 852, 1139], "b4": [33, 275], "light": [33, 275], "twice": [33, 112, 275], "titl": [33, 56, 275], "explicit": [33, 109, 121, 133, 275, 665], "integr": [33, 275, 1147], "multi_fram": [33, 275], "wb": [33, 275], "coordin": [33, 275], "advanc": [33, 112, 205, 275, 461, 991, 1147], "min_color": [33, 275], "76933c": [33, 275], "mid_color": [33, 275], "c4d79b": [33, 275], "max_color": [33, 275], "ebf1d": [33, 275], "data_bar_2010": [33, 275], "bar_color": [33, 275], "9bbb59": [33, 275], "bar_negative_color_sam": [33, 275], "bar_negative_border_color_sam": [33, 275], "000": [33, 275, 1147], "white": [33, 275], "w": [33, 58, 59, 172, 175, 215, 275, 550, 555, 557, 612, 614, 727, 730, 799, 802, 1063, 1068, 1070, 1091], "get_worksheet_by_nam": [33, 275], "fmt_titl": [33, 275], "add_format": [33, 275], "4f6228": [33, 275], "font_siz": [33, 275], "12": [33, 71, 103, 134, 135, 146, 172, 173, 190, 246, 275, 284, 328, 337, 339, 343, 347, 355, 357, 358, 359, 362, 363, 364, 366, 373, 374, 375, 500, 509, 518, 528, 536, 550, 585, 622, 630, 633, 634, 635, 636, 637, 638, 654, 677, 678, 690, 705, 725, 727, 728, 732, 736, 739, 752, 762, 767, 779, 799, 802, 860, 862, 884, 893, 900, 999, 1038, 1063, 1098, 1139, 1147], "ital": [33, 275], "customis": [33, 275], "trend": [33, 275], "win_loss": [33, 275], "subtl": [33, 275], "tone": [33, 275], "hidden": [33, 275], "id": [33, 79, 123, 241, 261, 275, 517, 567, 568, 605, 690, 787, 1026, 1125, 1139, 1147], "q1": [33, 275], "55": [33, 73, 275], "20": [33, 135, 160, 180, 181, 198, 204, 206, 210, 211, 275, 297, 298, 299, 333, 366, 373, 399, 403, 503, 521, 522, 524, 645, 652, 677, 690, 746, 749, 799, 802, 855, 900, 1139], "35": [33, 275, 333, 690, 855, 1139], "q2": [33, 275], "30": [33, 160, 172, 180, 204, 210, 211, 232, 250, 275, 297, 298, 299, 333, 339, 344, 347, 355, 357, 358, 364, 365, 366, 373, 374, 399, 536, 652, 677, 690, 727, 749, 775, 799, 802, 855, 862, 867, 885, 892, 893, 900, 1139, 1147], "15": [33, 129, 134, 172, 173, 181, 193, 275, 330, 333, 347, 355, 359, 366, 373, 503, 518, 528, 630, 666, 677, 690, 727, 728, 799, 852, 855, 893, 900, 1139], "60": [33, 160, 275, 367, 368, 528, 582, 690, 890, 894, 895, 1095], "q3": [33, 275], "40": [33, 160, 204, 275, 366, 373, 399, 585, 690, 749, 799, 873, 900, 1098], "80": [33, 275], "q4": [33, 275], "75": [33, 153, 275, 286, 498, 507, 521, 522, 523, 524, 527, 528, 529, 655, 690, 854, 924, 1017, 1139, 1147], "account": [33, 103, 110, 123, 275, 362, 381, 382, 383, 690, 889, 908, 909, 910, 1139], "flavour": [33, 109, 275], "integer_dtyp": [33, 218, 275, 756, 799, 802], "0_": [33, 275], "just": [33, 121, 197, 275, 745, 799], "unifi": [33, 275, 802], "multi": [33, 107, 108, 275, 384, 555, 690, 1068], "2_color_scal": [33, 275], "95b3d7": [33, 275], "ffffff": [33, 275], "standardis": [33, 275], "z": [33, 58, 79, 103, 133, 135, 158, 183, 185, 189, 197, 214, 215, 244, 275, 282, 284, 286, 316, 399, 429, 470, 473, 498, 505, 513, 556, 582, 584, 594, 612, 614, 632, 657, 661, 666, 674, 690, 735, 745, 763, 799, 802, 835, 916, 1069, 1095, 1097, 1139, 1146], "score": [33, 275], "conjunct": [33, 80, 112, 118, 275], "a123": [33, 275], "b345": [33, 275], "c567": [33, 275], "d789": [33, 275], "e101": [33, 275], "45": [33, 129, 173, 275, 339, 347, 355, 366, 373, 518, 528, 550, 556, 618, 619, 652, 677, 690, 728, 799, 802, 862, 893, 900, 1063, 1069, 1147], "85": [33, 275, 1147], "font": [33, 275], "consola": [33, 275], "standard": [33, 227, 236, 275, 350, 382, 527, 541, 546, 559, 671, 686, 690, 765, 799, 873, 909, 1054, 1058, 1072, 1139, 1147], "stdev": [33, 275], "ipccompress": [34, 35, 275], "arrow": [34, 35, 51, 82, 96, 97, 109, 110, 113, 115, 124, 187, 214, 215, 231, 233, 275, 799, 1115, 1120, 1139], "ipc": [34, 35, 51, 113, 114, 115, 124, 127, 275, 701, 799], "feather": [34, 113, 124, 275, 701], "access": [34, 72, 73, 74, 75, 123, 126, 143, 187, 213, 214, 275, 472, 557, 690, 777, 799, 1070, 1147], "doc": [34, 35, 110, 152, 275], "python": [34, 35, 55, 97, 107, 108, 109, 129, 143, 187, 193, 214, 215, 233, 261, 275, 289, 339, 469, 471, 473, 557, 634, 635, 637, 638, 677, 678, 680, 690, 695, 787, 809, 862, 874, 875, 876, 881, 999, 1070, 1119, 1139], "lz4": [34, 35, 38, 51, 52, 275, 799], "zstd": [34, 35, 38, 51, 52, 275, 799], "batch": [35, 105, 108, 109, 115, 125, 127, 275, 711, 740, 741, 799], "pretti": [36, 275], "row_ori": [36, 275], "iobas": [36, 37, 116, 117, 275, 486, 714, 752, 758, 779, 799], "serial": [36, 37, 275, 714, 779, 799], "represent": [36, 37, 235, 275, 316, 343, 347, 350, 351, 353, 355, 357, 360, 363, 364, 367, 374, 375, 377, 601, 690, 718, 738, 799, 835, 836, 866, 870, 872, 873, 877, 879, 882, 884, 887, 890, 891, 894, 901, 902, 904, 1118, 1122, 1139], "orient": [36, 72, 74, 100, 102, 275, 799], "slower": [36, 100, 102, 112, 171, 174, 193, 203, 246, 261, 275, 473, 655, 690, 726, 729, 787, 799, 999, 1139], "common": [36, 71, 77, 78, 79, 275, 470, 690, 695, 711, 712, 718, 720, 750, 762, 799], "write_ndjson": [36, 275], "bit_set": [36, 275, 758, 799], "newlin": [37, 117, 125, 275], "delimit": [37, 50, 117, 125, 205, 234, 275, 547, 799, 1060, 1116, 1139], "parquetcompress": [38, 275], "compression_level": [38, 52, 275, 799], "statist": [38, 52, 107, 108, 119, 126, 153, 275, 382, 383, 420, 521, 522, 523, 524, 525, 526, 527, 528, 529, 541, 690, 799, 854, 909, 910, 951, 1034, 1054, 1139], "row_group_s": [38, 52, 275, 799], "use_pyarrow": [38, 107, 113, 115, 119, 275, 1119, 1120, 1139], "pyarrow_opt": [38, 111, 119, 122, 275], "parquet": [38, 52, 119, 120, 126, 275, 701, 799], "gzip": [38, 52, 275, 799], "lzo": [38, 52, 275, 799], "brotli": [38, 52, 275, 799], "choos": [38, 51, 52, 172, 205, 275, 727, 799], "good": [38, 51, 52, 187, 275, 799], "perform": [38, 51, 52, 71, 87, 97, 107, 108, 109, 113, 119, 121, 124, 125, 126, 143, 147, 171, 172, 173, 174, 175, 176, 190, 193, 208, 215, 240, 261, 275, 289, 473, 499, 518, 560, 561, 582, 583, 584, 690, 706, 727, 728, 730, 731, 736, 764, 769, 778, 799, 999, 1073, 1074, 1095, 1096, 1097, 1139], "fast": [38, 51, 52, 136, 138, 275, 387, 533, 690, 799, 914, 1044, 1139, 1147], "decompress": [38, 51, 52, 275, 799], "backward": [38, 52, 162, 190, 275, 306, 359, 389, 690, 722, 736, 799, 886, 916, 1139], "guarante": [38, 52, 97, 107, 108, 242, 275, 720, 770, 799, 921, 1139], "deal": [38, 52, 187, 275, 285, 287, 365, 366, 373, 510, 582, 584, 611, 613, 636, 690, 799, 806, 807, 892, 893, 900, 1019, 1095, 1097, 1139], "older": [38, 52, 275, 799], "reader": [38, 52, 105, 107, 108, 113, 115, 119, 275, 702, 799], "higher": [38, 52, 207, 267, 275, 508, 525, 664, 690, 751, 793, 799, 1018, 1033, 1139], "mean": [38, 52, 107, 108, 113, 119, 121, 153, 162, 171, 172, 173, 190, 205, 246, 254, 275, 362, 366, 373, 386, 389, 518, 521, 522, 523, 524, 525, 527, 528, 529, 541, 555, 622, 634, 635, 637, 638, 639, 677, 678, 680, 690, 722, 726, 727, 728, 736, 740, 741, 780, 799, 854, 889, 893, 900, 912, 916, 921, 1030, 1054, 1068, 1139], "smaller": [38, 52, 158, 275, 720, 799, 907, 1139], "disk": [38, 50, 51, 52, 113, 275, 762, 799], "11": [38, 52, 97, 129, 135, 173, 275, 284, 358, 359, 362, 366, 373, 403, 500, 510, 518, 520, 528, 542, 590, 610, 673, 678, 690, 711, 712, 728, 732, 739, 750, 767, 799, 802, 889, 893, 900, 999, 1028, 1139], "22": [38, 52, 129, 134, 275, 343, 363, 366, 373, 375, 376, 520, 521, 522, 524, 527, 528, 529, 582, 690, 799, 802, 893, 900, 903, 1028, 1095, 1139, 1147], "comput": [38, 52, 77, 79, 84, 158, 171, 190, 237, 242, 254, 267, 275, 281, 291, 292, 293, 294, 295, 296, 302, 303, 304, 317, 322, 323, 325, 326, 327, 328, 329, 334, 378, 385, 420, 434, 441, 446, 447, 448, 450, 451, 452, 453, 458, 462, 464, 465, 466, 489, 499, 500, 506, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 538, 539, 540, 541, 545, 599, 600, 607, 612, 614, 618, 619, 620, 626, 628, 640, 667, 668, 680, 690, 711, 726, 733, 735, 736, 770, 777, 780, 793, 799, 804, 810, 811, 812, 813, 814, 815, 821, 822, 823, 838, 846, 847, 848, 849, 850, 851, 856, 906, 907, 911, 951, 964, 971, 976, 977, 978, 980, 981, 982, 983, 988, 992, 994, 995, 996, 1004, 1013, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1051, 1052, 1053, 1054, 1057, 1113, 1114, 1121, 1127, 1139], "512": [38, 109, 275, 504, 690, 1013, 1139], "implement": [38, 97, 109, 143, 193, 261, 275, 419, 473, 505, 594, 655, 690, 787, 999, 1042, 1043, 1139], "v": [38, 58, 59, 158, 275, 532, 690, 1040, 1139], "At": [38, 275], "moment": [38, 152, 275, 420, 541, 690, 951, 1054, 1139], "write_t": [38, 275], "partition_col": [38, 110, 275], "write_to_dataset": [38, 275], "similar": [38, 139, 166, 190, 275, 369, 372, 499, 517, 680, 690, 720, 736, 799, 896, 899, 1026, 1139], "spark": [38, 275], "partit": [38, 110, 111, 119, 122, 126, 127, 188, 203, 275], "we": [38, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 121, 126, 172, 173, 190, 246, 275, 362, 366, 373, 436, 471, 473, 518, 521, 522, 523, 524, 525, 527, 528, 529, 557, 566, 634, 635, 637, 638, 652, 677, 678, 680, 690, 714, 727, 728, 736, 740, 741, 752, 799, 809, 889, 893, 900, 924, 966, 999, 1070, 1079, 1139], "use_pyarrow_write_to_dataset": [38, 275], "first": [38, 71, 107, 108, 112, 121, 125, 134, 144, 170, 172, 175, 178, 190, 192, 193, 200, 204, 205, 229, 234, 235, 241, 242, 246, 259, 275, 299, 301, 330, 359, 362, 366, 400, 407, 408, 424, 436, 439, 440, 461, 472, 482, 503, 532, 544, 555, 558, 559, 567, 568, 623, 629, 643, 647, 680, 690, 711, 727, 730, 732, 736, 739, 749, 770, 777, 785, 799, 802, 818, 852, 854, 886, 889, 893, 923, 933, 934, 953, 966, 969, 970, 991, 998, 1040, 1068, 1070, 1071, 1072, 1080, 1081, 1110, 1118, 1139, 1147], "watermark": [38, 275], "partitioned_object": [38, 275], "calendar": [40, 41, 172, 173, 190, 246, 275, 350, 362, 366, 373, 377, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 639, 677, 678, 690, 727, 728, 736, 799, 873, 889, 893, 900, 904], "time_unit": [41, 43, 103, 338, 339, 346, 371, 376, 584, 634, 635, 636, 637, 638, 639, 645, 802, 861, 862, 869, 898, 903, 1097], "time_zon": [41, 103, 340, 365, 373, 584, 634, 635, 636, 637, 638, 802, 860, 863, 868, 892, 900, 1097], "timezon": [41, 802], "m": [41, 43, 59, 189, 275, 337, 338, 339, 345, 346, 369, 371, 372, 376, 555, 582, 583, 584, 587, 634, 635, 636, 637, 638, 645, 735, 799, 802, 860, 861, 862, 868, 869, 896, 898, 899, 903, 1068, 1095, 1096, 1097, 1100], "zoneinfo": [41, 802], "run": [41, 50, 51, 52, 77, 78, 136, 138, 171, 174, 191, 193, 205, 219, 242, 251, 261, 275, 289, 330, 436, 473, 516, 517, 561, 669, 690, 711, 712, 718, 720, 726, 729, 740, 741, 745, 750, 757, 762, 770, 776, 799, 802, 852, 966, 999, 1025, 1026, 1074, 1139, 1146, 1147], "available_timezon": [41, 802], "check": [41, 107, 108, 121, 130, 131, 140, 167, 172, 173, 175, 176, 184, 186, 189, 275, 307, 310, 311, 404, 409, 430, 518, 548, 553, 575, 690, 727, 728, 730, 731, 735, 740, 741, 799, 825, 828, 829, 929, 931, 935, 936, 938, 945, 946, 947, 949, 950, 960, 1041, 1061, 1066, 1088, 1139], "128": [42, 73, 1013, 1139], "bit": [42, 44, 45, 46, 47, 48, 49, 65, 66, 67, 68, 512, 548, 690, 1021, 1061, 1139], "neg": [42, 128, 172, 173, 175, 176, 178, 192, 222, 223, 225, 229, 275, 454, 455, 503, 518, 534, 535, 542, 571, 690, 727, 728, 730, 731, 760, 761, 763, 778, 799, 923, 953, 984, 985, 1046, 1047, 1055, 1084, 1110, 1139], "scale": [42, 158, 275, 473, 503, 585, 690, 907, 1098, 1139], "experiment": [42, 78, 127, 218, 244, 245, 250, 275, 330, 366, 473, 521, 522, 523, 524, 525, 527, 528, 529, 690, 712, 756, 772, 775, 799, 837, 852, 893, 924, 1017, 1139], "progress": 42, "expect": [42, 88, 90, 95, 107, 109, 121, 473, 652, 690, 738, 740, 741, 799], "32": [44, 47, 66, 73, 173, 186, 275, 490, 518, 536, 690, 728, 799, 856, 890, 1013, 1033, 1139], "sign": [46, 47, 48, 49, 362, 512, 590, 690, 802, 889, 938, 1021, 1103, 1139], "maintain_ord": [50, 51, 52, 147, 171, 174, 203, 205, 240, 242, 246, 255, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 275, 283, 305, 463, 473, 597, 604, 627, 690, 706, 712, 718, 720, 726, 729, 750, 762, 764, 769, 770, 781, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 799, 824, 993, 1124, 1139], "type_coercion": [50, 51, 52, 77, 78, 711, 712, 718, 720, 750, 762, 799], "predicate_pushdown": [50, 51, 52, 77, 78, 711, 712, 718, 720, 740, 741, 750, 762, 799], "projection_pushdown": [50, 51, 52, 77, 78, 711, 712, 718, 720, 740, 741, 750, 762, 799], "simplify_express": [50, 51, 52, 77, 78, 711, 712, 718, 720, 750, 762, 799], "slice_pushdown": [50, 51, 52, 77, 78, 711, 712, 718, 720, 740, 741, 750, 762, 799], "no_optim": [50, 51, 52, 77, 78, 711, 712, 720, 740, 741, 750, 799], "evalu": [50, 51, 52, 161, 163, 190, 275, 286, 300, 330, 402, 425, 426, 461, 472, 498, 611, 613, 617, 621, 634, 635, 637, 638, 640, 649, 650, 663, 666, 672, 677, 678, 680, 681, 690, 711, 723, 733, 735, 736, 799, 819, 852, 955, 956, 1130, 1139], "queri": [50, 51, 52, 56, 58, 77, 78, 109, 110, 113, 121, 124, 125, 126, 160, 191, 204, 275, 471, 472, 473, 559, 690, 711, 712, 718, 720, 732, 739, 750, 762, 778, 782, 787, 799, 808, 913, 999, 1072, 1139, 1146], "larger": [50, 51, 52, 626, 711, 799], "ram": [50, 51, 52, 799], "maintain": [50, 51, 52, 147, 240, 275, 305, 463, 532, 604, 690, 706, 764, 769, 799, 824, 993, 1040, 1124, 1139], "slightli": [50, 51, 52, 112, 799], "faster": [50, 51, 52, 109, 160, 236, 244, 275, 289, 473, 605, 690, 799, 808, 809, 913, 999, 1139], "coercion": [50, 51, 52, 77, 78, 513, 690, 711, 712, 718, 720, 750, 762, 799], "optim": [50, 51, 52, 77, 78, 119, 121, 124, 125, 126, 187, 191, 204, 208, 214, 242, 275, 711, 712, 718, 720, 740, 741, 750, 762, 770, 778, 787, 799, 838, 1139], "predic": [50, 51, 52, 77, 78, 121, 124, 125, 126, 127, 163, 186, 213, 275, 390, 609, 643, 690, 711, 712, 718, 720, 723, 740, 741, 750, 753, 762, 778, 799, 917, 1042, 1043, 1139], "pushdown": [50, 51, 52, 77, 78, 711, 712, 718, 720, 740, 741, 750, 753, 762, 778, 799, 1042, 1043, 1139], "project": [50, 51, 52, 77, 78, 121, 123, 124, 125, 126, 289, 543, 544, 690, 711, 712, 718, 720, 740, 741, 750, 753, 758, 762, 799], "slice": [50, 51, 52, 72, 77, 78, 158, 178, 188, 229, 275, 440, 459, 473, 481, 483, 519, 521, 522, 523, 524, 525, 527, 528, 529, 690, 711, 712, 718, 720, 740, 741, 750, 762, 799, 907, 923, 970, 989, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1110, 1139], "turn": [50, 51, 52, 77, 78, 107, 108, 121, 588, 711, 712, 718, 720, 740, 741, 750, 799, 1101], "off": [50, 51, 52, 77, 78, 107, 108, 121, 711, 712, 718, 720, 740, 741, 750, 799], "certain": [50, 51, 52, 78, 86, 111, 122, 181, 246, 275, 711, 712, 750, 799, 1139], "lf": [50, 51, 52, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 732, 733, 734, 735, 737, 738, 739, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 774, 775, 777, 778, 799, 1146, 1147], "scan_csv": [50, 51, 52, 107, 108, 799], "my_larger_than_ram_fil": [50, 51, 52, 799], "data_pagesize_limit": [52, 799], "reduc": [52, 107, 108, 119, 121, 124, 125, 126, 262, 263, 265, 268, 536, 643, 690, 788, 789, 791, 794, 799, 1001, 1016, 1048, 1109, 1139], "pressur": [52, 107, 108, 119, 121, 125, 126, 536, 690, 799, 1048, 1139], "improv": [52, 113, 124, 799], "speed": [52, 289, 473, 690, 799, 1147], "page": [52, 113, 119, 124, 126, 275, 690, 701, 799, 1139], "arrai": [53, 96, 100, 107, 108, 119, 158, 231, 236, 237, 275, 302, 303, 304, 305, 319, 320, 321, 325, 326, 327, 328, 329, 429, 446, 447, 448, 449, 457, 465, 521, 522, 524, 528, 533, 640, 690, 799, 821, 822, 823, 824, 842, 843, 844, 848, 849, 850, 851, 856, 907, 959, 976, 977, 978, 979, 986, 987, 995, 996, 1029, 1030, 1032, 1035, 1036, 1037, 1044, 1049, 1115, 1120, 1121, 1129, 1139], "integer_list": 53, "float_list": 53, "wrap": [55, 103, 404, 690], "arbitrari": [55, 135, 802], "eager": [56, 57, 58, 59, 60, 61, 172, 205, 244, 275, 338, 340, 343, 344, 346, 348, 351, 352, 354, 356, 358, 359, 361, 362, 363, 365, 366, 368, 371, 373, 375, 376, 521, 522, 524, 527, 528, 529, 617, 621, 634, 635, 637, 638, 645, 649, 650, 663, 666, 672, 677, 678, 681, 689, 690, 727, 741, 799, 860, 861, 863, 866, 867, 868, 869, 870, 871, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 900, 901, 902, 1146], "against": [56, 109, 436, 799, 966, 1146, 1147], "eagerli": [56, 461], "unset": [56, 134, 365, 461, 892], "init": [56, 141], "eager_execut": [56, 1146], "itself": [56, 133, 473, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 667, 668, 690, 738, 799, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1139, 1146], "impact": [56, 172, 175, 275, 727, 730, 799, 1146], "declar": [56, 96, 98, 99, 100, 102, 109, 116, 117, 275, 799], "godfath": 56, "1972": 56, "6_000_000": 56, "134_821_952": 56, "dark": 56, "knight": 56, "2008": 56, "185_000_000": 56, "533_316_061": 56, "schindler": 56, "1993": 56, "22_000_000": 56, "96_067_179": 56, "pulp": 56, "fiction": 56, "1994": 56, "8_000_000": 56, "107_930_000": 56, "shawshank": 56, "redempt": 56, "25_000_000": 56, "28_341_469": 56, "release_year": 56, "budget": 56, "gross": 56, "imdb_scor": 56, "ctx": [56, 57, 58, 59, 60, 61], "film": 56, "1990": 56, "BY": [56, 58], "desc": [56, 58], "AS": [56, 670, 1146], "decad": 56, "total_gross": 56, "n_film": 56, "2000": [56, 349, 351, 358, 359, 362, 367, 802, 872, 885, 886, 889, 894], "533316061": 56, "232338648": 56, "1970": [56, 127], "134821952": 56, "register_glob": [57, 59, 61, 1146], "register_mani": [57, 58, 61], "unregist": [57, 58, 59, 1146], "frame_data": [57, 60], "execut": [57, 58, 60, 62, 79, 109, 191, 275, 313, 436, 607, 690, 707, 740, 741, 750, 799, 966, 1127, 1139, 1146], "collect": [57, 58, 61, 74, 77, 78, 121, 122, 123, 127, 135, 137, 154, 156, 191, 205, 231, 242, 243, 275, 313, 384, 409, 473, 624, 641, 645, 672, 690, 704, 706, 708, 712, 714, 715, 716, 719, 720, 721, 722, 723, 724, 726, 727, 728, 732, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 753, 754, 756, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 775, 777, 778, 780, 781, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 799, 802, 936, 1139, 1146, 1147], "global": [58, 62, 80, 81, 128, 135, 140, 236, 275, 472, 690, 834, 836, 1146], "scope": [58, 61, 141, 700, 802, 1146], "automat": [58, 61, 96, 98, 99, 100, 102, 103, 107, 108, 109, 110, 112, 116, 117, 121, 135, 137, 139, 218, 250, 275, 313, 472, 577, 578, 579, 690, 756, 775, 799, 998, 1090, 1091, 1092, 1139, 1146], "map": [58, 59, 98, 99, 107, 108, 109, 110, 113, 114, 119, 120, 121, 124, 148, 157, 165, 187, 193, 209, 213, 214, 215, 232, 275, 366, 373, 470, 471, 472, 473, 499, 517, 607, 654, 690, 708, 717, 753, 799, 802, 854, 893, 900, 998, 999, 1026, 1127, 1139, 1146], "recent": [58, 500, 690, 1013, 1139, 1146], "df1": [58, 60, 61, 71, 79, 130, 160, 167, 198, 237, 248, 275, 746, 799], "x": [58, 59, 71, 79, 97, 103, 107, 108, 110, 121, 133, 135, 143, 158, 180, 183, 185, 189, 197, 205, 214, 215, 244, 275, 282, 284, 286, 332, 379, 380, 394, 397, 398, 399, 422, 429, 442, 466, 468, 470, 471, 473, 488, 490, 494, 495, 498, 504, 505, 513, 517, 538, 541, 573, 593, 594, 601, 603, 610, 612, 614, 618, 619, 629, 630, 632, 643, 652, 654, 657, 661, 665, 674, 690, 735, 741, 745, 763, 799, 802, 836, 916, 949, 999, 1051, 1054, 1086, 1122, 1139, 1146], "df2": [58, 60, 61, 71, 79, 130, 160, 167, 237, 248, 275], "join": [58, 62, 71, 77, 78, 79, 81, 190, 245, 275, 403, 499, 690, 711, 712, 718, 720, 736, 750, 762, 772, 777, 799], "named_fram": [59, 1146], "lf1": [59, 61], "o": [59, 113, 124, 312, 330, 554, 602, 690, 830, 852, 1067, 1090, 1123, 1139], "lf2": [59, 61, 799], "p": [59, 73, 204, 275, 503, 672, 690, 749, 799], "q": [59, 215, 275, 672], "r": [59, 107, 108, 121, 503, 550, 554, 555, 556, 557, 567, 690, 802, 1063, 1067, 1068, 1069, 1070, 1080], "lf3": [59, 799], "lf4": [59, 799], "either": [59, 135, 173, 186, 190, 191, 195, 203, 213, 228, 236, 275, 507, 518, 582, 611, 620, 672, 690, 728, 736, 738, 799, 802, 1017, 1095, 1139, 1147], "tbl1": [59, 61], "tbl2": [59, 61], "tbl3": 59, "tbl4": 59, "statement": [60, 680], "hello_world": 60, "baz": [60, 181, 182, 205, 243, 275, 557, 572, 574, 686, 734, 771, 799, 802, 1070, 1087], "hello_data": 60, "foo_bar": [60, 477, 480, 572, 652], "registr": [61, 701], "lifetim": [61, 141, 700], "context": [61, 62, 80, 81, 139, 201, 257, 275, 283, 289, 313, 324, 390, 423, 436, 444, 471, 473, 481, 543, 544, 607, 615, 627, 642, 645, 651, 655, 666, 669, 689, 690, 700, 701, 777, 783, 799, 952, 966, 974, 1127, 1139, 1146], "manag": [61, 62, 80, 81, 700, 701, 1146], "often": [61, 141, 172, 173, 175, 176, 275, 431, 432, 513, 518, 690, 727, 728, 730, 731, 799, 961, 962], "want": [61, 78, 99, 160, 193, 201, 275, 319, 320, 321, 373, 390, 471, 472, 473, 517, 521, 522, 523, 524, 525, 527, 528, 529, 560, 629, 634, 643, 663, 666, 681, 690, 712, 732, 739, 799, 802, 808, 842, 843, 844, 900, 913, 999, 1026, 1073, 1120, 1139], "df0": [61, 198, 275, 746, 799], "exit": [61, 62, 80, 141, 1146], "construct": [61, 62, 80, 81, 96, 98, 99, 100, 101, 102, 109, 275, 396, 472, 663, 666, 681, 686, 690, 714, 725, 752, 799, 834, 1139], "persist": 61, "through": [61, 97, 109, 686, 802, 1139], "tbl0": 61, "remain": [61, 107, 108, 121, 156, 158, 163, 275, 335, 336, 390, 435, 573, 574, 690, 716, 723, 740, 741, 799, 857, 858, 907, 917, 965, 1086, 1087, 1139], "text": [61, 109, 560, 561, 567, 568, 670, 1073, 1074, 1147], "misc": 61, "testing1234": 61, "test1": 61, "test2": 61, "test3": 61, "disabl": [62, 80, 81, 187, 275, 711, 799], "cach": [62, 77, 78, 80, 81, 113, 121, 124, 126, 130, 131, 140, 472, 521, 522, 523, 524, 525, 527, 528, 529, 582, 583, 584, 587, 690, 700, 711, 712, 718, 720, 750, 762, 799, 834, 1095, 1096, 1097, 1100], "under": [62, 72, 73, 74, 75, 80, 81, 682, 683, 685, 686, 691, 692, 696, 697, 698, 1131, 1133, 1135, 1140, 1143, 1144, 1145], "physic": [62, 81, 107, 108, 190, 275, 316, 319, 320, 321, 601, 690, 707, 735, 736, 799, 835, 836, 842, 843, 844, 1122, 1139], "equal": [62, 81, 107, 108, 109, 121, 130, 131, 147, 167, 172, 175, 190, 198, 240, 275, 313, 331, 379, 380, 397, 422, 461, 495, 507, 513, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 563, 569, 590, 667, 668, 686, 690, 706, 727, 730, 736, 746, 764, 769, 799, 853, 991, 1017, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1041, 1076, 1082, 1103, 1139, 1147], "concaten": [62, 79, 80, 81, 166, 204, 275, 503, 624, 625, 690, 749, 799, 840, 1005, 1139], "introduc": [62, 81, 582, 583, 584, 1095, 1096, 1097], "overhead": [62, 81, 121, 124, 125, 126], "amount": [62, 81, 289, 473, 639, 690], "depend": [62, 76, 81, 109, 129, 427, 428, 473, 481, 507, 510, 639, 642, 645, 651, 690, 957, 958, 1017, 1019, 1139, 1147], "categori": [62, 81, 234, 275, 315, 316, 331, 507, 690, 833, 835, 853, 924, 1017, 1139], "clear": [62, 80, 150, 275, 710, 799, 845, 1139], "outermost": 62, "s1": [62, 80, 81, 131, 166, 275, 950, 991, 1121, 1130, 1139], "color": [62, 80, 81, 261, 307, 309, 310, 311, 607, 690, 787, 1127, 1139], "red": [62, 80, 81, 261, 607, 690, 787, 1127, 1139], "green": [62, 80, 81, 261, 607, 690, 787, 1127, 1139], "blue": [62, 80, 81, 307, 309, 310, 311, 607, 690, 1127, 1139], "concat": [62, 80, 81, 108, 840, 1005, 1139], "cat": [62, 80, 81, 235, 275, 331, 507, 548, 550, 586, 589, 601, 625, 685, 690, 802, 853, 924, 1017, 1061, 1063, 1099, 1102, 1135, 1139], "decor": [62, 72, 73, 74, 75, 135, 137, 193, 275, 473, 690, 700, 701, 999, 1139], "dure": [62, 107, 108, 121, 141, 160, 275, 808, 913, 1139], "afterward": [62, 680], "construct_categor": 62, "composit": [63, 134, 1147], "schemadict": [63, 96, 98, 99, 100, 101, 102, 107, 109, 110, 112, 118, 121, 217, 275, 672, 740, 741, 755, 782, 787, 799], "struct_seri": [63, 787], "dai": [64, 172, 173, 175, 188, 190, 246, 275, 358, 359, 362, 363, 366, 373, 375, 518, 521, 522, 523, 524, 525, 527, 528, 529, 633, 634, 635, 636, 637, 638, 639, 677, 678, 690, 727, 728, 730, 736, 799, 802, 885, 886, 889, 890, 893, 900, 902], "static": [69, 782, 787], "utf": 70, "frametyp": [71, 1146], "joinstrategi": [71, 189, 275, 735, 799], "outer": [71, 79, 189, 275, 735, 799], "descend": [71, 147, 220, 226, 240, 275, 299, 456, 510, 533, 543, 544, 607, 620, 690, 706, 759, 764, 769, 799, 818, 946, 986, 1019, 1044, 1056, 1127, 1139], "fill": [71, 79, 149, 161, 162, 223, 244, 275, 306, 326, 329, 388, 389, 395, 403, 521, 522, 524, 528, 535, 563, 569, 590, 644, 663, 666, 681, 690, 721, 722, 761, 777, 799, 915, 916, 927, 1010, 1029, 1030, 1032, 1035, 1036, 1037, 1047, 1076, 1082, 1103, 1139], "sort": [71, 72, 130, 134, 147, 172, 173, 175, 176, 190, 198, 204, 205, 220, 240, 246, 259, 269, 275, 299, 316, 390, 473, 499, 518, 522, 523, 524, 525, 527, 529, 533, 544, 607, 609, 620, 655, 690, 706, 718, 727, 728, 730, 731, 736, 746, 749, 750, 759, 762, 769, 785, 795, 799, 802, 818, 835, 946, 1044, 1124, 1127, 1139, 1147], "origin": [71, 107, 108, 121, 156, 163, 242, 275, 335, 336, 365, 390, 419, 435, 472, 499, 512, 513, 514, 549, 550, 555, 559, 563, 569, 590, 618, 619, 690, 716, 723, 770, 799, 853, 857, 858, 892, 917, 965, 998, 1017, 1023, 1062, 1063, 1068, 1072, 1076, 1082, 1103, 1139], "In": [71, 78, 109, 111, 122, 123, 126, 135, 137, 141, 158, 160, 172, 173, 175, 176, 193, 201, 236, 275, 473, 518, 634, 690, 712, 727, 728, 730, 731, 799, 808, 907, 913, 1020, 1139], "duplic": [71, 85, 183, 189, 190, 242, 245, 275, 284, 405, 419, 507, 690, 735, 736, 770, 772, 799, 930, 1017, 1139], "behaviour": [71, 79, 156, 275, 548, 555, 556, 567, 603, 690, 716, 799, 1061, 1068, 1069, 1080], "suitabl": [71, 79, 109, 133, 193, 275, 473, 532, 690, 999, 1040, 1139, 1147], "get": [71, 78, 104, 114, 120, 127, 139, 147, 151, 157, 165, 168, 169, 172, 173, 175, 176, 178, 179, 183, 185, 186, 192, 200, 205, 213, 217, 221, 225, 229, 240, 249, 259, 269, 275, 283, 297, 298, 299, 301, 305, 315, 325, 326, 327, 328, 329, 346, 391, 400, 418, 421, 424, 438, 443, 463, 474, 475, 476, 481, 483, 487, 492, 493, 501, 502, 508, 516, 518, 542, 546, 595, 596, 604, 608, 634, 642, 647, 651, 655, 656, 657, 658, 659, 660, 661, 671, 675, 679, 690, 706, 712, 713, 717, 724, 727, 728, 730, 731, 732, 737, 739, 755, 763, 767, 769, 774, 785, 795, 799, 816, 817, 818, 819, 820, 824, 833, 840, 848, 849, 850, 851, 869, 920, 923, 928, 930, 948, 953, 968, 973, 993, 1000, 1002, 1003, 1005, 1008, 1009, 1014, 1015, 1018, 1025, 1055, 1058, 1110, 1115, 1116, 1124, 1128, 1129, 1139], "speedup": [71, 187, 193, 275, 473, 690, 999, 1139], "receiv": [71, 109, 121, 193, 204, 261, 275, 473, 503, 690, 749, 799, 1147], "now": [71, 173, 275, 313, 690, 728, 799, 1097], "One": [71, 153, 201, 205, 275, 286, 498, 670, 690, 802, 854, 1139], "whose": [71, 190, 205, 275, 384, 641, 690, 736, 799], "uniqu": [71, 132, 133, 134, 137, 145, 146, 185, 189, 201, 205, 215, 266, 275, 290, 301, 331, 418, 491, 507, 582, 583, 584, 587, 605, 607, 616, 662, 690, 704, 705, 735, 792, 799, 820, 853, 854, 948, 1006, 1017, 1095, 1096, 1097, 1100, 1125, 1127, 1139], "post": 71, "constrain": [71, 156, 275, 716, 799], "newli": 71, "boolean": [71, 147, 163, 166, 191, 226, 240, 275, 285, 286, 287, 307, 310, 311, 349, 390, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 425, 426, 430, 496, 498, 501, 502, 544, 558, 609, 610, 620, 621, 672, 680, 690, 706, 710, 723, 738, 764, 769, 799, 802, 806, 807, 819, 825, 827, 872, 917, 928, 929, 930, 932, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 948, 955, 956, 960, 1011, 1014, 1015, 1042, 1061, 1120, 1130, 1139], "know": [71, 109, 205, 275, 461, 1120, 1129, 1139], "2022": [71, 148, 153, 170, 172, 173, 190, 246, 275, 339, 347, 355, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 582, 634, 635, 637, 638, 639, 645, 677, 678, 690, 708, 727, 728, 736, 799, 802, 862, 873, 889, 893, 900, 1095], "y": [71, 79, 97, 103, 133, 135, 143, 158, 183, 185, 189, 197, 205, 214, 215, 244, 275, 282, 284, 286, 369, 372, 379, 380, 397, 398, 422, 429, 442, 468, 470, 473, 494, 495, 498, 505, 513, 517, 582, 583, 584, 594, 603, 610, 612, 614, 618, 619, 632, 639, 652, 657, 661, 674, 690, 735, 745, 763, 799, 802, 836, 896, 899, 1095, 1096, 1097], "df3": [71, 275], "set_tbl_format": 71, "09": [71, 129, 135, 173, 275, 339, 358, 359, 518, 585, 634, 678, 690, 728, 799, 802, 1098], "01": [71, 135, 148, 153, 170, 172, 173, 246, 275, 337, 338, 339, 340, 344, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 376, 377, 518, 521, 522, 524, 527, 528, 529, 582, 583, 584, 587, 634, 635, 637, 639, 690, 708, 727, 728, 799, 802, 861, 862, 863, 864, 865, 867, 869, 870, 871, 876, 877, 878, 880, 882, 883, 885, 886, 887, 888, 889, 892, 893, 895, 896, 897, 898, 899, 900, 903, 1095, 1096, 1097, 1100], "02": [71, 148, 170, 172, 173, 190, 246, 275, 338, 339, 346, 348, 356, 358, 359, 362, 365, 366, 368, 371, 373, 376, 518, 521, 522, 523, 524, 525, 527, 528, 529, 530, 582, 583, 584, 587, 634, 635, 637, 638, 639, 677, 678, 690, 708, 727, 728, 736, 799, 802, 861, 862, 864, 865, 869, 870, 871, 876, 877, 882, 883, 885, 886, 887, 889, 892, 893, 895, 897, 898, 900, 991, 1095, 1096, 1097, 1100], "03": [71, 103, 148, 172, 173, 246, 275, 338, 339, 340, 344, 346, 348, 356, 358, 359, 362, 365, 366, 367, 368, 369, 371, 372, 373, 376, 518, 521, 522, 524, 527, 528, 529, 583, 587, 634, 635, 637, 639, 690, 708, 727, 728, 799, 861, 862, 863, 867, 869, 870, 871, 876, 877, 883, 885, 886, 887, 892, 893, 895, 896, 898, 899, 1096, 1100], "af1": 71, "af2": 71, "af3": 71, "keep": [71, 107, 108, 121, 242, 245, 246, 275, 419, 472, 623, 690, 770, 772, 799, 998, 1139], "easili": [71, 109, 218, 250, 254, 275, 672, 756, 775, 780, 799], "dot": [71, 690, 762, 799, 1139], "product": [71, 152, 275, 328, 334, 690, 720, 799, 850, 856, 1139], "fill_nul": [71, 161, 275, 690, 721, 777, 799, 1139], "sum_horizont": [71, 673], "167": 71, "47": 71, "callabl": [72, 73, 74, 75, 121, 144, 166, 193, 204, 256, 261, 275, 289, 461, 469, 470, 471, 473, 503, 519, 520, 615, 629, 630, 643, 653, 654, 655, 665, 690, 740, 741, 749, 782, 787, 799, 809, 991, 999, 1027, 1028, 1139], "by_first_letter_of_column_nam": 72, "f": [72, 108, 153, 170, 188, 231, 241, 244, 275, 282, 461, 536, 554, 582, 584, 615, 624, 653, 690, 991, 1067, 1095, 1097], "fromkei": [72, 74], "by_first_letter_of_column_valu": 72, "starts_with": [72, 307, 310, 548, 553, 802, 1066], "to_seri": [72, 168, 275, 582, 621, 666, 1095], "xx": [72, 74, 134, 137, 802], "xy": [72, 74], "yy": [72, 74, 134, 137, 802], "yz": [72, 74], "b1": [72, 74], "b2": [72, 74], "pow_n": 73, "powersofn": 73, "next": [73, 172, 173, 190, 246, 275, 306, 362, 366, 373, 510, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900, 1019, 1139], "ceil": [73, 690, 1139], "previou": [73, 141, 500, 505, 592, 594, 690, 808, 1013, 1139], "floor": [73, 690, 1139], "nearest": [73, 190, 207, 267, 275, 318, 393, 403, 508, 525, 664, 690, 736, 751, 793, 799, 839, 919, 927, 1018, 1033, 1139], "24": [73, 129, 158, 172, 173, 190, 193, 246, 275, 328, 330, 343, 348, 362, 363, 366, 373, 375, 490, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 639, 677, 678, 690, 727, 728, 736, 799, 852, 871, 889, 893, 900, 950, 1139], "001": [73, 351, 352, 354, 361, 639, 878, 880, 888], "next_pow2": 73, "prev_pow2": 73, "nearest_pow2": 73, "split_by_column_dtyp": 74, "collect_al": [74, 78, 711, 712, 799], "31": [75, 135, 339, 343, 344, 347, 355, 358, 362, 582, 633, 634, 636, 645, 652, 802, 860, 862, 866, 867, 885, 1095, 1147], "42": [75, 173, 177, 198, 275, 518, 690, 728, 746, 799, 922, 1139], "961": 75, "1764": 75, "4160": 75, "build": [76, 97, 802, 1147], "wa": 76, "compil": [76, 427, 428, 957, 958], "gate": 76, "info": [76, 111, 122, 123, 129], "otherwis": [76, 109, 112, 134, 139, 193, 198, 215, 218, 261, 275, 308, 319, 320, 321, 331, 381, 382, 383, 461, 473, 481, 503, 507, 512, 522, 523, 524, 525, 527, 529, 548, 551, 611, 655, 680, 690, 746, 756, 787, 799, 826, 842, 843, 844, 853, 908, 909, 910, 991, 999, 1017, 1021, 1042, 1043, 1061, 1064, 1139], "host": [76, 107, 113, 115, 119, 124], "git": 76, "lazy_fram": [77, 78], "comm_subplan_elim": [77, 78, 711, 712, 718, 720, 750, 762, 799], "comm_subexpr_elim": [77, 78, 313, 690, 711, 712, 718, 720, 750, 762, 799], "graph": [77, 191, 275, 711, 733, 777, 799], "parallel": [77, 79, 105, 110, 119, 126, 172, 175, 190, 191, 204, 219, 251, 275, 330, 436, 607, 680, 690, 701, 727, 730, 735, 736, 757, 776, 787, 799, 852, 966, 1127, 1139], "threadpool": [77, 139], "Will": [77, 78, 711, 712, 718, 720, 750, 762, 799, 1139], "try": [77, 78, 91, 93, 107, 108, 113, 119, 121, 124, 126, 711, 712, 718, 720, 750, 762, 799], "branch": [77, 78, 711, 712, 718, 720, 750, 762, 799], "subplan": [77, 78, 711, 712, 718, 720, 750, 762, 799], "union": [77, 78, 79, 453, 711, 712, 718, 720, 750, 762, 799, 802, 983], "subexpress": [77, 78, 711, 712, 718, 720, 750, 762, 799], "reus": [77, 78, 711, 712, 718, 720, 750, 762, 799], "part": [77, 78, 96, 112, 135, 556, 573, 574, 712, 718, 720, 750, 762, 777, 799, 1069, 1086, 1087], "fashion": [77, 78, 189, 275, 712, 718, 720, 750, 762, 799], "alpha": [77, 78, 289, 381, 382, 383, 690, 711, 712, 718, 720, 750, 762, 799, 908, 909, 910, 1139], "gevent": [78, 129, 712, 799], "_geventdataframeresult": [78, 712, 799], "await": [78, 712, 799], "asynchron": [78, 712, 799], "them": [78, 96, 98, 99, 100, 102, 116, 117, 118, 121, 126, 159, 160, 172, 173, 190, 198, 246, 275, 404, 442, 492, 493, 499, 518, 624, 634, 635, 637, 638, 677, 678, 690, 712, 719, 727, 728, 736, 746, 799, 802, 808, 913, 972, 1008, 1009, 1139], "schedul": [78, 712, 799], "insid": [78, 712, 799], "almost": [78, 193, 261, 275, 582, 583, 584, 712, 799, 999, 1095, 1096, 1097, 1139], "instantli": [78, 712, 799], "asyncio": [78, 712, 799], "releas": [78, 289, 473, 690, 712, 799, 1147], "greenlet": [78, 712, 799], "task": [78, 712, 799], "being": [78, 107, 108, 109, 121, 127, 148, 159, 234, 244, 245, 275, 289, 330, 366, 521, 522, 523, 524, 525, 527, 528, 529, 640, 690, 708, 712, 719, 720, 772, 799, 837, 852, 893, 924, 1017, 1139, 1147], "wrapper": [78, 712, 799], "event": [78, 712, 799], "asyncresult": [78, 712, 799], "timeout": [78, 712, 799], "break": [78, 127, 244, 245, 275, 289, 330, 331, 366, 521, 522, 523, 524, 525, 527, 528, 529, 690, 712, 772, 799, 837, 852, 853, 893, 924, 1017, 1139], "collect_async": [78, 799], "set_except": [78, 712, 799], "futur": [78, 143, 634, 712, 799], "rerais": [78, 712, 799], "item": [79, 108, 170, 213, 216, 275, 386, 430, 439, 442, 531, 574, 690, 912, 960, 969, 972, 1039, 1087, 1139], "iter": [79, 96, 109, 136, 138, 147, 171, 172, 173, 174, 175, 176, 187, 188, 213, 214, 215, 218, 219, 220, 226, 240, 241, 250, 251, 253, 254, 275, 330, 499, 544, 612, 614, 620, 623, 624, 625, 632, 657, 661, 669, 672, 674, 686, 690, 706, 726, 727, 728, 729, 730, 731, 756, 757, 759, 764, 769, 775, 776, 780, 799, 852, 1139, 1147], "polarstyp": 79, "concatmethod": 79, "vertic": [79, 160, 244, 248, 275, 547, 1060], "rechunk": [79, 96, 101, 107, 108, 113, 115, 119, 121, 124, 125, 126, 160, 275, 690, 808, 840, 913, 1005, 1139], "combin": [79, 91, 93, 172, 173, 177, 190, 246, 275, 286, 300, 373, 498, 518, 564, 570, 576, 577, 578, 579, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 762, 799, 893, 900, 1077, 1083, 1089, 1090, 1091, 1092], "vertical_relax": 79, "diagon": [79, 241, 275], "vstack": [79, 160, 275], "addition": [79, 213, 275], "coerc": [79, 513, 690], "supertyp": [79, 162, 275, 288, 690, 722, 799], "mismatch": [79, 91, 117], "find": [79, 164, 275, 532, 690, 1040, 1139], "miss": [79, 107, 108, 121, 161, 275, 306, 381, 382, 383, 395, 413, 415, 690, 721, 799, 908, 909, 910, 1129, 1139], "diagonal_relax": 79, "stack": [79, 180, 248, 275], "don": [79, 172, 193, 242, 244, 275, 289, 330, 436, 473, 499, 690, 727, 770, 799, 802, 852, 966, 999, 1041, 1129, 1139], "auto": [79, 96, 98, 99, 100, 102, 116, 117, 119, 126, 241, 275, 799, 1147], "logic": [79, 193, 261, 275, 285, 287, 473, 601, 611, 613, 655, 690, 714, 725, 735, 752, 758, 779, 787, 799, 806, 807, 999, 1122, 1139], "align_fram": 79, "pattern": [79, 107, 108, 121, 124, 125, 126, 187, 275, 479, 548, 549, 550, 555, 556, 557, 567, 568, 787, 802, 1042, 1043, 1061, 1062, 1063, 1068, 1069, 1070, 1080, 1081, 1139], "collis": 79, "need": [79, 103, 107, 108, 110, 130, 131, 172, 173, 175, 176, 215, 224, 236, 275, 461, 472, 518, 536, 585, 639, 663, 666, 681, 690, 727, 728, 730, 731, 799, 1048, 1098, 1139, 1147], "sure": [79, 96, 101, 107, 108, 113, 115, 119, 172, 173, 175, 176, 208, 275, 518, 690, 727, 728, 730, 731, 799], "contigu": [79, 96, 101, 107, 108, 113, 115, 119, 121, 124, 125, 126, 208, 275], "relev": 79, "df_h1": 79, "l1": 79, "l2": 79, "df_h2": 79, "r1": 79, "r2": 79, "r3": 79, "df_d1": 79, "df_d2": 79, "df_a1": 79, "df_a2": 79, "df_a3": 79, "enable_string_cach": 80, "stringcach": [80, 81, 189, 275, 701, 834, 836], "reliabl": [80, 81], "wai": [80, 81, 96, 98, 99, 100, 102, 116, 117, 171, 188, 204, 226, 254, 275, 499, 503, 544, 555, 686, 690, 726, 749, 764, 780, 787, 799, 1068], "until": [80, 191, 275], "deprec": [81, 144, 146, 172, 174, 175, 176, 256, 275, 289, 313, 365, 373, 407, 411, 414, 431, 434, 441, 445, 458, 462, 469, 519, 549, 562, 564, 565, 570, 576, 582, 584, 615, 622, 634, 636, 653, 666, 677, 690, 705, 725, 727, 729, 730, 731, 740, 752, 779, 782, 799, 808, 809, 853, 892, 900, 933, 939, 961, 964, 971, 975, 988, 992, 1017, 1027, 1062, 1075, 1077, 1078, 1083, 1089, 1095, 1097, 1139], "sinc": [81, 111, 122, 144, 146, 147, 172, 174, 175, 176, 240, 256, 275, 289, 313, 346, 365, 373, 407, 411, 414, 431, 434, 441, 445, 458, 462, 469, 519, 549, 562, 564, 565, 570, 576, 582, 584, 615, 622, 634, 636, 645, 653, 666, 677, 690, 705, 706, 725, 727, 729, 730, 731, 740, 752, 764, 769, 779, 782, 799, 808, 809, 853, 869, 892, 900, 933, 939, 961, 964, 971, 975, 988, 992, 1017, 1027, 1062, 1075, 1077, 1078, 1083, 1089, 1095, 1097, 1139], "19": [81, 112, 129, 144, 172, 173, 174, 175, 176, 190, 256, 275, 289, 365, 366, 373, 407, 411, 414, 431, 445, 469, 518, 519, 522, 524, 549, 562, 564, 565, 570, 576, 582, 584, 585, 615, 634, 636, 653, 690, 727, 728, 729, 730, 731, 736, 740, 782, 799, 809, 853, 892, 893, 900, 933, 939, 961, 975, 1017, 1027, 1062, 1075, 1077, 1078, 1083, 1089, 1095, 1097, 1098, 1139], "longer": [81, 107, 121], "accept": [81, 106, 107, 108, 111, 113, 115, 119, 147, 171, 174, 218, 219, 226, 240, 250, 251, 254, 275, 282, 384, 404, 472, 499, 544, 610, 612, 614, 620, 623, 624, 625, 632, 641, 657, 661, 669, 672, 674, 680, 690, 706, 726, 729, 756, 757, 764, 769, 775, 776, 780, 799, 928, 1139], "disable_string_cach": 81, "encount": [82, 107, 108, 121, 172, 175, 275, 492, 493, 558, 559, 626, 629, 643, 690, 727, 730, 799, 1008, 1009, 1071, 1072, 1139], "finish": [84, 160, 275, 808, 913, 1139], "least": [88, 135, 500, 690, 1013, 1139], "unexpect": [89, 275, 471, 473, 690, 999, 1139], "caus": [89, 97, 107, 108, 121, 143, 160, 275, 808, 913, 1139], "panic": 89, "incompat": 93, "chunkedarrai": [96, 200, 275, 856, 1139], "recordbatch": [96, 188, 275], "schemadefinit": [96, 98, 99, 100, 102, 116, 117, 275, 799], "schema_overrid": [96, 98, 99, 100, 101, 102, 109, 110, 112, 116, 117, 118, 188, 236, 275, 305, 799, 802, 824], "copi": [96, 97, 143, 149, 150, 188, 231, 236, 237, 250, 275, 387, 590, 690, 709, 710, 775, 799, 841, 845, 914, 1103, 1115, 1120, 1121, 1139], "closest": 96, "pair": [96, 98, 99, 100, 102, 116, 117, 134, 209, 275, 753, 799, 1147], "sever": [96, 98, 99, 100, 102, 116, 117, 275, 799, 1147], "form": [96, 98, 99, 100, 102, 116, 117, 187, 214, 244, 275, 500, 690, 799, 1013, 1139], "dimens": [96, 98, 100, 102, 116, 117, 275, 514, 690, 799, 1023, 1139], "supportsinterchang": 97, "allow_copi": [97, 143], "interchang": [97, 143], "__dataframe__": 97, "convers": [97, 112, 143, 187, 188, 214, 215, 233, 237, 275, 582, 583, 584, 587, 701, 921, 1095, 1096, 1097, 1100, 1119, 1120, 1121, 1139], "detail": [97, 109, 110, 130, 131, 143, 275, 799, 1147], "latest": [97, 111, 122, 143, 365, 366, 373, 395, 482, 582, 584, 636, 690, 892, 893, 900, 1095, 1097], "from_panda": 97, "from_arrow": 97, "effici": [97, 109, 112, 188, 275], "reli": 97, "therefor": [97, 158, 275, 473, 680, 690, 907, 1139], "becaus": [97, 117, 158, 172, 175, 191, 193, 244, 261, 275, 436, 727, 730, 787, 799, 809, 907, 966, 999, 1139], "convert": [97, 101, 111, 112, 118, 122, 143, 232, 233, 234, 235, 236, 239, 275, 332, 340, 369, 372, 461, 470, 509, 557, 566, 582, 583, 584, 585, 587, 690, 725, 799, 836, 863, 896, 899, 991, 1070, 1079, 1095, 1096, 1097, 1098, 1100, 1108, 1118, 1119, 1120, 1121, 1129, 1139], "panda": [97, 101, 129, 172, 237, 275, 358, 359, 601, 690, 727, 799, 885, 886, 1121, 1122, 1139], "pd": [97, 101, 601, 690, 1121, 1122, 1139], "df_pd": 97, "dfi": [97, 143], "clone": [98, 99, 100, 101, 102, 149, 236, 237, 275, 709, 799, 841, 1119, 1120, 1121, 1129, 1139], "dimension": [98, 100, 102, 236, 275, 799, 1139], "infer_schema_length": [99, 102, 107, 108, 112, 121, 125, 275, 558, 799, 1071], "NOT": [99, 130, 131, 480, 1146], "typic": [99, 109, 193, 275, 345, 802, 868, 999, 1139], "clearer": 99, "_partial_": [99, 275, 799], "omit": [99, 103, 133, 135, 137, 141, 201, 215, 275, 677, 678, 802], "mani": [99, 102, 109, 110, 160, 275, 558, 808, 913, 1071, 1139], "scan": [99, 102, 107, 108, 121, 122, 123, 124, 125, 126, 127, 172, 173, 175, 176, 275, 518, 690, 720, 727, 728, 730, 731, 732, 739, 799], "slow": [99, 102, 107, 108, 121, 289, 330, 473, 520, 690, 787, 852, 1028, 1139], "partial": [99, 107, 121], "present": [99, 130, 135, 409, 690, 720, 799, 1129, 1139], "np": [100, 163, 236, 275, 597, 690, 799, 932, 937, 941, 942, 1111, 1139], "ndarrai": [100, 163, 236, 275, 597, 690, 799, 856, 1040, 1043, 1111, 1120, 1139], "numpi": [100, 129, 152, 187, 214, 215, 233, 236, 237, 275, 492, 493, 520, 690, 799, 932, 937, 941, 942, 1008, 1009, 1028, 1120, 1121, 1129, 1139], "columnar": [100, 102, 187, 214, 275], "interpret": [100, 102, 107, 108, 121, 275, 799], "yield": [100, 102, 107, 108, 109, 121, 158, 160, 241, 275, 499, 690, 799, 808, 907, 913, 1139], "conclus": [100, 102, 275, 799], "nan_to_nul": [101, 275, 799, 1139], "include_index": 101, "instal": [101, 107, 108, 110, 113, 115, 119, 129, 152, 236, 237, 275, 762, 799, 1121, 1139], "nan": [101, 130, 131, 135, 143, 161, 237, 275, 335, 336, 379, 380, 388, 397, 398, 403, 413, 415, 416, 417, 422, 468, 474, 487, 492, 493, 494, 495, 520, 603, 626, 690, 721, 799, 811, 815, 857, 858, 915, 941, 942, 1008, 1009, 1028, 1120, 1121, 1139, 1147], "pd_df": 101, "pd_seri": 101, "tbl": [103, 105, 108], "reconstruct": 103, "repr": [103, 135, 137], "trim": 103, "whitespac": [103, 564, 570, 576, 577, 578, 579, 1077, 1083, 1089, 1090, 1091, 1092], "prompt": 103, "extract": [103, 341, 343, 344, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 363, 364, 367, 368, 370, 374, 375, 377, 503, 556, 557, 558, 559, 690, 864, 865, 866, 867, 870, 871, 873, 877, 878, 879, 880, 882, 883, 884, 887, 888, 890, 891, 894, 895, 897, 901, 902, 904, 1069, 1070, 1071, 1072], "to_init_repr": [103, 275, 1139], "truncat": [103, 107, 121, 170, 172, 175, 187, 214, 215, 233, 275, 727, 730, 750, 799], "identifi": [103, 197, 203, 242, 275, 745, 770, 799], "compound": [103, 215, 275, 802], "struct": [103, 201, 218, 239, 243, 250, 275, 331, 461, 472, 507, 516, 517, 557, 558, 573, 574, 607, 629, 630, 632, 654, 690, 756, 771, 775, 787, 799, 853, 991, 1017, 1025, 1070, 1071, 1084, 1086, 1087, 1139], "neither": [103, 112, 118, 216, 275, 461, 991], "source_ac": 103, "source_cha": 103, "ident": [103, 149, 150, 275, 369, 516, 517, 690, 709, 710, 799, 841, 845, 896, 1025, 1026, 1139], "timestamp": [103, 172, 175, 275, 365, 645, 727, 730, 799, 892], "tor_id": 103, "nnel_id": 103, "\u03bc": [103, 135, 172, 173, 187, 190, 214, 215, 233, 246, 275, 337, 338, 339, 340, 344, 345, 347, 348, 351, 352, 354, 355, 356, 358, 359, 361, 362, 365, 366, 367, 368, 369, 372, 373, 376, 518, 521, 522, 524, 527, 528, 529, 582, 584, 637, 639, 645, 690, 727, 728, 736, 799, 802, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 876, 877, 878, 880, 882, 883, 885, 886, 887, 888, 889, 892, 893, 895, 897, 898, 900, 903, 1095, 1097], "asia": [103, 802, 864, 865, 897], "tokyo": [103, 802], "123456780": 103, "9876543210": 103, "56": [103, 599, 690], "59": [103, 134, 339, 347, 355, 367, 636, 676, 677, 678, 802, 862, 882, 894], "663053": 103, "jst": [103, 802], "803065983": 103, "2055938745": 103, "38": [103, 135], "18": [103, 146, 173, 198, 275, 313, 329, 366, 373, 376, 403, 419, 434, 441, 458, 462, 518, 622, 634, 677, 690, 705, 725, 728, 746, 750, 752, 779, 799, 802, 808, 903, 964, 971, 988, 992, 1097, 1139], "050545": 103, "source_actor_id": 103, "source_channel_id": 103, "to_list": [103, 173, 275, 728, 799, 1061, 1139], "datatypeclass": 104, "uint32": [104, 129, 148, 158, 275, 299, 343, 347, 351, 353, 355, 357, 360, 363, 364, 367, 374, 375, 427, 428, 444, 513, 549, 550, 560, 561, 597, 601, 690, 708, 799, 802, 819, 831, 866, 870, 877, 879, 882, 884, 887, 890, 891, 894, 901, 902, 907, 938, 957, 958, 974, 1041, 1062, 1063, 1073, 1074, 1122, 1139], "regular": [104, 187, 213, 214, 246, 275, 324, 384, 423, 444, 548, 549, 550, 555, 556, 557, 567, 568, 641, 690, 802, 952, 974, 1061, 1062, 1063, 1068, 1069, 1070, 1080, 1081, 1139], "uint64": [104, 177, 275, 399, 427, 428, 512, 690, 922, 957, 958, 1021, 1139], "bigidx": 104, "read": [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 160, 275, 396, 471, 680, 690, 714, 720, 725, 752, 799, 808, 913, 1139], "over": [105, 107, 108, 109, 111, 121, 135, 144, 160, 187, 188, 193, 213, 214, 215, 241, 253, 256, 261, 275, 289, 330, 389, 470, 471, 473, 481, 483, 484, 485, 510, 521, 522, 523, 524, 525, 527, 528, 529, 615, 629, 630, 643, 653, 654, 655, 665, 690, 782, 787, 802, 808, 809, 852, 913, 999, 1029, 1030, 1032, 1036, 1139], "fetch": [105, 121, 191, 275, 709, 711, 732, 739, 799], "ideal": 105, "read_csv_batch": [105, 702], "tpch": [105, 108], "tables_scale_100": [105, 108], "lineitem": [105, 108, 110], "try_parse_d": [105, 107, 108, 121], "n_row": [106, 107, 108, 113, 115, 119, 121, 124, 125, 126, 188, 275, 720, 799], "handler": [106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 120, 714, 752, 799], "builtin": [106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 120, 714, 752, 799], "stop": [106, 107, 108, 113, 115, 119, 121, 124, 125, 126, 521, 522, 524, 527, 528, 529, 690, 861, 863, 869, 870, 877, 879, 882, 887, 893, 898], "textio": 107, "new_column": [107, 108, 112, 121, 210, 275], "comment_char": [107, 108, 121], "skip_row": [107, 108, 121], "missing_utf8_is_empty_str": [107, 108, 121], "ignore_error": [107, 108, 117, 121], "n_thread": [107, 108], "8192": 107, "csvencod": [107, 108, 121], "low_memori": [107, 108, 119, 121, 125, 126], "skip_rows_after_head": [107, 108, 121], "row_count_nam": [107, 108, 113, 115, 119, 121, 124, 125, 126], "row_count_offset": [107, 108, 113, 115, 119, 121, 124, 125, 126], "sample_s": [107, 108], "eol_char": [107, 108, 121], "raise_if_empti": [107, 108, 112, 118, 121], "truncate_ragged_lin": [107, 121], "fsspec": [107, 108, 113, 115, 119, 122, 123, 124, 126, 129], "remot": [107, 108, 113, 115, 119], "autogener": [107, 108, 121], "column_x": [107, 108, 121], "enumer": [107, 108, 121, 188, 275], "shorter": [107, 108, 121], "comment": [107, 108, 121], "instanc": [107, 108, 121, 126, 135, 137, 141, 148, 160, 166, 275, 314, 482, 521, 522, 523, 524, 525, 527, 528, 529, 629, 643, 686, 690, 708, 741, 778, 799, 808, 831, 913, 1139], "escap": [107, 108, 121], "doesn": [107, 121, 172, 275, 378, 690, 727, 799, 906, 1129, 1139], "complet": [107, 109, 121, 1120, 1139], "wherea": [107, 109, 121, 492, 493, 690, 732, 739, 799, 1008, 1009, 1139], "would": [107, 108, 121, 299, 439, 473, 481, 510, 620, 690, 818, 969, 1019, 1120, 1139], "prefer": [107, 108, 111, 121, 138, 160, 187, 193, 213, 214, 261, 275, 384, 473, 690, 799, 808, 913, 999, 1139, 1147], "treat": [107, 108, 121, 324, 423, 444, 548, 550, 567, 568, 690, 952, 974, 1061, 1063, 1080, 1081, 1139], "10000": [107, 188, 275, 590], "might": [107, 108, 121, 139, 147, 236, 240, 275, 289, 473, 605, 690, 706, 764, 769, 799, 1121, 1139], "issu": [107, 108, 112, 121, 328, 329, 595, 690, 850, 851, 1109, 1139], "iso8601": [107, 108, 121], "succe": [107, 108, 121], "cpu": [107, 108], "system": [107, 108], "wrongli": 107, "done": [107, 108, 121, 127, 141, 145, 148, 190, 275, 288, 290, 314, 499, 563, 569, 616, 690, 704, 708, 736, 799, 831, 1076, 1082, 1139], "buffer": [107, 108, 109, 158, 187, 275, 907, 1139], "modifi": [107, 108, 121, 139, 141, 160, 180, 187, 248, 275, 300, 365, 376, 548, 555, 556, 567, 690, 808, 892, 903, 913, 1061, 1068, 1069, 1080, 1099, 1101, 1102, 1139], "upper": [107, 108, 109, 158, 172, 175, 275, 319, 320, 404, 461, 606, 617, 634, 635, 637, 638, 649, 650, 677, 678, 690, 727, 730, 799, 843, 907, 928, 997, 1126, 1139], "bound": [107, 108, 158, 172, 175, 275, 319, 320, 321, 404, 439, 460, 461, 467, 606, 617, 634, 635, 637, 638, 649, 650, 677, 678, 690, 727, 730, 799, 843, 844, 907, 928, 969, 990, 997, 1126, 1139], "lossi": [107, 108, 121], "decod": [107, 108], "expens": [107, 108, 119, 121, 125, 126, 136, 138, 172, 173, 175, 176, 187, 193, 213, 214, 215, 241, 242, 275, 289, 473, 518, 690, 727, 728, 730, 731, 770, 799, 808, 913, 999, 1139, 1147], "aggreg": [107, 108, 119, 166, 171, 172, 173, 174, 175, 194, 195, 196, 199, 201, 205, 206, 207, 227, 228, 244, 247, 254, 255, 258, 260, 275, 283, 390, 401, 469, 471, 473, 499, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 611, 612, 613, 614, 629, 630, 631, 632, 643, 648, 656, 657, 660, 661, 665, 673, 674, 690, 727, 728, 730, 731, 741, 742, 743, 744, 747, 748, 751, 765, 766, 773, 780, 781, 784, 786, 799, 925, 1027, 1028, 1029, 1030, 1032, 1035, 1036, 1037, 1139], "nativ": [107, 109, 112, 113, 115, 119, 133, 187, 193, 214, 215, 233, 261, 275, 473, 655, 690, 695, 787, 999, 1139, 1147], "parser": 107, "regard": [107, 626], "sens": [107, 113, 115, 119, 124, 198, 246, 275, 499, 690, 746, 799], "particular": [107, 113, 115, 119, 124, 158, 275, 907, 1139], "usernam": [107, 110, 113, 115, 119, 124], "password": [107, 110, 113, 115, 119, 124], "skip": [107, 108, 112, 119, 121, 126, 244, 275, 809, 999, 1139], "offset": [107, 108, 112, 113, 115, 119, 121, 124, 125, 126, 172, 173, 175, 176, 225, 246, 252, 275, 337, 345, 358, 359, 362, 366, 373, 455, 518, 542, 571, 690, 727, 728, 730, 731, 763, 778, 799, 860, 868, 885, 886, 889, 893, 900, 985, 1055, 1084, 1097, 1139], "row_count": [107, 108, 113, 115, 119, 121, 124, 125, 126], "sampl": [107, 108, 261, 275, 541, 690, 787, 1054, 1139], "estim": [107, 108, 145, 158, 275, 290, 382, 383, 420, 616, 690, 704, 799, 907, 909, 910, 951, 1139], "alloc": [107, 108, 158, 208, 275, 907, 1139], "window": [107, 108, 121, 172, 173, 175, 176, 275, 330, 366, 373, 381, 382, 383, 471, 473, 499, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 624, 667, 668, 690, 727, 728, 730, 731, 799, 852, 893, 900, 908, 909, 910, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1139], "rn": [107, 108, 121], "go": [107, 108, 121, 553, 1066], "nodataerror": [107, 108, 112, 118, 121, 701], "lazili": [107, 108, 121, 122, 123, 124, 125, 126, 472, 690, 712, 799], "glob": [107, 108, 121, 124, 125, 126], "continu": [107, 119, 331, 507, 541, 690, 853, 1017, 1054, 1139], "benchmark": [107, 119], "50000": 108, "batchedcsvread": [108, 701], "upon": 108, "creation": 108, "gather": 108, "next_batch": 108, "big": 108, "interest": 108, "seen_group": 108, "big_fil": 108, "df_current_batch": 108, "partition_df": 108, "partition_bi": [108, 188, 275], "as_dict": [108, 203, 275], "fh": 108, "write_csv": [108, 121, 275], "els": [108, 680], "connectionorcursor": 109, "iter_batch": 109, "cursor": 109, "client": 109, "odbc": 109, "driver": [109, 110], "packag": [109, 112], "establish": 109, "resultset": 109, "manner": 109, "veri": [109, 187, 241, 275, 473, 690, 787], "poor": 109, "trip": 109, "still": [109, 110], "intern": [109, 128, 187, 275], "exact": [109, 133, 135, 137, 224, 275, 582, 583, 584, 603, 690, 1095, 1096, 1097], "incom": 109, "execute_opt": 109, "read_arrow_batches_from_odbc": 109, "read_database_uri": 109, "wide": [109, 170, 197, 244, 275, 745, 799], "snowflak": [109, 110], "variou": [109, 275, 690, 799, 802, 1139], "facil": 109, "initialis": [109, 141, 799, 1146], "flight": 109, "flightsql": 109, "flight_sql": 109, "about": [109, 541, 548, 555, 556, 567, 690, 1054, 1061, 1068, 1069, 1080, 1139, 1147], "notabl": 109, "dremio": 109, "influxdb": 109, "notic": [109, 275, 799, 1139], "dbapi2": 109, "connectorx": [109, 110, 129], "optimis": [109, 193, 215, 261, 275, 799, 999, 1042, 1043, 1139, 1147], "translat": 109, "conn": 109, "url": [109, 126, 555, 557, 1068, 1070], "test_data": 109, "user_conn": 109, "normalised_scor": 109, "uint8": [109, 132, 134, 148, 235, 236, 244, 275, 328, 329, 472, 595, 610, 690, 708, 799, 802, 850, 851, 1109, 1139, 1147], "parameteris": 109, "metric": 109, "alchemy_conn": 109, "variad": 109, "1000": [109, 112, 158, 235, 275, 351, 352, 590, 878, 1118, 1139, 1147], "localhost": 109, "5432": 109, "uid": 109, "usr": 109, "pwd": 109, "max_text_s": 109, "max_binary_s": 109, "do_someth": 109, "partition_on": 110, "partition_rang": 110, "partition_num": 110, "dbreadengin": 110, "raw": 110, "warehous": 110, "role": 110, "transfer": 110, "document": [110, 112, 369, 372, 559, 582, 583, 584, 587, 686, 836, 896, 899, 1072, 1095, 1096, 1097, 1100], "redshift": 110, "mysql": 110, "mariadb": 110, "clickhous": 110, "oracl": 110, "bigqueri": 110, "pleas": [110, 172, 275, 634, 639, 727, 799], "github": 110, "sfu": 110, "connector": 110, "destin": 110, "develop": [110, 135, 137], "read_databas": 110, "explicitli": [110, 133, 135, 141, 472, 672, 690, 700], "test_tabl": 110, "compani": 110, "testdb": 110, "public": [110, 275, 690, 701, 799, 1139], "myrol": 110, "delta_table_opt": [111, 122], "root": [111, 122, 317, 419, 470, 483, 505, 545, 594, 689, 690, 838, 1057, 1139], "absolut": [111, 122, 123, 130, 131, 281, 381, 382, 383, 690, 804, 908, 909, 910, 1139], "avoid": [111, 214, 275, 284, 690], "year": [111, 122, 172, 173, 190, 246, 275, 349, 350, 362, 363, 366, 373, 374, 518, 521, 522, 523, 524, 525, 527, 528, 529, 633, 634, 635, 636, 637, 638, 677, 678, 690, 727, 728, 736, 799, 872, 873, 889, 890, 893, 900, 901], "2021": [111, 122, 148, 153, 170, 172, 246, 275, 582, 652, 708, 727, 799, 802, 864, 865, 873, 897, 947, 1095, 1139], "aw": [111, 122, 126], "googl": [111, 122, 123], "service_account": [111, 122], "service_account_json_absolute_path": [111, 122], "az": [111, 122, 123], "adl": [111, 122, 123], "abf": [111, 122, 123], "azure_storage_account_nam": [111, 122, 123], "azure_storage_account_kei": [111, 122, 123], "without_fil": [111, 122, 123], "track": [111, 122, 123, 193, 275, 461, 1146], "sheet_id": [112, 118], "sheet_nam": [112, 118], "xlsx2csv": [112, 129], "openpyxl": [112, 129], "pyxlsb": [112, 129], "xlsx2csv_option": 112, "read_csv_opt": 112, "noreturn": [112, 118], "spreadsheet": [112, 118, 205, 275, 701], "xlsb": 112, "sheetnam": [112, 118], "nor": [112, 118, 216, 275], "fastest": 112, "read_csv": [112, 121], "refin": 112, "significantli": [112, 1147], "potenti": [112, 121, 124, 125, 126, 187, 213, 215, 275], "unabl": 112, "ocnjunct": 112, "julian": 112, "skip_empty_lin": 112, "influenc": [112, 720, 741, 799], "pipelin": 112, "correct": [112, 118, 382, 383, 420, 522, 523, 524, 525, 526, 527, 529, 541, 690, 740, 741, 799, 909, 910, 951, 1034, 1054, 1139], "known": [112, 135, 461, 782, 787, 991], "better": [112, 193, 236, 261, 275, 473, 561, 690, 787, 1042, 1043, 1074, 1139], "detect": 112, "memory_map": [113, 119, 124], "v2": [113, 124], "greatli": [113, 124], "repeat": [113, 124, 511, 513, 663, 681, 690], "give": [113, 115, 119, 124, 125, 126, 197, 242, 275, 346, 420, 513, 603, 690, 701, 745, 770, 799, 869, 951, 1139], "That": [113, 740, 741, 799], "filenam": 113, "my_fil": 113, "write_ipc": [113, 275], "read_ndjson": 116, "openoffic": 118, "od": 118, "parallelstrategi": [119, 126], "use_statist": [119, 126], "stabl": [119, 147, 152, 216, 240, 275, 466, 690, 706, 745, 764, 769, 799], "row_group": [119, 126], "read_tabl": 119, "scan_parquet": 119, "scan_pyarrow_dataset": [119, 126], "hive": [119, 126], "contribut": [119, 523, 525, 527, 529, 690], "with_column_nam": 121, "push": [121, 124, 125, 126, 127], "down": [121, 124, 125, 126, 127, 393, 690, 919, 1139], "therebi": [121, 124, 125, 126], "realloc": [121, 124, 125, 160, 275, 808, 913, 1139], "headerless": 121, "my_long_fil": 121, "thing": [121, 128, 642, 651], "less": [121, 190, 275, 422, 468, 563, 569, 574, 590, 690, 736, 799, 1076, 1082, 1087, 1103, 1147], "breezah": 121, "languag": [121, 172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "hard": [121, 740, 741, 799], "mydf": 121, "lambda": [121, 144, 166, 193, 204, 205, 261, 275, 289, 381, 382, 383, 461, 469, 470, 471, 473, 629, 630, 643, 654, 655, 665, 690, 740, 741, 749, 787, 799, 809, 908, 909, 910, 991, 999, 1139], "lower": [121, 172, 175, 207, 267, 275, 319, 321, 404, 467, 470, 508, 512, 525, 617, 634, 635, 637, 638, 649, 650, 664, 677, 678, 690, 727, 730, 751, 793, 799, 844, 928, 997, 1018, 1021, 1033, 1126, 1139], "simpli": [121, 499, 629, 643, 690], "idx": [121, 172, 188, 275, 461, 727, 799, 991, 1043, 1139], "uint16": [121, 328, 329, 595, 690, 802, 850, 851, 1109, 1139], "u16": [121, 135, 1147], "eu": [122, 123], "central": [122, 123, 420, 541, 690, 951, 1054, 1139], "iceberg": [123, 701], "pyiceberg": [123, 129], "metadata": [123, 172, 173, 175, 176, 275, 518, 690, 727, 728, 730, 731, 799], "secret": [123, 126], "adlf": 123, "my": [123, 127, 588, 1101], "gcp": [123, 126], "oauth": 123, "token": 123, "ya29": 123, "dr": 123, "afm": 123, "py": 123, "impl": 123, "fsspecfileio": 123, "hive_partit": 126, "retri": 126, "prune": [126, 741, 799], "read_parquet": 126, "east": 126, "allow_pyarrow_filt": 127, "comparison": 127, "dset": 127, "folder": 127, "05": [127, 130, 131, 135, 148, 190, 246, 275, 339, 340, 344, 365, 367, 369, 372, 634, 637, 708, 736, 799, 802, 862, 863, 864, 865, 867, 892, 893, 896, 897, 899, 900], "04": [127, 148, 172, 246, 275, 339, 340, 344, 348, 356, 358, 359, 365, 366, 368, 369, 372, 376, 582, 637, 639, 708, 727, 799, 802, 863, 867, 871, 877, 882, 883, 885, 886, 887, 892, 895, 896, 899, 903, 1095], "seed": [128, 177, 216, 275, 399, 510, 531, 537, 690, 922, 1019, 1039, 1050, 1139], "shuffl": [128, 216, 261, 275, 531, 690, 787, 1039, 1139], "stdout": [129, 141, 170, 275, 484], "platform": 129, "maco": 129, "13": [129, 135, 149, 150, 161, 162, 169, 173, 181, 191, 200, 250, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 275, 284, 481, 483, 518, 585, 624, 629, 632, 643, 674, 679, 690, 709, 710, 721, 722, 728, 738, 775, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 799, 893, 900, 901, 999, 1098, 1139], "arm64": 129, "arm": 129, "64bit": [129, 512, 690, 1021, 1139], "main": [129, 712, 799], "aug": 129, "clang": 129, "14": [129, 135, 193, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 275, 337, 403, 510, 677, 690, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 802, 860, 893], "1403": 129, "adbc_driver_sqlit": 129, "cloudpickl": 129, "23": [129, 172, 173, 275, 339, 343, 347, 355, 363, 366, 375, 518, 521, 522, 524, 527, 528, 529, 636, 639, 676, 677, 678, 690, 727, 728, 799, 802, 862, 870, 1147], "matplotlib": [129, 750, 762, 799], "26": [129, 345, 374, 868], "pydant": 129, "21": [129, 198, 228, 275, 521, 522, 524, 527, 528, 529, 645, 690, 746, 799, 802], "check_row_ord": 130, "check_column_ord": 130, "check_dtyp": [130, 131], "check_exact": [130, 131], "rtol": [130, 131], "atol": [130, 131], "08": [130, 131, 135, 173, 275, 339, 366, 518, 582, 637, 639, 690, 728, 799, 802, 893, 900, 1095], "nans_compare_equ": [130, 131], "categorical_as_str": [130, 131], "assertionerror": [130, 131], "compar": [130, 131, 167, 275, 379, 380, 397, 398, 422, 468, 494, 495, 690, 836, 1041, 1139], "irrespect": 130, "unsort": 130, "exactli": [130, 131, 134, 135, 137, 573, 574, 580, 581, 639, 1049, 1086, 1087, 1093, 1094, 1139], "toler": [130, 131, 190, 275, 736, 799], "inexact": [130, 131], "assert": [130, 131, 133, 135, 137, 173, 275, 701, 728, 799, 802], "share": [130, 131, 158, 275, 907, 1139], "check_nam": 131, "searchstrategi": [132, 134, 135, 137], "null_prob": [132, 135, 137], "percentag": [132, 135, 137, 500, 690, 1013, 1139], "chanc": [132, 135, 137, 1147], "independ": [132, 133, 135, 137], "flag": [132, 275, 533, 548, 555, 556, 567, 690, 718, 740, 741, 799, 1044, 1061, 1068, 1069, 1080, 1139], "hypothesi": [132, 133, 134, 135, 136, 137, 1147], "sampled_from": [132, 1147], "unique_small_int": 132, "ccy": [132, 1147], "gbp": [132, 1147], "eur": [132, 153, 170, 275, 1147], "jpy": [132, 1147], "min_col": [133, 135], "max_col": [133, 135], "standalon": [133, 135, 802], "mincol": 133, "assign": [133, 172, 275, 461, 499, 510, 573, 574, 690, 727, 799, 991, 998, 1019, 1086, 1087, 1139], "minimum": [133, 134, 135, 137, 166, 199, 275, 381, 382, 383, 487, 493, 502, 510, 660, 661, 690, 747, 799, 842, 881, 908, 909, 910, 1009, 1015, 1019, 1139, 1147], "especi": [133, 517, 690, 720, 799, 1026, 1139], "test_unique_xyz": 133, "assert_someth": 133, "punctuat": 133, "test_special_char_colname_init": 133, "inner_dtyp": [134, 137], "select_from": [134, 137], "min_siz": [134, 135, 137, 1147], "max_siz": [134, 135, 137, 1147], "anoth": [134, 171, 275, 330, 338, 460, 477, 480, 690, 726, 777, 799, 852, 861, 913, 990, 1041, 1139], "randomli": 134, "innermost": 134, "2x": 134, "lst": 134, "11330": 134, "24030": 134, "116": 134, "zz": [134, 137], "uint8_pair": [134, 1147], "uint": [134, 1147], "zip": [134, 1147], "131": 134, "176": 134, "149": [134, 1147], "max_data_s": [135, 137], "include_col": 135, "allow_infin": [135, 137], "allowed_dtyp": [135, 137, 1147], "excluded_dtyp": [135, 137], "describ": [135, 170, 275, 1139], "desir": [135, 461, 991], "n_chunk": [135, 137, 275, 808, 913, 1139], "randomis": 135, "onto": 135, "pct": 135, "preced": [135, 802], "disallow": [135, 137], "inf": [135, 137, 296, 331, 406, 410, 507, 603, 690, 815, 853, 924, 932, 937, 997, 1013, 1017, 1126, 1139], "exclud": [135, 137, 172, 275, 326, 329, 404, 690, 727, 799, 928, 947, 1139], "usag": [135, 137, 224, 275, 802, 1049, 1139], "deploi": [135, 137], "characterist": [135, 137], "concret": [135, 137], "test_repr": 135, "isinst": [135, 137, 275], "0x11f561580": 135, "0565": 135, "34715": 135, "5844": 135, "33": [135, 198, 275, 530, 690, 746, 799, 1033, 1139], "076854": 135, "3382": 135, "17": [135, 254, 520, 530, 645, 666, 677, 690, 780, 846, 893, 1028, 1139, 1147], "48662": 135, "7540": 135, "29": [135, 172, 173, 190, 246, 275, 337, 358, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 860, 885, 889, 893, 900], "836271": 135, "4063": 135, "06": [135, 148, 246, 275, 339, 357, 364, 365, 374, 708, 799, 802, 892, 893], "39092": 135, "1889": 135, "41": [135, 528, 690, 1147], "874455": 135, "15836": 135, "1755e": 135, "575050513": 135, "profil": [136, 138, 711, 799], "balanc": [136, 138, 1147], "set_environ": 136, "polars_hypothesis_profil": [136, 138], "1500": 136, "constructor": 137, "normal": [137, 172, 275, 378, 420, 541, 690, 727, 799, 906, 951, 1054, 1139], "test_repr_is_valid_str": 137, "experi": 137, "create_list_strategi": [137, 1147], "polars_max_thread": 139, "behind": 139, "lock": 139, "reason": [139, 471, 690], "temporarili": [139, 141, 172, 173, 175, 176, 275, 518, 690, 727, 728, 730, 731, 799], "pyspark": 139, "udf": [139, 144, 193, 204, 256, 261, 275, 289, 473, 503, 615, 655, 690, 749, 782, 787, 799, 809, 999, 1139], "recommend": [139, 187, 204, 275, 802], "easi": [141, 1147], "restor": 141, "restore_default": 141, "relat": [141, 802], "set_tbl_row": 141, "initi": [141, 629, 643, 680], "whatev": 141, "were": [141, 686], "enter": 141, "advantag": [141, 204, 275], "set_": 141, "set_verbos": 141, "do_various_th": 141, "cleaner": 141, "breviti": 141, "vein": 141, "durat": [141, 190, 246, 275, 337, 344, 345, 348, 352, 354, 356, 361, 368, 376, 601, 634, 635, 637, 638, 677, 678, 690, 736, 799, 802, 860, 867, 868, 871, 878, 880, 883, 888, 895, 900, 903, 1122, 1139], "set_ascii_t": 141, "write_ascii_frame_to_stdout": 141, "sy": 141, "nan_as_nul": 143, "polarsdatafram": 143, "notimplementederror": 143, "num_row": 143, "get_column": [143, 238, 275], "dtypekind": 143, "inference_s": [144, 193, 275], "256": [144, 193, 275, 1013, 1139], "map_row": [144, 275], "tri": [144, 193, 275], "approxim": [145, 146, 275, 290, 616, 690, 704, 705, 799, 1147], "hyperloglog": [145, 275, 290, 616, 690, 704, 799], "algorithm": [145, 275, 290, 616, 690, 704, 799], "cardin": [145, 275, 290, 616, 690, 704, 799], "approx_n_uniqu": [146, 275, 690, 705, 799], "k": [147, 215, 240, 275, 312, 316, 420, 602, 690, 706, 769, 799, 830, 835, 951, 1123, 1139], "intoexpr": [147, 171, 172, 173, 174, 175, 176, 218, 219, 226, 240, 250, 251, 254, 275, 288, 307, 310, 311, 404, 431, 432, 434, 441, 442, 450, 451, 452, 453, 458, 462, 499, 532, 535, 544, 572, 573, 574, 580, 581, 612, 614, 620, 623, 624, 625, 629, 632, 636, 643, 657, 661, 666, 669, 672, 674, 680, 690, 706, 723, 726, 727, 728, 729, 730, 731, 756, 757, 764, 769, 775, 776, 780, 799, 825, 828, 829, 928, 972, 1085, 1086, 1087, 1093, 1094, 1139], "nulls_last": [147, 226, 240, 275, 299, 543, 690, 706, 764, 769, 799, 818, 1139], "smallest": [147, 240, 275, 312, 690, 706, 769, 799, 830, 1139], "largest": [147, 172, 173, 190, 240, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 602, 634, 635, 637, 638, 677, 678, 690, 706, 727, 728, 736, 769, 799, 889, 893, 900, 1123, 1139], "wors": [147, 240, 275, 706, 764, 769, 799], "search": [147, 190, 240, 275, 706, 736, 764, 769, 799], "top_k": [147, 275, 312, 690, 706, 799, 830, 1139], "columnnameorselector": [148, 154, 156, 197, 203, 205, 215, 234, 242, 243, 244, 275, 708, 715, 716, 745, 770, 771, 799], "strict": [148, 275, 308, 314, 548, 551, 566, 582, 583, 584, 587, 690, 708, 799, 826, 831, 1041, 1061, 1064, 1079, 1095, 1096, 1097, 1100, 1139], "due": [148, 172, 173, 190, 215, 246, 275, 284, 314, 345, 362, 366, 373, 419, 505, 518, 521, 522, 523, 524, 525, 527, 528, 529, 594, 634, 635, 637, 638, 677, 678, 690, 708, 727, 728, 736, 799, 831, 868, 889, 893, 900, 1139], "overflow": [148, 275, 314, 328, 329, 566, 595, 690, 708, 799, 831, 850, 851, 1079, 1109, 1139], "2020": [148, 153, 170, 173, 275, 340, 344, 345, 348, 351, 352, 354, 356, 361, 365, 368, 369, 372, 373, 518, 582, 583, 584, 690, 708, 728, 799, 802, 863, 867, 868, 871, 878, 880, 883, 888, 892, 895, 896, 899, 900, 1095, 1096, 1097], "u8": [148, 234, 235, 244, 275, 472, 610, 690, 708, 799, 802, 1116, 1139, 1147], "to_dict": [148, 275, 708, 799], "tempor": [148, 172, 173, 175, 176, 187, 214, 215, 233, 275, 404, 518, 521, 522, 523, 524, 525, 527, 528, 529, 690, 701, 708, 727, 728, 730, 731, 799, 802, 928, 947, 1139], "greater": [149, 190, 275, 397, 398, 541, 574, 690, 736, 799, 1054, 1087, 1139], "cheap": [149, 150, 219, 251, 275, 709, 710, 757, 776, 799, 808, 841, 845, 1139], "deepcopi": [149, 275, 709, 799, 841, 1139], "appl": [151, 180, 189, 209, 211, 232, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 275, 515, 553, 575, 690, 735, 753, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 799, 1066, 1088], "banana": [151, 232, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 275, 515, 553, 575, 690, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794], "orang": [151, 257, 258, 260, 262, 263, 265, 267, 268, 275, 783, 784, 786, 788, 789, 791, 793, 794], "pairwis": [152, 275], "pearson": [152, 275, 420, 541, 626, 690, 951, 1054, 1139], "correl": [152, 275, 626, 667], "coeffici": [152, 275, 541, 690, 1054, 1139], "corrcoef": [152, 275], "percentil": [153, 275, 854, 1139], "summari": [153, 275, 854, 1139], "glimps": [153, 178, 275], "usd": [153, 170, 275, 1147], "null_count": [153, 156, 275, 330, 690, 799, 852, 854, 921, 1139], "266667": [153, 275], "666667": [153, 195, 247, 263, 275, 381, 690, 773, 789, 799], "std": [153, 275, 527, 690, 799, 854, 1035, 1139], "101514": [153, 275], "707107": [153, 275, 382, 527, 690, 909, 1139], "57735": [153, 275], "more_column": [154, 159, 220, 243, 275, 384, 641, 690, 715, 719, 759, 771, 799], "subset": [156, 201, 242, 275, 716, 770, 799], "preserv": [156, 163, 171, 174, 189, 193, 236, 237, 275, 335, 336, 390, 435, 538, 690, 716, 723, 735, 799, 857, 858, 917, 965, 1051, 1121, 1139], "behavior": [156, 275, 460, 716, 799, 808, 853, 990, 1017, 1139], "all_horizont": [156, 275, 611, 716, 799], "is_nul": [156, 275, 690, 716, 799, 1139], "sizeunit": [158, 275, 907, 1139], "heap": [158, 275, 907, 1139], "its": [158, 275, 339, 366, 373, 544, 680, 690, 836, 862, 893, 900, 907, 1139], "bitmap": [158, 275, 907, 1139], "structarrai": [158, 275, 907, 1139], "constant": [158, 173, 275, 337, 387, 690, 728, 799, 860, 907, 914, 1139], "unchang": [158, 275, 601, 690, 740, 741, 782, 787, 799, 907, 1122, 1139], "capac": [158, 224, 275, 907, 1049, 1139], "ffi": [158, 275, 907, 1139], "kb": [158, 275, 907, 1139], "mb": [158, 275, 907, 1139], "gb": [158, 275, 907, 1139], "tb": [158, 275, 907, 1139], "revers": [158, 275, 325, 326, 327, 328, 329, 470, 505, 594, 690, 799, 848, 849, 850, 851, 1139], "1_000_000": [158, 275, 907, 1139], "25888898": [158, 275], "689577102661133": [158, 275], "long": [159, 197, 244, 275, 719, 745, 799], "letter": [159, 259, 269, 275, 384, 556, 641, 690, 719, 785, 795, 799, 802, 1069], "onlin": [160, 275, 808, 913, 1139], "rerun": [160, 275, 808, 913, 1139], "conveni": [160, 275, 808, 913, 1139], "Not": [161, 275, 413, 415, 472, 690, 721, 799], "fillnullstrategi": [162, 275, 389, 690, 722, 799, 916, 1139], "matches_supertyp": [162, 275, 722, 799], "forward": [162, 190, 275, 358, 389, 395, 690, 722, 736, 799, 885, 916, 1139], "consecut": [162, 275, 306, 389, 395, 547, 690, 722, 799, 916, 1060, 1139], "fill_nan": [162, 275, 690, 799, 1139], "OR": [163, 275, 613, 614, 723, 799, 802], "reduct": [166, 275], "supercast": [166, 275], "parent": [166, 275], "rule": [166, 275], "arithmet": [166, 275], "zip_with": [166, 275, 1139], "foo11": [166, 275], "bar22": [166, 275], "null_equ": [167, 275, 1041, 1139], "retriev": [168, 275, 427, 428, 591, 957, 958, 1104], "max_items_per_column": [170, 275], "max_colname_length": [170, 275], "return_as_str": [170, 275, 484], "preview": [170, 275], "cleanli": [170, 275], "few": [170, 275], "exce": [170, 275], "trail": [170, 275, 570, 576, 577, 578, 1083, 1089, 1090, 1091], "ellipsi": [170, 275], "head": [170, 192, 229, 275, 288, 424, 690, 739, 799, 953, 1110, 1139], "tail": [170, 178, 275, 288, 541, 690, 799, 923, 1054, 1139], "more_bi": [171, 174, 203, 226, 275, 544, 690, 726, 729, 764, 799], "groupbi": [171, 205, 275, 289, 473, 615, 655, 690, 799], "consist": [171, 174, 203, 275, 582, 726, 729, 799, 808, 913, 1095, 1139], "regardless": [171, 174, 275, 559, 680, 1072], "agg": [171, 172, 173, 175, 205, 275, 283, 390, 392, 473, 543, 544, 597, 609, 627, 655, 690, 711, 712, 718, 720, 726, 727, 728, 730, 731, 750, 758, 762, 799, 802], "Or": [171, 172, 173, 190, 226, 246, 254, 275, 499, 518, 544, 634, 635, 637, 638, 677, 678, 680, 690, 726, 727, 728, 736, 764, 780, 799], "index_column": [172, 173, 175, 176, 275, 518, 690, 727, 728, 730, 731, 799], "timedelta": [172, 173, 175, 176, 190, 246, 275, 343, 362, 363, 366, 373, 375, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 730, 731, 736, 799, 802, 874, 876, 881, 889, 893, 900, 1008, 1009, 1139], "period": [172, 173, 175, 176, 222, 223, 275, 366, 373, 381, 382, 383, 454, 500, 518, 534, 535, 634, 635, 637, 638, 677, 678, 690, 727, 728, 730, 731, 760, 761, 799, 893, 900, 908, 909, 910, 984, 1013, 1046, 1047, 1139], "include_boundari": [172, 175, 275, 727, 730, 799], "closedinterv": [172, 173, 175, 176, 275, 404, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 730, 731, 799, 928, 1139], "label": [172, 275, 331, 507, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 690, 727, 750, 799, 853, 1017, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1139], "start_bi": [172, 175, 275, 727, 730, 799], "startbi": [172, 175, 275, 727, 730, 799], "check_sort": [172, 173, 175, 176, 275, 518, 690, 727, 728, 730, 731, 799], "dynamicgroupbi": [172, 175, 275], "member": [172, 275, 727, 799, 936, 1139], "look": [172, 275, 307, 461, 471, 690, 727, 799, 825], "descript": [172, 275, 727, 799], "ascend": [172, 173, 175, 176, 275, 518, 522, 523, 524, 525, 527, 529, 690, 727, 728, 730, 731, 799], "dynam": [172, 175, 275, 461, 521, 522, 523, 524, 525, 527, 528, 529, 690, 727, 730, 799, 991], "matter": [172, 173, 175, 176, 187, 214, 215, 233, 275, 518, 690, 727, 728, 730, 731, 799], "interv": [172, 173, 175, 176, 246, 275, 331, 366, 373, 404, 507, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 730, 731, 799, 853, 866, 869, 870, 877, 879, 882, 884, 887, 890, 891, 893, 898, 900, 901, 928, 1017, 1139], "_lower_bound": [172, 175, 275, 727, 730, 799], "_upper_bound": [172, 175, 275, 727, 730, 799], "harder": [172, 175, 275, 727, 730, 799], "inclus": [172, 173, 175, 176, 275, 404, 518, 521, 522, 523, 524, 525, 527, 528, 529, 572, 573, 617, 634, 635, 637, 638, 649, 650, 677, 678, 690, 727, 728, 730, 731, 799, 928, 1085, 1086, 1139], "datapoint": [172, 175, 275, 727, 730, 799], "boundari": [172, 275, 319, 320, 321, 373, 690, 727, 799, 842, 843, 844, 900, 924, 1139], "mondai": [172, 175, 275, 373, 375, 727, 730, 799, 900, 902], "tuesdai": [172, 175, 275, 727, 730, 799], "wednesdai": [172, 175, 275, 727, 730, 799], "thursdai": [172, 175, 275, 727, 730, 799], "fridai": [172, 175, 275, 727, 730, 799], "saturdai": [172, 175, 275, 727, 730, 799], "sundai": [172, 175, 275, 375, 727, 730, 799, 902], "earliest": [172, 175, 275, 365, 366, 373, 582, 584, 636, 727, 730, 799, 892, 893, 900, 1095, 1097], "weekli": [172, 175, 275, 373, 727, 730, 799, 900], "week": [172, 173, 175, 190, 246, 275, 362, 366, 373, 375, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 639, 677, 678, 690, 727, 728, 730, 736, 799, 802, 889, 893, 900, 902], "sorted": [172, 173, 175, 176, 275, 518, 690, 727, 728, 730, 731, 799], "verifi": [172, 173, 175, 176, 275, 518, 690, 727, 728, 730, 731, 799], "incorrectli": [172, 173, 175, 176, 275, 461, 518, 690, 727, 728, 730, 731, 799], "incorrect": [172, 173, 175, 176, 275, 376, 518, 533, 690, 727, 728, 730, 731, 782, 787, 799, 903, 1044, 1139], "group_by_rol": [172, 176, 275, 518, 521, 522, 523, 524, 525, 527, 528, 529, 690, 727, 731, 799], "re": [172, 236, 275, 358, 359, 727, 799, 885, 886, 1146], "come": [172, 275, 358, 359, 420, 690, 702, 727, 798, 799, 885, 886, 951, 1139], "1d": [172, 173, 190, 246, 275, 338, 348, 356, 362, 366, 373, 376, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 639, 652, 677, 678, 690, 727, 728, 736, 799, 802, 861, 869, 871, 876, 883, 889, 893, 898, 900], "set_index": [172, 275, 727, 799], "resampl": [172, 275, 727, 799], "reset_index": [172, 275, 727, 799], "though": [172, 275, 686, 727, 799], "unlik": [172, 275, 727, 799], "evenli": [172, 275, 727, 799], "upsampl": [172, 275, 727, 799], "1n": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "1u": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "microsecond": [172, 173, 187, 190, 214, 215, 233, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 636, 637, 638, 639, 676, 677, 678, 690, 727, 728, 736, 750, 799, 802, 889, 893, 900], "1m": [172, 173, 190, 246, 275, 351, 352, 354, 361, 362, 366, 368, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 878, 880, 888, 889, 893, 895, 900], "minut": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 636, 637, 638, 639, 676, 677, 678, 690, 727, 728, 736, 799, 802, 889, 893, 900], "1h": [172, 173, 190, 246, 275, 345, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 868, 870, 889, 893, 900], "hour": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 636, 637, 638, 639, 676, 677, 678, 690, 727, 728, 736, 799, 802, 889, 893, 900], "1w": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "1mo": [172, 173, 190, 246, 275, 340, 344, 358, 359, 362, 365, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 863, 867, 884, 885, 886, 889, 890, 891, 892, 893, 900, 901], "month": [172, 173, 190, 246, 275, 343, 358, 359, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 633, 634, 635, 636, 637, 638, 639, 677, 678, 690, 727, 728, 736, 799, 866, 885, 886, 889, 893, 900], "1q": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "quarter": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "1y": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "1i": [172, 173, 190, 246, 275, 362, 518, 521, 522, 523, 524, 525, 527, 528, 529, 690, 727, 728, 736, 799, 889], "3d12h4m25": [172, 173, 190, 246, 275, 366, 373, 518, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 893, 900], "suffix": [172, 173, 189, 190, 218, 246, 250, 254, 275, 284, 310, 362, 366, 373, 413, 415, 416, 417, 470, 499, 505, 515, 518, 521, 522, 523, 524, 525, 527, 528, 529, 553, 581, 634, 635, 637, 638, 677, 678, 690, 727, 728, 735, 736, 756, 775, 777, 780, 799, 802, 828, 889, 893, 900, 1066, 1094], "_satur": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "satur": [172, 173, 190, 246, 275, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 893, 900], "28": [172, 173, 190, 232, 246, 275, 282, 362, 365, 366, 373, 376, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 727, 728, 736, 799, 889, 892, 893, 900, 903, 1147], "correspond": [172, 173, 190, 236, 246, 275, 350, 362, 366, 373, 473, 510, 517, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 677, 678, 690, 711, 727, 728, 736, 799, 873, 889, 893, 900, 1019, 1026, 1139], "daylight": [172, 173, 190, 246, 275, 337, 345, 362, 366, 373, 518, 521, 522, 523, 524, 525, 527, 528, 529, 634, 635, 637, 638, 639, 677, 678, 690, 727, 728, 736, 799, 868, 889, 893, 900], "10i": [172, 173, 275, 518, 690, 727, 728, 799], "datetime_rang": [172, 275, 338, 340, 344, 348, 351, 352, 354, 356, 358, 359, 361, 362, 365, 366, 368, 373, 376, 521, 522, 524, 527, 528, 529, 634, 690, 727, 799, 860, 861, 863, 867, 868, 869, 870, 871, 876, 877, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 892, 893, 895, 898, 900], "30m": [172, 275, 366, 373, 727, 799, 893, 900], "_lower_boundari": [172, 275, 727, 799], "_upper_boundari": [172, 275, 727, 799], "lower_bound": [172, 275, 319, 321, 404, 690, 727, 799, 842, 844, 928, 1126, 1139], "upper_bound": [172, 275, 319, 320, 404, 461, 690, 727, 799, 842, 843, 928, 997, 1139], "bys": [172, 275, 727, 799], "int_rang": [172, 244, 261, 275, 617, 727, 741, 787, 799], "2i": [172, 275, 727, 799], "3i": [172, 275, 727, 799], "a_agg_list": [172, 275, 727, 799], "rollinggroupbi": [173, 176, 275], "roll": [173, 176, 275, 358, 359, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 624, 667, 668, 690, 728, 731, 799, 885, 886, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1139], "group_by_dynam": [173, 175, 275, 728, 730, 799], "t_0": [173, 275, 518, 521, 522, 523, 524, 525, 527, 528, 529, 690, 728, 799], "t_1": [173, 275, 518, 521, 522, 523, 524, 525, 527, 528, 529, 690, 728, 799], "t_n": [173, 275, 518, 521, 522, 523, 524, 525, 527, 528, 529, 690, 728, 799], "43": [173, 275, 329, 518, 528, 690, 728, 799], "strptime": [173, 275, 365, 518, 690, 728, 799, 892], "set_sort": [173, 190, 246, 275, 518, 690, 728, 736, 799, 1139], "2d": [173, 236, 275, 362, 518, 652, 690, 728, 799, 860, 866], "sum_a": [173, 275, 518, 690, 728, 799], "min_a": [173, 275, 518, 690, 728, 799], "max_a": [173, 275, 518, 690, 728, 799], "group_bi": [174, 201, 205, 274, 275, 283, 390, 392, 471, 473, 543, 544, 597, 609, 627, 655, 690, 711, 712, 718, 720, 729, 750, 762, 798, 799, 802], "seed_1": [177, 275, 399, 690, 922, 1139], "seed_2": [177, 275, 399, 690, 922, 1139], "seed_3": [177, 275, 399, 690, 922, 1139], "hash": [177, 275, 690, 1139], "u64": [177, 275, 399, 512, 690, 750, 799, 922, 1139], "10783150408545073287": [177, 275], "1438741209321515184": [177, 275], "10047419486152048166": [177, 275], "2047317070637311557": [177, 275], "ab": [178, 192, 229, 250, 275, 591, 592, 690, 775, 799, 923, 953, 1110, 1139], "grown": [180, 275], "intermedi": [182, 275, 734, 799, 1147], "linear": [182, 207, 267, 275, 403, 429, 476, 508, 525, 624, 625, 664, 690, 734, 751, 793, 799, 927, 959, 1018, 1033, 1139], "mask": [183, 185, 275, 308, 405, 407, 408, 411, 412, 418, 501, 502, 548, 551, 690, 826, 917, 921, 928, 930, 933, 934, 939, 940, 948, 1014, 1015, 1042, 1061, 1064, 1130, 1139], "visual": [183, 185, 275], "scalar": [186, 193, 213, 275, 532, 615, 652, 655, 690, 950, 1040, 1139], "With": [186, 275, 521, 522, 523, 524, 525, 527, 528, 529, 690, 950, 1139], "buffer_s": [187, 275], "fit": [187, 224, 244, 275, 536, 666, 690, 1048, 1049, 1139], "signific": [187, 193, 275, 289, 473, 690, 999, 1139], "4x": [187, 275], "materialis": [187, 188, 213, 214, 215, 275], "rows_by_kei": [187, 214, 275], "awar": [187, 214, 215, 233, 275, 720, 799, 1097], "iter_row": [188, 213, 214, 215, 275], "17_500": [188, 275], "klmnoopqrstuvwxyz": [188, 275], "__name__": [188, 275], "7500": [188, 275], "15_000": [188, 275], "record_batch": [188, 275], "to_arrow": [188, 275, 1139], "to_batch": [188, 275], "date32": [188, 275], "large_str": [188, 231, 237, 275], "15000": [188, 275], "2500": [188, 275], "left_on": [189, 190, 245, 275, 735, 736, 772, 799], "right_on": [189, 190, 245, 275, 735, 736, 772, 799], "_right": [189, 190, 275, 735, 736, 799], "joinvalid": [189, 275, 735, 799], "semi": [189, 275, 735, 799], "anti": [189, 275, 735, 787, 799, 1042, 1043, 1139], "cross": [189, 275, 373, 735, 799, 900], "many_to_mani": [189, 275, 735, 799], "one_to_on": [189, 275, 735, 799], "one_to_mani": [189, 275, 735, 799], "many_to_on": [189, 275, 735, 799], "join_asof": [189, 275, 735, 799], "other_df": [189, 275], "by_left": [190, 275, 736, 799], "by_right": [190, 275, 736, 799], "asofjoinstrategi": [190, 275, 736, 799], "allow_parallel": [190, 275, 735, 736, 799], "force_parallel": [190, 275, 735, 736, 799], "asof": [190, 275, 736, 799], "rather": [190, 275, 484, 507, 517, 590, 690, 736, 799, 1017, 1026, 1103, 1139], "asof_join": [190, 275], "distanc": [190, 275, 736, 799, 924, 1139], "plan": [190, 191, 275, 707, 711, 714, 718, 725, 735, 736, 752, 758, 762, 779, 799], "forc": [190, 193, 261, 275, 735, 736, 787, 799, 999, 1139], "gdp": [190, 275, 736, 799], "2016": [190, 275, 736, 799], "2017": [190, 275, 736, 799], "2018": [190, 275, 365, 736, 799, 892], "2019": [190, 275, 736, 799], "jan": [190, 275, 736, 799], "1st": [190, 275, 736, 799], "4164": [190, 275, 736, 799], "4411": [190, 275, 736, 799], "4566": [190, 275, 736, 799], "4696": [190, 275, 736, 799], "popul": [190, 275, 736, 799], "12th": [190, 275, 736, 799], "82": [190, 275, 736, 799], "66": [190, 275, 528, 610, 690, 736, 799, 1033, 1139], "83": [190, 275, 736, 799], "52": [190, 250, 275, 374, 530, 690, 736, 775, 799], "request": [191, 275], "describe_plan": [191, 275], "unoptim": [191, 275], "describe_optimized_plan": [191, 275], "show_graph": [191, 275, 799], "un": [191, 275], "graphviz": [191, 275, 762, 799], "much": [193, 244, 261, 275, 330, 460, 473, 560, 561, 655, 690, 787, 852, 990, 999, 1073, 1074, 1139], "_significantly_": [193, 261, 275, 999, 1139], "intens": [193, 261, 275, 499, 690, 999, 1139], "materi": [193, 261, 275, 711, 750, 787, 799, 802, 999, 1139], "parallelis": [193, 261, 275, 999, 1139], "achiev": [193, 261, 275, 473, 561, 690, 853, 999, 1017, 1074, 1139], "best": [193, 261, 275, 473, 690, 999, 1139], "black": [193, 275, 307, 309, 310, 311], "arbitrarili": [193, 275], "rearrang": [193, 275], "transform": [193, 275, 471, 586, 588, 589, 690], "lru_cach": [193, 275, 473, 690, 999, 1139], "column_1": [193, 241, 275], "axi": [194, 195, 197, 199, 228, 275, 618, 619, 745, 799], "null_strategi": [195, 228, 275], "nullstrategi": [195, 228, 275], "propag": [195, 228, 275, 380, 492, 493, 495, 690, 1008, 1009, 1139], "spam": [195, 275, 556, 1069], "id_var": [197, 275, 745, 799], "value_var": [197, 275, 745, 799], "variable_nam": [197, 275, 745, 799], "value_nam": [197, 275, 745, 799], "unpivot": [197, 275, 745, 799], "massag": [197, 275, 745, 799], "measur": [197, 275, 745, 799], "merg": [198, 275, 746, 799], "caller": [198, 275, 461, 741, 746, 782, 787, 799], "respons": [198, 275, 746, 799], "steve": [198, 275, 746, 799], "elis": [198, 275, 746, 799], "bob": [198, 275, 746, 799], "ag": [198, 275, 746, 799], "44": [198, 275, 334, 690, 746, 799], "anna": [198, 275, 746, 799], "megan": [198, 275, 746, 799], "thoma": [198, 275, 746, 799], "what": [201, 275, 1120, 1129, 1139], "pack": [201, 275], "expr_unique_subset": [201, 275], "df_nuniqu": [201, 275], "df_agg_nuniqu": [201, 275], "include_kei": [203, 215, 275], "offer": [204, 275, 503, 690, 749, 799], "fulli": [204, 216, 275], "cast_str_to_int": [204, 275, 749, 799], "col_nam": [204, 275, 749, 799], "tdf": [204, 275, 749, 799], "aggregate_funct": [205, 275], "pivotagg": [205, 275], "sort_column": [205, 275], "section": [205, 275, 548, 555, 556, 567, 634, 635, 637, 638, 677, 678, 1061, 1068, 1069, 1080], "predefin": [205, 275], "median": [205, 275, 389, 523, 690, 777, 799, 1031, 1139], "predict": [205, 208, 246, 275], "transpos": [205, 275], "discoveri": [205, 275], "col1": [205, 241, 275, 799, 1147], "col2": [205, 241, 275, 799, 1147], "col3": [205, 275, 1147], "tanh": [205, 275, 690, 1139], "998347": [205, 275], "964028": [205, 275], "999954": [205, 275], "unique_column_valu": [205, 275], "interpol": [207, 267, 275, 389, 476, 508, 525, 664, 690, 751, 793, 799, 1018, 1033, 1139], "rollinginterpolationmethod": [207, 267, 275, 508, 525, 664, 690, 751, 793, 799, 1018, 1033, 1139], "midpoint": [207, 267, 275, 508, 525, 664, 690, 751, 793, 799, 1018, 1033, 1139], "by_pred": [213, 275], "accord": [213, 275, 472, 507, 634, 635, 637, 638, 677, 678, 690, 873, 1017, 1139], "mutual": [213, 275], "exclus": [213, 275, 610, 617, 649, 650, 690], "clariti": [213, 275], "toomanyrowsreturnederror": [213, 275, 701], "norowsreturnederror": [213, 275, 701], "inherit": [213, 275], "rowserror": [213, 275, 701], "high": [215, 275, 507, 690, 1017, 1139], "cost": [215, 275], "reoconstruct": [215, 275], "defaultdict": [215, 275], "assum": [215, 275, 740, 741, 782, 787, 799], "with_replac": [216, 275, 531, 690, 1039, 1139], "named_expr": [218, 219, 250, 251, 275, 669, 672, 756, 757, 775, 776, 799], "threshold": [218, 275, 756, 799], "set_auto_structifi": [218, 250, 275, 756, 775, 799], "auto_structifi": [218, 250, 275, 756, 775, 799], "is_odd": [218, 275, 756, 799], "_is_odd": [218, 275, 756, 799], "sequenti": [219, 251, 275, 757, 776, 799], "shift_and_fil": [222, 275, 690, 799, 1139], "fill_valu": [223, 244, 275, 535, 690, 761, 799, 1047, 1139], "shift": [223, 275, 333, 433, 500, 535, 624, 690, 761, 799, 855, 963, 1013, 1047, 1139], "shrink": [224, 275, 536, 690, 1048, 1049, 1139], "hold": [224, 275], "ddof": [227, 247, 275, 527, 529, 546, 608, 626, 667, 668, 671, 679, 690, 765, 773, 799, 1035, 1037, 1058, 1128, 1139], "deviat": [227, 275, 382, 527, 546, 671, 690, 765, 799, 909, 1058, 1139], "degre": [227, 247, 275, 509, 527, 529, 546, 608, 619, 626, 667, 668, 671, 679, 690, 765, 773, 799, 1035, 1037, 1058, 1128, 1139], "freedom": [227, 247, 275, 527, 529, 546, 608, 626, 667, 668, 671, 679, 690, 765, 773, 799, 1035, 1037, 1058, 1128, 1139], "divisor": [227, 247, 275, 527, 529, 546, 608, 626, 667, 668, 671, 679, 690, 765, 773, 799, 1035, 1037, 1058, 1128, 1139], "816497": [227, 275], "16a": [228, 275], "27b": [228, 275], "38c": [228, 275], "nth": [230, 275, 574, 598, 690, 768, 799, 1087, 1112, 1139], "mostli": [231, 275, 390, 690], "categoricaltyp": [231, 275], "as_seri": [232, 275, 853, 1017, 1139], "fruit": [232, 275, 515, 553, 575, 690, 1066, 1088], "car": [232, 275, 515, 690], "beetl": [232, 275, 515, 690], "audi": [232, 275, 515, 690], "300": [232, 275, 1029, 1030, 1032, 1139], "drop_first": [234, 275], "dummi": [234, 275, 1116, 1139], "foo_1": [234, 275], "foo_2": [234, 275], "bar_3": [234, 275], "bar_4": [234, 275], "ham_a": [234, 275], "ham_b": [234, 275], "instantiat": [235, 275, 1118, 1139], "from_repr": [235, 275, 1118, 1139], "df_from_str_repr": [235, 275], "eval": [235, 275, 640, 1118, 1139], "indexord": [236, 275], "fortran": [236, 275], "downstream": [236, 275, 533, 690, 1044, 1139], "applic": [236, 275, 473, 521, 522, 523, 524, 525, 527, 528, 529, 690], "prevent": [236, 275, 284, 328, 329, 419, 595, 690, 799, 850, 851, 1109, 1139], "reshap": [236, 275, 437, 690, 967, 1139], "ll": [236, 275], "u1": [236, 275], "f4": [236, 275], "view": [236, 275, 473, 690, 1120, 1139], "recarrai": [236, 275], "rec": [236, 275], "use_pyarrow_extension_arrai": [237, 275, 1121, 1139], "extens": [237, 275, 1121, 1139], "trigger": [237, 275, 1121, 1139], "sent": [237, 275, 1120, 1121, 1139], "pandas_df1": [237, 275], "pandas_df2": [237, 275], "pandas_df2_pa": [237, 275], "na": [237, 275, 575, 1121, 1139], "four": [239, 275], "five": [239, 275, 1147], "bottom_k": [240, 275, 602, 690, 769, 799, 1123, 1139], "include_head": [241, 275], "header_nam": [241, 275], "column_nam": [241, 275], "perhap": [241, 275], "column_2": [241, 275], "name_gener": [241, 275], "base_nam": [241, 275], "my_column_": [241, 275], "my_column_0": [241, 275], "my_column_1": [241, 275], "my_column_2": [241, 275], "new_id": [241, 275], "uniquekeepstrategi": [242, 275, 770, 799], "kept": [242, 275, 770, 799], "decompos": [243, 275, 771, 799], "t_a": [243, 275, 771, 799], "t_b": [243, 275, 771, 799], "t_c": [243, 275, 771, 799], "t_d": [243, 275, 771, 799], "womp": [243, 275, 771, 799], "t_": [243, 275, 771, 799], "t_struct": [243, 275, 771, 799], "step": [244, 275, 617, 649, 650], "unstackdirect": [244, 275], "pivot": [244, 275], "phase": [244, 275], "subject": [244, 275], "ascii_uppercas": [244, 275], "h": [244, 275, 282, 369, 372, 536, 582, 584, 587, 690, 1095, 1097, 1100], "x_0": [244, 275, 381, 382, 383, 690, 908, 909, 910, 1139], "x_1": [244, 275], "y_0": [244, 275, 381, 382, 383, 690, 908, 909, 910, 1139], "y_1": [244, 275], "z_0": [244, 275], "z_1": [244, 275], "syntact": [245, 275, 611, 613, 631, 641, 642, 646, 651, 656, 660, 663, 664, 669, 673, 681, 772, 799, 1057, 1139], "sugar": [245, 275, 611, 613, 631, 641, 642, 646, 651, 656, 660, 663, 664, 669, 673, 681, 772, 799, 1057, 1139], "coalesc": [245, 275, 582, 772, 799, 1095], "400": [245, 275, 772, 799, 1029, 1030, 1032, 1139], "600": [245, 275, 772, 799, 802], "700": [245, 275, 772, 799], "new_df": [245, 275, 772, 799], "time_column": [246, 275], "frequenc": [246, 275], "date_rang": [246, 275, 343, 346, 363, 371, 375, 866, 884, 890, 891, 901, 902], "forward_fil": [246, 275, 326, 329, 690], "varianc": [247, 275, 383, 420, 529, 608, 679, 690, 773, 799, 910, 951, 1037, 1128, 1139], "grow": [248, 275], "not_": [250, 275, 414, 690, 775, 799, 1139], "not_c": [250, 275, 775, 799], "diff": [250, 275, 344, 348, 352, 354, 356, 361, 368, 450, 690, 775, 799, 867, 871, 878, 880, 883, 888, 895, 980, 1139], "_diff": [250, 275, 775, 799], "row_nr": [252, 275, 472, 521, 522, 524, 527, 528, 529, 690, 778, 799, 1043, 1139], "named_agg": [254, 780], "_sum": [254, 780], "_mean_squar": [254, 780], "b_sum": [254, 780], "c_mean_squar": [254, 780], "sub": [256, 261, 302, 303, 304, 690, 821, 822, 823], "map_group": [256, 615, 782], "deem": [257, 627, 783], "nr": [259, 269, 785, 795], "triangl": [261, 787], "group_df": [261, 787], "maxim": [262, 297, 690, 788, 816, 1139], "833333": [263, 789], "minim": [265, 298, 428, 536, 544, 690, 791, 817, 958, 1003, 1048, 1139], "overview": [275, 690, 701, 799, 1139, 1147], "frameinittyp": [275, 799], "entri": [275, 799, 1146], "mydatafram": 275, "df4": 275, "df5": 275, "df6": 275, "approx_uniqu": [275, 799], "corr": 275, "drop_in_plac": 275, "drop_nul": [275, 335, 690, 799, 857, 1139], "estimated_s": [275, 1139], "explod": [275, 392, 499, 514, 690, 799, 1023, 1139], "find_idx_by_nam": 275, "fold": [275, 482, 623, 629, 630, 665], "frame_equ": [275, 373], "groupby_dynam": [275, 799], "groupby_rol": [275, 799], "hash_row": 275, "hstack": 275, "insert_at_idx": 275, "is_dupl": [275, 690, 1139], "is_empti": [275, 1139], "is_uniqu": [275, 690, 1139], "iter_slic": 275, "melt": [275, 799], "merge_sort": [275, 799], "n_uniqu": [275, 690, 1139], "pipe": [275, 690, 799], "quantil": [275, 507, 525, 690, 799, 1017, 1033, 1139], "replace_at_idx": 275, "select_seq": [275, 799], "shrink_to_fit": [275, 1139], "take_everi": [275, 690, 799, 1139], "to_dummi": [275, 1139], "to_numpi": [275, 471, 690, 1139], "to_panda": [275, 1139], "to_struct": [275, 556], "unnest": [275, 331, 507, 516, 556, 557, 573, 574, 592, 690, 799, 853, 991, 1017, 1025, 1086, 1087, 1139], "unstack": 275, "with_columns_seq": [275, 799], "write_avro": 275, "write_databas": 275, "write_delta": 275, "write_excel": 275, "write_ipc_stream": 275, "write_json": [275, 799], "write_parquet": 275, "cumprod": [282, 690, 1139], "ghi": [282, 556, 690, 802, 1069], "94": [283, 690], "map_alia": [284, 690], "to_uppercas": [284, 557, 690], "ignore_nul": [285, 287, 381, 382, 383, 611, 613, 690, 806, 807, 908, 909, 910, 1129, 1139], "confus": [285, 413, 415, 690], "kleen": [285, 287, 611, 613, 690, 806, 807, 1139], "bitwis": [286, 498, 610, 611, 612, 613, 614, 690], "upcast": [288, 690], "skip_nul": [289, 473, 690, 809, 999, 1139], "pass_nam": [289, 473, 690], "mapelementsstrategi": [289, 473, 690], "thread_loc": [289, 473, 690], "map_el": [289, 471, 610, 690, 809, 1139], "unknown": [289, 472, 473, 555, 652, 690, 1068], "stage": [289, 690], "code": [289, 307, 309, 310, 311, 473, 533, 690, 720, 738, 799, 1044, 1139], "gil": [289, 473, 690], "invers": [291, 292, 293, 294, 295, 296, 690, 810, 811, 812, 813, 814, 815, 1139], "cosin": [291, 292, 322, 323, 471, 690, 810, 811, 846, 847, 1139], "570796": [291, 293, 690, 810, 812, 1139], "hyperbol": [292, 294, 296, 323, 540, 600, 690, 811, 813, 815, 847, 1053, 1114, 1139], "sine": [293, 294, 471, 539, 540, 690, 812, 813, 1052, 1053, 1139], "881374": [294, 690, 813, 1139], "tangent": [295, 296, 599, 600, 690, 814, 815, 1113, 1114, 1139], "785398": [295, 618, 619, 690, 814, 1139], "arg_wher": [300, 690], "seen": [306, 395, 690], "substr": [307, 310, 311, 548, 553, 567, 568, 572, 573, 574, 575, 802, 825, 828, 829, 1061, 1066, 1080, 1081, 1085, 1086, 1087, 1088], "ends_with": [307, 311, 548, 575, 802, 1088], "yellow": [307, 309, 310, 311], "x00": [307, 309, 310, 311], "xff": [307, 309, 310, 311], "contains_with_lit": 307, "contains_with_expr": 307, "transferencod": [308, 309, 551, 552, 826, 827, 1064, 1065], "hex": [308, 309, 551, 552, 566, 826, 827, 1064, 1065, 1079], "base64": [308, 309, 551, 552, 826, 827, 1064, 1065], "code_encoded_hex": 309, "000000": 309, "ffff00": 309, "0000ff": 309, "anywher": [310, 311, 582, 583, 584, 1095, 1096, 1097], "ends_with_lit": 310, "ends_with_expr": 310, "starts_with_lit": 311, "starts_with_expr": 311, "intoexprcolumn": [312, 319, 320, 321, 454, 577, 578, 579, 602, 617, 634, 635, 637, 638, 649, 650, 677, 678, 690, 830, 842, 843, 844, 984, 1090, 1091, 1092, 1123, 1139], "complex": [312, 330, 602, 690, 830, 852, 1123, 1139], "frac": [312, 381, 382, 383, 541, 602, 690, 830, 908, 909, 910, 1054, 1123, 1139], "supersed": [313, 690], "to_fram": [315, 346, 366, 371, 373, 582, 853, 1017, 1042, 1043, 1086, 1087, 1095, 1139], "categoricalord": [316, 835], "lexic": [316, 802, 835, 837], "259921": [317, 690, 838, 1139], "587401": [317, 690], "numericliter": [319, 320, 321, 690, 842, 843, 844, 1139], "temporalliter": [319, 320, 321, 690, 842, 843, 844, 1139], "foo_clip": [319, 320, 321, 690], "clip": [320, 321, 690, 843, 844, 1139], "543081": [323, 690, 847, 1139], "cumul": [325, 326, 327, 328, 329, 629, 630, 631, 632, 690, 848, 849, 850, 851, 1139], "a_revers": [325, 326, 327, 328, 329, 470, 515, 594, 690], "value_cummax": [326, 690], "value_cummax_all_fil": [326, 690], "value_cumsum": [329, 690], "value_cumsum_all_fil": [329, 690], "min_period": [330, 381, 382, 383, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 667, 668, 690, 852, 908, 909, 910, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1139], "slide": [330, 690, 852, 1139], "slot": [330, 333, 433, 690, 852, 855, 963, 1139], "realli": [330, 690, 852, 1139], "visit": [330, 690, 852, 1139], "left_clos": [331, 507, 690, 853, 1017, 1139], "include_break": [331, 507, 690, 853, 1017, 1139], "bin": [331, 507, 566, 610, 683, 690, 853, 924, 1017, 1079, 1133, 1139], "discret": [331, 333, 378, 433, 450, 507, 690, 853, 855, 906, 924, 963, 980, 1017, 1139], "plu": [331, 466, 690, 853, 996, 1017, 1139], "endpoint": [331, 507, 521, 522, 523, 524, 525, 527, 528, 529, 690, 853, 1017, 1139], "observ": [331, 381, 382, 383, 507, 690, 853, 908, 909, 910, 1017, 1139], "fall": [331, 507, 517, 690, 853, 928, 1017, 1026, 1139], "qcut": [331, 690, 853, 1139], "breakpoint": [331, 507, 690, 853, 1017, 1139], "brk": [331, 507, 690], "foo_bin": [331, 507, 690], "radian": [332, 618, 690], "pi": [332, 690, 846, 1052, 1113, 1139], "720": [332, 509, 690], "540": [332, 509, 690], "360": [332, 509, 690], "180": [332, 509, 690], "null_behavior": [333, 433, 690, 855, 963, 1139], "nullbehavior": [333, 433, 690, 855, 963, 1139], "th": [333, 433, 450, 541, 690, 855, 963, 980, 1054, 1139], "drop_nan": [336, 690, 858, 1139], "utc": [337, 340, 345, 365, 582, 584, 802, 860, 863, 868, 892, 1095, 1097], "usual": [337, 860], "vari": [337, 860, 1147], "rare": [337, 860], "countri": [337, 860], "switch": [337, 860], "samoa": [337, 860], "apia": [337, 860], "did": [337, 860], "2011": [337, 860], "dst_offset": [337, 373, 860, 900], "2012": [337, 860], "replace_time_zon": [337, 345, 864, 865, 897], "pacif": [337, 860], "11h": [337, 860], "13h": [337, 860], "lose": [338, 861], "2001": [338, 343, 346, 347, 349, 355, 357, 362, 363, 364, 366, 371, 373, 374, 375, 376, 521, 522, 524, 527, 528, 529, 582, 690, 802, 861, 866, 869, 870, 872, 874, 875, 876, 877, 879, 881, 882, 884, 887, 889, 890, 891, 893, 898, 900, 901, 902, 903, 904, 1095], "time_unit_m": [338, 861], "time_unit_n": [338, 861], "naiv": [339, 862, 1097], "compon": [339, 367, 582, 584, 639, 862, 894, 1095, 1097], "resolv": 339, "tm": [339, 802], "456000": [339, 862], "101000": 339, "456": [339, 802, 862, 1117, 1139], "07": [339, 365, 366, 373, 582, 634, 637, 645, 802, 862, 892, 1095], "101": [339, 566, 1079, 1147], "d1": 339, "d2": 339, "d3": 339, "europ": [340, 345, 365, 373, 863, 868, 892, 900], "london": [340, 345, 365, 373, 863, 868, 892, 900], "gmt": [340, 345, 365, 373, 863, 868, 892, 900], "bst": [340, 345, 365, 373, 863, 868, 892, 900], "weekdai": [343, 363], "ordinal_dai": [343, 375], "day_of_month": [343, 363, 375], "day_of_year": [343, 363, 375], "356": [343, 363, 375], "357": [343, 363, 375], "358": [343, 363, 375], "359": [343, 363, 375], "days_diff": 344, "base_utc_offset": [345, 868], "0m": [345, 868], "epochtimeunit": [346, 645, 869], "unix": [346, 645, 869], "epoch_n": [346, 869], "epoch_": [346, 869], "978307200000000": [346, 371, 869, 898], "978307200": [346, 869], "978393600000000": [346, 371, 869, 898], "978393600": [346, 869], "978480000000000": [346, 371, 869, 898], "978480000": [346, 869], "2010": [347, 355, 802], "hours_diff": 348, "leap": [349, 362, 872, 889], "2002": [349, 362, 872, 889, 904], "iso": [350, 374, 375, 873, 901, 902], "1977": [350, 377], "1978": [350, 377], "1979": [350, 377], "calendar_year": [350, 377], "1976": [350, 377], "1_001": [351, 352, 354, 361], "002": [351, 352, 354, 361, 639, 878, 880, 888], "003": [351, 352, 354, 361], "3000": 351, "997": [351, 352, 354, 361], "997000": 351, "998": [351, 352, 354, 361], "998000": 351, "999": [351, 352, 354, 361, 802, 1147], "999000": [351, 802], "microseconds_diff": 352, "milliseconds_diff": 354, "minutes_diff": 356, "1440": [356, 883], "think": [358, 359, 885, 886], "vectoris": [358, 359, 885, 886], "tseri": [358, 359, 885, 886], "monthend": [358, 885], "rollforward": [358, 885], "monthbegin": [359, 886], "rollback": [359, 886], "nanoseconds_diff": 361, "minu": [362, 889], "dictat": [362, 889], "2005": [362, 889], "date_plus_1i": [362, 889], "1y2mo": [362, 889], "date_min": 362, "1998": [362, 889], "1999": [362, 802, 889], "2003": [362, 645, 889], "2004": [362, 889], "2006": [362, 889], "new_dat": 362, "ordin": [363, 510, 690, 890, 1019, 1139], "366": [363, 890], "use_earliest": [365, 373, 582, 584, 636, 892, 900, 1095, 1097], "ambigu": [365, 366, 373, 582, 584, 636, 892, 893, 900, 1095, 1097], "convert_time_zon": [365, 892], "london_timezon": [365, 892], "amsterdam": [365, 892], "london_to_amsterdam": [365, 892], "cet": [365, 892], "cest": [365, 892], "ts_local": [365, 892], "brussel": [365, 892], "half": [366, 381, 382, 383, 690, 893, 908, 909, 910, 1139], "225": [366, 373], "10m": [366, 373, 893, 900], "milli": [367, 894], "micro": [367, 894], "456789": [367, 802, 894], "111110": [367, 894], "765431": [367, 894], "11111": [367, 894], "seconds_diff": 368, "to_str": [369, 896], "datetime_str": [369, 372], "timestamp_n": [371, 898], "timestamp_m": 371, "978307200000": 371, "978393600000": 371, "978480000000": 371, "strftime": [372, 899], "offset_bi": [373, 639, 900], "15m": [373, 900], "ambiguous_map": 373, "map_dict": [373, 471, 690, 900, 1139], "53": [374, 901], "time_unit_u": 376, "32971": [376, 903], "32974": [376, 903], "32976": [376, 903], "iso_year": 377, "718281828459045": [378, 464, 690, 906, 994, 1139], "pk": [378, 690, 906, 1139], "probabl": [378, 507, 690, 906, 1017, 1139], "459148": [378, 690], "754888": [378, 690], "eq": [380, 690, 1139], "span": [381, 382, 383, 690, 908, 909, 910, 1139], "half_lif": [381, 382, 383, 690, 908, 909, 910, 1139], "adjust": [381, 382, 383, 541, 690, 908, 909, 910, 1054, 1139], "exponenti": [381, 382, 383, 385, 504, 690, 908, 909, 910, 911, 1139], "weight": [381, 382, 383, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 541, 690, 908, 909, 910, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1054, 1139], "decai": [381, 382, 383, 690, 908, 909, 910, 1139], "term": [381, 382, 383, 690, 908, 909, 910, 1139], "mass": [381, 382, 383, 690, 908, 909, 910, 1139], "gamma": [381, 382, 383, 690, 908, 909, 910, 1139], "foral": [381, 382, 383, 690, 908, 909, 910, 1139], "geq": [381, 382, 383, 690, 908, 909, 910, 1139], "theta": [381, 382, 383, 690, 908, 909, 910, 1139], "life": [381, 382, 383, 690, 908, 909, 910, 1139], "exp": [381, 382, 383, 690, 908, 909, 910, 1139], "ln": [381, 382, 383, 690, 908, 909, 910, 1139], "smooth": [381, 382, 383, 690, 908, 909, 910, 1139], "factor": [381, 382, 383, 601, 690, 908, 909, 910, 1122, 1139], "leq": [381, 382, 383, 690, 908, 909, 910, 1139], "imbal": [381, 382, 383, 690, 908, 909, 910, 1139], "ew": [381, 382, 383, 690, 908, 909, 910, 1139], "w_i": [381, 382, 383, 690, 908, 909, 910, 1139], "recurs": [381, 382, 383, 690, 908, 909, 910, 1139], "y_t": [381, 382, 383, 690, 908, 909, 910, 1139], "y_": [381, 382, 383, 690, 908, 909, 910, 1139], "x_t": [381, 382, 383, 690, 908, 909, 910, 1139], "x_2": [381, 382, 383, 690, 908, 909, 910, 1139], "428571": [381, 690], "bia": [382, 383, 420, 526, 541, 690, 909, 910, 951, 1034, 1054, 1139], "unbias": [382, 383, 690, 909, 910, 1139], "963624": [382, 690, 909, 1139], "928571": [383, 690, 910, 1139], "wildcard": [384, 629, 630, 643, 665, 690], "regex": [384, 479, 548, 549, 550, 553, 555, 556, 557, 567, 568, 575, 641, 690, 802, 1061, 1062, 1063, 1066, 1068, 1069, 1070, 1080, 1081, 1088], "aa": [384, 548, 641, 690, 1061], "ba": [384, 575, 641, 690, 802], "cc": [384, 641, 690], "718282": [385, 690], "389056": [385, 690], "54": [385, 690, 1147], "59815": [385, 690], "expand": [386, 478, 479, 513, 690, 802, 912, 1139], "pythonliter": [387, 690, 914, 1000, 1003, 1139], "extrem": [387, 520, 690, 914, 1028, 1139], "group_col": [390, 609, 690], "g1": [390, 609, 690], "g2": [390, 609, 690], "lt": [390, 609, 690, 1139], "gte": [390, 609, 690], "exprlistnamespac": [392, 690], "divis": [394, 603, 690], "truediv": [394, 690], "9774092659964970114": [399, 690], "13614470193936745724": [399, 690], "1101441246220388612": [399, 690], "11638928888656214026": [399, 690], "13382926553367784577": [399, 690], "cumsum": [402, 593, 632, 690, 733, 799, 950, 1139], "interpolationmethod": [403, 690, 927, 1139], "regrid": [403, 690], "grid": [403, 690], "df_original_grid": [403, 690], "grid_point": [403, 690], "df_new_grid": [403, 690], "conflat": [404, 690], "finit": [406, 603, 626, 690, 932, 1139], "occurr": [407, 408, 411, 412, 607, 690, 924, 933, 934, 939, 940, 1127, 1139], "is_first_distinct": [407, 690, 933, 1139], "optional_memb": [409, 690, 936, 1139], "infinit": [410, 603, 690, 937, 1139], "is_last_distinct": [411, 690, 939, 1139], "_isnan": [413, 690], "b_isnan": [413, 690], "negat": [414, 496, 690, 1011, 1139], "_is_not_nan": [415, 690], "b_is_not_nan": [415, 690], "_not_nul": [416, 690], "a_not_nul": [416, 690], "b_not_nul": [416, 690], "_isnul": [417, 690], "a_isnul": [417, 690], "b_isnul": [417, 690], "constraint": [419, 505, 594, 690], "chain": [419, 505, 594, 680, 690], "undo": [419, 485, 505, 594, 690], "333333": [419, 690, 1013, 1037, 1139], "fisher": [420, 541, 690, 951, 1054, 1139], "fourth": [420, 690, 951, 1139], "subtract": [420, 593, 690, 951, 1139], "distribut": [420, 541, 690, 951, 1054, 1139], "elimin": [420, 690, 951, 1139], "bias": [420, 541, 690, 951, 1054, 1139], "scipi": [420, 541, 690, 951, 1054, 1139], "stat": [420, 541, 690, 951, 1054, 1139], "153061": [420, 690], "sublist": [427, 428, 430, 433, 438, 439, 440, 442, 443, 450, 455, 459, 460, 461, 936, 957, 958, 960, 963, 968, 969, 970, 972, 973, 980, 985, 989, 990, 991, 1139], "membership": [430, 960], "listcol": 432, "number_of_two": 432, "set_differ": [434, 964], "blindli": [436, 966], "worth": [436, 966], "enough": [436, 541, 690, 966, 1054, 1139], "concat_list": [436, 640, 966], "rank": [436, 626, 640, 690, 966, 1139], "exprnamespac": 437, "flat": [437, 514, 690, 967, 1023, 1139], "set_intersect": [441, 971], "x_y": 442, "symmetr": [452, 458, 982, 988], "sdiff": 452, "taken": [455, 571, 985, 1084], "set_symmetric_differ": [458, 988], "null_on_oob": [460, 990], "cheaper": [460, 990], "n_field_strategi": [461, 991], "tostructstrategi": [461, 991], "first_non_nul": [461, 991], "max_width": [461, 991], "field_0": [461, 991], "field_1": [461, 991], "field_n": [461, 991], "pre": [461, 473, 507, 663, 666, 681, 690, 1017, 1139], "n0": 461, "n1": 461, "set_union": [462, 992], "logarithm": [464, 465, 466, 690, 994, 995, 996, 1139], "584963": [464, 690], "30103": [465, 690], "60206": [465, 690], "natur": [466, 690, 996, 1139], "693147": [466, 690], "098612": [466, 690], "386294": [466, 690], "lowest": [467, 690], "9223372036854775808": [467, 690], "agg_list": [469, 471, 690], "map_batch": [469, 653, 690, 740, 799], "b_revers": [470, 515, 594, 690], "rstrip": [470, 690], "_revers": [470, 515, 594, 690], "whole": [471, 543, 544, 555, 690, 787, 799, 1068], "elementwis": [471, 519, 520, 521, 522, 524, 528, 690, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1139], "third": [471, 690], "parti": [471, 690], "book": [471, 690], "bug": [471, 473, 690, 740, 741, 782, 787, 799, 999, 1139], "func": [471, 690], "argmax": [471, 690], "remap": [472, 690, 998, 1139], "lookup": [472, 686, 690, 998, 1139], "country_code_dict": [472, 690], "ca": [472, 690], "canada": [472, 690], "de": [472, 690], "germani": [472, 690], "fr": [472, 690], "franc": [472, 690], "country_cod": [472, 690], "rest": [472, 690], "discourag": [473, 690], "loop": [473, 690], "a_times_2": [473, 690], "tip": [473, 690], "again": [473, 690], "behav": [473, 690, 808, 1139], "exprmetanamespac": [477, 480], "foo_bar2": [477, 480], "raise_if_undetermin": 481, "computeerror": [481, 566, 701, 1079], "e_filt": [481, 483], "e_sum_ov": [481, 483], "e_sum_slic": [481, 483], "tree": 484, "keep_nam": [485, 690], "modulu": [488, 690], "xlog2": [490, 504, 690], "poison": [492, 493, 690, 1008, 1009, 1139], "nanmax": [492, 493, 690, 1008, 1009, 1139], "inequ": [494, 690], "ne": [495, 690, 1139], "more_expr": [499, 620, 623, 624, 625, 690], "mapping_strategi": [499, 690], "windowmappingstrategi": [499, 690], "group_to_row": [499, 690], "outcom": [499, 690], "group_dtyp": [499, 690], "warn": [499, 690], "flatten": [499, 690], "_max": [499, 690], "c_max": [499, 690], "_min": [499, 690], "c_min": [499, 690], "percent": [500, 690, 1013, 1139], "090909": [500, 690], "peak": [501, 502, 690, 1014, 1015, 1139], "extract_numb": [503, 690], "digit": [503, 530, 556, 590, 690, 1038, 1063, 1069, 1103, 1139, 1147], "scale_negative_even": [503, 690], "expon": [504, 690, 1139], "reverse_": [505, 690], "reverse_a": [505, 690], "reverse_b": [505, 690], "allow_dupl": [507, 690, 1017, 1139], "duplicateerror": [507, 690, 701, 1017, 1139], "happen": [507, 690, 1017, 1139], "cut": [507, 690, 1017, 1139], "566371": [509, 690], "424778": [509, 690], "283185": [509, 690], "141593": [509, 690, 810, 1139], "rankmethod": [510, 690, 1019, 1139], "ti": [510, 690, 1019, 1139], "competit": [510, 690, 1019, 1139], "highest": [510, 606, 626, 690, 799, 1019, 1139], "immedi": [510, 617, 621, 634, 635, 637, 638, 649, 650, 663, 666, 672, 677, 678, 681, 690, 1019, 1139], "safe": [512, 690, 1021, 1097, 1120, 1139], "fruits_revers": [515, 690], "cars_revers": [515, 690], "rle": [517, 690, 1026, 1139], "themselv": [517, 690, 1026, 1139], "a_r": [517, 690], "ab_r": [517, 690], "window_s": [519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 667, 668, 690, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1139], "rolling_map": [519, 690, 1027, 1139], "multipli": [519, 520, 521, 522, 524, 527, 528, 529, 690, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1139], "rolling_sum": [520, 690, 1028, 1139], "nansum": [520, 690, 1028, 1139], "travers": [521, 522, 524, 528, 690, 1029, 1030, 1032, 1035, 1036, 1037, 1139], "vector": [521, 522, 524, 528, 690, 1029, 1030, 1032, 1035, 1036, 1037, 1139], "5h": [521, 522, 523, 524, 525, 527, 528, 529, 690], "df_tempor": [521, 522, 524, 527, 528, 529, 690], "closur": [521, 522, 527, 528, 529, 690], "rolling_row_max": [521, 690], "2h": [521, 522, 524, 527, 528, 529, 690], "rolling_row_mean": [522, 690], "rolling_row_min": [524, 690], "625": [525, 690], "skew": [526, 690, 1034, 1139], "381802": [526, 690, 1034, 1139], "47033": [526, 690, 1034, 1139], "38180177416060584": [526, 690, 1034, 1139], "47033046033698594": [526, 690, 1034, 1139], "433013": [527, 690, 765, 799], "rolling_row_std": [527, 690], "rolling_row_sum": [528, 690], "39": [528, 645, 690], "63": [528, 690], "69": [528, 690], "1875": [529, 690, 773, 799], "rolling_row_var": [529, 690], "searchsortedsid": [532, 690, 1040, 1139], "leftmost": [532, 690, 1040, 1139], "rightmost": [532, 690, 1040, 1139], "six": [532, 690], "foo_shift": [534, 535, 690], "extrema": [536, 690, 1048, 1139], "112": [536, 690, 1147], "129": [536, 690], "i8": [536, 663, 666, 681, 690, 855, 1024, 1126, 1139], "8589934592": [536, 690], "1073741824": [536, 690], "content": [537, 690, 1050, 1139], "175201": [540, 690, 1053, 1139], "unimod": [541, 690, 1054, 1139], "skewtest": [541, 690, 1054, 1139], "speak": [541, 690, 1054, 1139], "g_1": [541, 690, 1054, 1139], "m_3": [541, 690, 1054, 1139], "m_2": [541, 690, 1054, 1139], "m_i": [541, 690, 1054, 1139], "sum_": [541, 690, 1054, 1139], "texttt": [541, 690, 1054, 1139], "k_3": [541, 690, 1054, 1139], "k_2": [541, 690, 1054, 1139], "sqrt": [541, 618, 619, 690, 1054, 1139], "343622": [541, 690], "value1": [544, 690], "value2": [544, 690], "attain": [544, 690], "414214": [545, 690, 1057, 1139], "sensit": [548, 556, 567, 1061, 1069, 1080], "ilmsuxu": [548, 555, 556, 567, 1061, 1068, 1069, 1080], "default_match": 548, "insensitive_match": 548, "crab": [548, 1061], "dog": [548, 586, 589, 625, 1061, 1099, 1102], "rab": [548, 1061], "success": [549, 550, 556, 1062, 1063, 1069], "overlap": [549, 550, 556, 1062, 1063, 1069], "123": [550, 556, 568, 802, 1063, 1069, 1081, 1117, 1139], "bla": [550, 556, 1063, 1069], "asd": [550, 556, 1063, 1069], "678": [550, 556, 1063, 1069], "910t": [550, 556, 1063, 1069], "count_digit": 550, "dbc": [550, 1063], "3xy": [550, 1063], "1zy3": [550, 1063], "666f6f": [552, 1065], "626172": [552, 1065], "mango": [553, 575, 1066, 1088], "has_suffix": 553, "le": [553, 690, 1139], "nu": 553, "group_index": [555, 1068], "captur": [555, 557, 1068, 1070], "nthose": [555, 1068], "nodd": [555, 1068], "nthe": [555, 1068], "vote": [555, 557, 1068, 1070], "ballon_dor": [555, 557, 1068, 1070], "404": [555, 557, 1068, 1070], "ref": [555, 557, 1068, 1070], "candid": [555, 557, 1068, 1070], "messi": [555, 557, 1068, 1070], "ronaldo": [555, 1068], "haystack": [556, 1069], "email": [556, 1069], "real": [556, 1069], "some_account": [556, 1069], "somewher": [556, 1069], "net": [556, 1069], "jkl": [556, 1069], "uvw": [556, 1069], "co": [556, 690, 1069, 1139], "uk": [556, 1069], "address": 556, "xi": [556, 1069], "insensit": [556, 567, 802, 1061, 1069, 1080], "char": [556, 1069], "quantifi": [556, 1069], "email_part": [556, 1069], "extracted_nr": 556, "910": [556, 1069], "unnam": [557, 1070], "weghorst": [557, 1070], "candi": 557, "json_path_match": [558, 1071], "jsonpath": [558, 559, 1071, 1072], "json_path": [559, 1072], "json_val": [559, 1072], "len_char": [560, 565, 1073, 1078], "_o": [560, 561, 1073, 1074], "caf\u00e9": [560, 561, 1073, 1074], "345": [560, 561, 1073, 1074], "\u6771\u4eac": [560, 561, 1073, 1074], "n_byte": [560, 561], "n_char": [560, 561], "fill_char": [563, 569, 1076, 1082], "justifi": [563, 569, 1076, 1082], "pad": [563, 569, 590, 1076, 1082, 1103], "cow": [563, 569, 1076, 1082], "monkei": [563, 569, 1076, 1082], "hippopotamu": [563, 569, 1076, 1082], "strip_chars_start": [564, 1077], "strip": [564, 570, 577, 578, 579, 580, 581, 1077, 1083, 1090, 1091, 1092], "radix": [566, 1079], "parseerror": [566, 1079], "becom": [566, 1079], "silent": [566, 1079], "110": [566, 1079], "010": [566, 1079], "fa1e": [566, 1079], "ff00": [566, 1079], "cafe": [566, 1079], "64030": [566, 1079], "65280": [566, 1079], "51966": [566, 1079], "replace_al": [567, 1080], "citi": 567, "philadelphia": 567, "season": 567, "spring": 567, "summer": 567, "autumn": 567, "winter": 567, "weather": [567, 1080], "raini": [567, 1080], "sunni": [567, 1080], "cloudi": 567, "snowi": 567, "foggi": [567, 1080], "123abc": [567, 1080], "abc456": [567, 1080], "abcabc": [568, 1081], "123a123": [568, 1081], "bc": [568, 673, 1081], "strip_chars_end": [570, 1083], "subslic": [571, 1084], "pear": [571, 1084], "papaya": [571, 1084], "dragonfruit": [571, 1084], "s_slice": 571, "ear": [571, 1084], "aya": [571, 1084], "uit": [571, 1084], "ya": [571, 1084], "onf": [571, 1084], "foo_bar_baz": 572, "split_inclus": 572, "foo_": [572, 644], "bar_": 572, "a_1": [573, 1086, 1116, 1139], "d_4": [573, 1086], "rename_field": [573, 574, 853, 1017, 1086, 1087, 1139], "first_part": [573, 574, 1086, 1087], "second_part": [573, 574, 1086, 1087], "remaind": [574, 1087], "app": [575, 1088], "has_prefix": 575, "strip_char": [576, 1089], "nworld": 577, "ow": 577, "hell": [577, 1090], "rld": [577, 579, 1092], "oldw": 578, "he": 578, "tworld": [579, 1090, 1092], "wod": [579, 1092], "foobar": [580, 581, 1093, 1094], "foofoobar": [580, 1093], "foobarbar": [581, 1094], "polarstemporaltyp": [582, 1095], "penalti": [582, 583, 584, 1095, 1096, 1097], "clean": [582, 583, 584, 1095, 1096, 1097], "beforehand": [582, 583, 584, 1095, 1096, 1097], "certainli": [582, 583, 584, 1095, 1096, 1097], "3f": [582, 584, 1095, 1097], "00z": [582, 584, 1095, 1097], "sun": [582, 1095], "jul": [582, 1095], "34": [582, 1095], "inference_length": [585, 1098], "3420": [585, 1098], "120134": [585, 1098], "3212": [585, 1098], "90": [585, 1098], "143": [585, 1098, 1147], "lowercas": [586, 1099], "variant": [586, 588, 589], "titlecas": [588, 1101], "sing": [588, 1101], "welcom": [588, 1101], "THERE": [588, 1101], "NO": [588, 802, 1101], "There": [588, 1101], "uppercas": [589, 1102], "100000": 590, "0010": 590, "0001": 590, "00000": 590, "00001": 590, "cd": [591, 592], "struct_col": [591, 592], "www": 592, "xxx": 592, "yyi": 592, "zzz": 592, "obvious": 592, "structfieldnotfounderror": [592, 701], "761594": [600, 690, 1114, 1139], "replic": [601, 690, 1122, 1139], "vals_phys": [601, 690], "floordiv": [603, 690], "ieee": [603, 690], "754": [603, 690], "mathemat": [603, 640, 690], "undefin": [603, 690], "On": [603, 690], "operand": [603, 690], "infin": [603, 690], "value_count": [605, 690, 1139], "9223372036854775807": [606, 690], "binary_str": [610, 690], "zfill": [610, 690], "250": [610, 690, 1030, 1139, 1147], "bin_x": [610, 690], "bin_i": [610, 690], "xor_xi": [610, 690], "bin_xor_xi": [610, 690], "00001010": [610, 690], "00001011": [610, 690], "00001000": [610, 690], "00000010": [610, 690], "11111010": [610, 690], "00000011": [610, 690], "249": [610, 690], "11111001": [610, 690], "01000010": [610, 690], "00000100": [610, 690], "70": [610, 690], "01000110": [610, 690], "AND": [611, 612, 802, 1120, 1139], "any_horizont": 613, "returns_scalar": [615, 655], "polarsintegertyp": [617, 649, 650], "arctan": [618, 619, 690, 1139], "angl": [618, 619], "plane": [618, 619], "rai": [618, 619], "tworoottwo": [618, 619], "arctan2d": 618, "atan2d": [618, 619], "atan2": [618, 619], "135": [618, 619], "356194": [618, 619], "arctan2": 619, "arg_tru": [621, 690, 1139], "lag": 624, "mimic": 624, "a_lag_": 624, "a_rol": 624, "swim": 625, "walk": 625, "full_sent": 625, "correlationmethod": 626, "propagate_nan": 626, "spearman": 626, "544705": 626, "covari": [628, 668], "acc": [629, 630, 643, 665], "include_init": 629, "accumul": [629, 630, 643, 665], "fn": [629, 630, 643, 665], "new_valu": [629, 630, 643, 665], "cumreduc": 629, "cumsum_horizont": 631, "month_end": 634, "granular": 634, "finer": 634, "permut": 634, "1985": [634, 637], "999999": [636, 676, 677, 678, 802], "america": 637, "new_york": 637, "est": 637, "contrast": 639, "sometim": [639, 689], "tbl_width_char": 639, "120": 639, "add_week": 639, "add_dai": 639, "add_second": 639, "add_milli": 639, "add_hour": 639, "add_calendar_dai": 639, "add_calendar_month": 639, "mo": 639, "add_calendar_year": 639, "2024": [639, 802], "a_b_doubl": 640, "f_string": 644, "placehold": 644, "hello_": 644, "_world": 644, "_bar_": 644, "foo_a_bar_1": 644, "foo_b_bar_2": 644, "foo_c_bar_3": 644, "epoch": 645, "timestep": 645, "1666683077": 645, "1666683099": 645, "12345": [645, 839, 919, 1038, 1139], "12346": 645, "agg_group": [646, 690], "allow_object": 652, "valueexcept": 652, "test_func": 654, "list_of_seri": 655, "my_custom_aggreg": 655, "understood": 655, "max_horizont": 656, "min_horizont": [660, 669], "power": [670, 1139], "a_a": 670, "a_txt": 670, "605551": 671, "605551275463989": 671, "my_struct": 672, "thens": 680, "elif": 680, "pick": 680, "own": [680, 1147], "isn": 680, "arr": [682, 1120, 1131, 1139], "technic": 686, "further": [686, 1121, 1139], "columnfactori": 686, "more_nam": 686, "__call__": 686, "helper": 686, "__getattr__": 686, "idiomat": [686, 787], "quick": [686, 854, 1139, 1147], "prototyp": 686, "keystrok": 686, "drawback": 686, "readabl": 686, "modul": [689, 802, 1147], "and_": 690, "arcco": [690, 1139], "arccosh": [690, 1139], "arcsin": [690, 1139], "arcsinh": [690, 1139], "arctanh": [690, 1139], "arg_max": [690, 1139], "arg_min": [690, 1139], "arg_sort": [690, 1139], "arg_uniqu": [690, 1139], "backward_fil": 690, "cbrt": [690, 1139], "clip_max": [690, 1139], "clip_min": [690, 1139], "cosh": [690, 1139], "cumcount": 690, "cummax": [690, 1139], "cummin": [690, 1139], "cumulative_ev": [690, 1139], "entropi": [690, 1139], "eq_miss": [690, 1139], "ewm_mean": [690, 1139], "ewm_std": [690, 1139], "ewm_var": [690, 1139], "extend_const": [690, 1139], "from_json": [690, 799], "ge": [690, 1139], "gt": [690, 1139], "implod": [690, 1139], "inspect": [690, 799], "is_between": [690, 1139], "is_finit": [690, 1139], "is_first": [690, 1139], "is_in": [690, 1139], "is_infinit": [690, 1139], "is_last": [690, 1139], "is_nan": [690, 1139], "is_not": 690, "is_not_nan": [690, 1139], "is_not_nul": [690, 1139], "kurtosi": [690, 1139], "log10": [690, 1139], "log1p": [690, 1139], "mod": 690, "mul": 690, "nan_max": [690, 1139], "nan_min": [690, 1139], "ne_miss": [690, 1139], "or_": 690, "pct_chang": [690, 1139], "peak_max": [690, 1139], "peak_min": [690, 1139], "pow": [690, 1139], "reinterpret": [690, 1139], "repeat_bi": 690, "rle_id": [690, 1139], "rolling_appli": [690, 1139], "rolling_max": [690, 1139], "rolling_mean": [690, 1139], "rolling_median": [690, 1139], "rolling_min": [690, 1139], "rolling_quantil": [690, 1139], "rolling_skew": [690, 1139], "rolling_std": [690, 1139], "rolling_var": [690, 1139], "search_sort": [690, 1139], "shrink_dtyp": [690, 1139], "sin": [690, 1139], "sinh": [690, 1139], "sort_bi": 690, "tan": [690, 1139], "to_phys": [690, 836, 1139], "unique_count": [690, 1139], "xor": 690, "expos": 701, "miscellan": 701, "arrowerror": 701, "columnnotfounderror": 701, "invalidoperationerror": 701, "polarspanicerror": 701, "schemaerror": 701, "schemafieldnotfounderror": 701, "shapeerror": 701, "parametr": 701, "build_info": 701, "get_index_typ": 701, "show_vers": 701, "threadpool_s": 701, "sqlcontext": [701, 1146], "hit": [707, 799], "node": [707, 711, 733, 740, 741, 745, 750, 753, 799], "_eager": [711, 799], "explain": [711, 799], "purpos": [711, 720, 799], "set_streaming_chunk_s": [711, 799], "collect_all_async": [712, 799], "async": [712, 799], "stringio": [714, 725, 758, 799], "snippet": [716, 799], "Be": [720, 799], "fewer": [720, 799], "suscept": [720, 799], "deseri": [725, 752, 758, 799], "lazygroupbi": [726, 727, 728, 729, 730, 731, 799], "dynamic_group_bi": [728, 799], "other_lf": [735, 799], "validate_output_schema": [740, 741, 799], "streamabl": [740, 741, 745, 799], "past": [740, 741, 799], "paramount": [740, 741, 799], "elig": [740, 741, 799], "invari": [741, 799], "upheld": [741, 799], "100_000": [741, 799], "200000": [741, 799], "199998": [741, 799], "199996": [741, 799], "199994": [741, 799], "199992": [741, 799], "show_plot": [750, 799], "truncate_nod": [750, 799], "figsiz": [750, 762, 799], "gantt": [750, 799], "plot": [750, 762, 799], "group_by_partit": [750, 799], "470": [750, 799], "475": [750, 799], "1964": [750, 799], "swap": [753, 799], "dataframescan": [758, 799], "output_schema": [758, 799], "run_parallel": [758, 799], "duplicate_check": [758, 799], "later": [758, 799], "output_path": [762, 799], "raw_output": [762, 799], "figur": [762, 799], "290994": [765, 799], "118034": [765, 799], "extern": [777, 799], "lf_other": [777, 799], "afoo": [777, 799], "cfoo": [777, 799], "train_lf": [777, 799], "feature_0": [777, 799], "feature_1": [777, 799], "test_lf": [777, 799], "_train": [777, 799], "feature_0_train": [777, 799], "opaqu": 787, "my_column": 787, "lf5": 799, "lf6": 799, "read_json": 799, "sink_csv": 799, "sink_ipc": 799, "sink_parquet": 799, "with_context": 799, "intuit": 802, "broadcast": 802, "emploi": 802, "complement": 802, "plenti": 802, "cde": 802, "fgg": 802, "jjk": 802, "lmn": 802, "opp": 802, "qqr": 802, "by_dtyp": 802, "as_expr": 802, "dispatch": 802, "1_234_500": 802, "5_000_555": 802, "1234500": 802, "5000555": 802, "by_nam": 802, "4_500_000": 802, "4500000": 802, "3265500": 802, "zap": 802, "2031": 802, "tstamp_tokyo": 802, "987654": 802, "123465": 802, "tstamp_utc": 802, "2025": 802, "666000": 802, "tstamp": 802, "600000": 802, "123000": 802, "666": 802, "td1": 802, "123456": 802, "987000": 802, "td2": 802, "td3": 802, "2m": [802, 882], "456m": 802, "7d": 802, "456789\u00b5": 802, "18d": 802, "999999\u00b5": 802, "23h": 802, "987m": 802, "14d": 802, "16h": 802, "39m": 802, "21d": 802, "456001\u00b5": 802, "expand_selector": 802, "789": 802, "colz": [802, 1147], "everyth": 802, "signed_integ": 802, "unsigned_integ": 802, "is_selector": 802, "obj": 802, "_selector_proxy_": 802, "include_categor": 802, "set_ord": [802, 837], "2345": 802, "3456": 802, "append_chunk": [808, 1139], "super": [808, 1139], "292432": [811, 1139], "549306": [815, 1139], "catnamespac": 832, "56789": [839, 919, 1038, 1139], "901234": [839, 919, 1038, 1139], "1232e": [846, 1139], "break_point_label": [853, 1017, 1139], "break_point": [853, 924, 1017, 1139], "category_label": [853, 1017, 1139], "series_num": [854, 1139], "581139": [854, 1139], "series_str": [854, 1139], "datetimeindex": [856, 1139], "datetimenamespac": 859, "ser": [864, 865, 897], "kathmandu": [864, 865, 897], "0545": [864, 865, 897], "500m": [877, 879, 887], "500000": 877, "500000000": 887, "date_minus_1y_2mon": 889, "165": [893, 900], "series_equ": [893, 1139], "timestamp_u": 898, "978307200000000000": 898, "978393600000000000": 898, "978480000000000000": 898, "005": [906, 1139], "06293300616044681": [906, 1139], "65": [906, 1139], "8568409950394724": [906, 1139], "4000000": [907, 1139], "814697265625": [907, 1139], "bitmask": [921, 1139], "absenc": [921, 1139], "presenc": [921, 1120, 1139], "confirm": [921, 1139], "10734580197236529959": [922, 1139], "3022416320763508302": [922, 1139], "13756996518000038261": [922, 1139], "bin_count": [924, 1139], "a_count": [924, 1139], "listnamespac": 954, "field_2": 991, "n00": 991, "n01": 991, "n02": 991, "2147483648": [997, 1139], "iso3166": [998, 1139], "tur": [998, 1101, 1139], "jpn": [998, 1139], "nld": [998, 1139], "country_lookup": [998, 1139], "japan": [998, 1139], "t\u00fcrkiy": [998, 1139], "netherland": [998, 1139], "unrecognis": [998, 1139], "unspecifi": [998, 1139], "country_nam": [998, 1139], "166667": [1013, 1139], "142857": [1013, 1139], "200": [1029, 1030, 1032, 1139], "150": [1030, 1139], "350": [1030, 1139], "450": [1030, 1139], "dev": [1035, 1139], "527525": [1035, 1139], "57": [1038, 1139, 1147], "frequent": [1042, 1043, 1139], "mutat": [1043, 1139], "2246e": [1052, 1113, 1139], "stringnamespac": 1059, "orld": 1091, "6331e16": [1113, 1139], "lib": [1115, 1139], "int64arrai": [1115, 1139], "a_2": [1116, 1139], "a_3": [1116, 1139], "s_from_str_repr": [1118, 1139], "zero_copy_onli": [1120, 1139], "writabl": [1120, 1139], "immut": [1120, 1139], "127": [1126, 1139], "seriesview": [1129, 1139], "arraylik": 1139, "dtype_if_empti": 1139, "position": 1139, "scenario": 1139, "chunk_length": 1139, "333": 1139, "get_chunk": 1139, "has_valid": 1139, "hist": 1139, "is_boolean": 1139, "is_float": 1139, "is_integ": 1139, "is_numer": [1139, 1147], "is_sort": 1139, "is_tempor": 1139, "is_utf8": 1139, "new_from_index": 1139, "set_at_idx": 1139, "two_a": 1146, "__enter__": 1146, "__exit__": 1146, "exc_typ": 1146, "baseexcept": 1146, "exc_val": 1146, "exc_tb": 1146, "tracebacktyp": 1146, "primari": 1147, "assert_frame_equ": 1147, "assert_series_equ": 1147, "guid": 1147, "machin": 1147, "xdist": 1147, "hardwar": 1147, "setup": 1147, "sec": 1147, "numeric_dtyp": 1147, "null_probabililti": 1147, "test_numer": 1147, "col0": 1147, "col4": 1147, "29096": 1147, "485": 1147, "2147483647": 1147, "8257e14": 1147, "7508": 1147, "37338": 1147, "7264": 1147, "321": 1147, "16996": 1147, "121": 1147, "361": 1147, "63204": 1147, "1443e235": 1147, "conform": 1147, "ascii_lett": 1147, "id_char": 1147, "alphabet": 1147, "price": 1147, "min_valu": 1147, "max_valu": 1147, "test_price_calcul": 1147, "a101": 1147, "8nin": 1147, "qhoo": 1147, "714": 1147, "544": 1147, "i0e0": 1147, "0000": 1147, "test_miscellan": 1147, "235": 1147, "87": 1147, "186": 1147, "174": 1147, "179": 1147, "213": 1147, "221": 1147, "86": 1147, "255": 1147}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [39, 0, 1, "", "DataType"], [40, 0, 1, "", "Date"], [41, 0, 1, "", "Datetime"], [42, 0, 1, "", "Decimal"], [43, 0, 1, "", "Duration"], [44, 0, 1, "", "Float32"], [45, 0, 1, "", "Float64"], [46, 0, 1, "", "Int16"], [47, 0, 1, "", "Int32"], [48, 0, 1, "", "Int64"], [49, 0, 1, "", "Int8"], [53, 0, 1, "", "List"], [54, 0, 1, "", "Null"], [55, 0, 1, "", "Object"], [1146, 0, 1, "", "SQLContext"], [62, 0, 1, "", "StringCache"], [63, 0, 1, "", "Struct"], [64, 0, 1, "", "Time"], [65, 0, 1, "", "UInt16"], [66, 0, 1, "", "UInt32"], [67, 0, 1, "", "UInt64"], [68, 0, 1, "", "UInt8"], [69, 0, 1, "", "Unknown"], [70, 0, 1, "", "Utf8"], [71, 4, 1, "", "align_frames"], [611, 4, 1, "", "all"], [612, 4, 1, "", "all_horizontal"], [613, 4, 1, "", "any"], [614, 4, 1, "", "any_horizontal"], [615, 4, 1, "", "apply"], [616, 4, 1, "", "approx_n_unique"], [617, 4, 1, "", "arange"], [618, 4, 1, "", "arctan2"], [619, 4, 1, "", "arctan2d"], [620, 4, 1, "", "arg_sort_by"], [621, 4, 1, "", "arg_where"], [622, 4, 1, "", "avg"], [76, 4, 1, "", "build_info"], [623, 4, 1, "", "coalesce"], [77, 4, 1, "", "collect_all"], [78, 4, 1, "", "collect_all_async"], [79, 4, 1, "", "concat"], [624, 4, 1, "", "concat_list"], [625, 4, 1, "", "concat_str"], [626, 4, 1, "", "corr"], [627, 4, 1, "", "count"], [628, 4, 1, "", "cov"], [629, 4, 1, "", "cumfold"], [630, 4, 1, "", "cumreduce"], [631, 4, 1, "", "cumsum"], [632, 4, 1, "", "cumsum_horizontal"], [633, 4, 1, "", "date"], [634, 4, 1, "", "date_range"], [635, 4, 1, "", "date_ranges"], [636, 4, 1, "", "datetime"], [637, 4, 1, "", "datetime_range"], [638, 4, 1, "", "datetime_ranges"], [80, 4, 1, "", "disable_string_cache"], [639, 4, 1, "", "duration"], [640, 4, 1, "", "element"], [81, 4, 1, "", "enable_string_cache"], [641, 4, 1, "", "exclude"], [642, 4, 1, "", "first"], [643, 4, 1, "", "fold"], [644, 4, 1, "", "format"], [96, 4, 1, "", "from_arrow"], [97, 4, 1, "", "from_dataframe"], [98, 4, 1, "", "from_dict"], [99, 4, 1, "", "from_dicts"], [645, 4, 1, "", "from_epoch"], [100, 4, 1, "", "from_numpy"], [101, 4, 1, "", "from_pandas"], [102, 4, 1, "", "from_records"], [103, 4, 1, "", "from_repr"], [104, 4, 1, "", "get_index_type"], [646, 4, 1, "", "groups"], [647, 4, 1, "", "head"], [648, 4, 1, "", "implode"], [649, 4, 1, "", "int_range"], [650, 4, 1, "", "int_ranges"], [651, 4, 1, "", "last"], [652, 4, 1, "", "lit"], [653, 4, 1, "", "map"], [654, 4, 1, "", "map_batches"], [655, 4, 1, "", "map_groups"], [656, 4, 1, "", "max"], [657, 4, 1, "", "max_horizontal"], [658, 4, 1, "", "mean"], [659, 4, 1, "", "median"], [660, 4, 1, "", "min"], [661, 4, 1, "", "min_horizontal"], [662, 4, 1, "", "n_unique"], [663, 4, 1, "", "ones"], [664, 4, 1, "", "quantile"], [106, 4, 1, "", "read_avro"], [107, 4, 1, "", "read_csv"], [108, 4, 1, "", "read_csv_batched"], [109, 4, 1, "", "read_database"], [110, 4, 1, "", "read_database_uri"], [111, 4, 1, "", "read_delta"], [112, 4, 1, "", "read_excel"], [113, 4, 1, "", "read_ipc"], [114, 4, 1, "", "read_ipc_schema"], [115, 4, 1, "", "read_ipc_stream"], [116, 4, 1, "", "read_json"], [117, 4, 1, "", "read_ndjson"], [118, 4, 1, "", "read_ods"], [119, 4, 1, "", "read_parquet"], [120, 4, 1, "", "read_parquet_schema"], [665, 4, 1, "", "reduce"], [666, 4, 1, "", "repeat"], [667, 4, 1, "", "rolling_corr"], [668, 4, 1, "", "rolling_cov"], [121, 4, 1, "", "scan_csv"], [122, 4, 1, "", "scan_delta"], [123, 4, 1, "", "scan_iceberg"], [124, 4, 1, "", "scan_ipc"], [125, 4, 1, "", "scan_ndjson"], [126, 4, 1, "", "scan_parquet"], [127, 4, 1, "", "scan_pyarrow_dataset"], [669, 4, 1, "", "select"], [802, 6, 0, "-", "selectors"], [128, 4, 1, "", "set_random_seed"], [129, 4, 1, "", "show_versions"], [670, 4, 1, "", "sql_expr"], [671, 4, 1, "", "std"], [672, 4, 1, "", "struct"], [673, 4, 1, "", "sum"], [674, 4, 1, "", "sum_horizontal"], [675, 4, 1, "", "tail"], [139, 4, 1, "", "threadpool_size"], [676, 4, 1, "", "time"], [677, 4, 1, "", "time_range"], [678, 4, 1, "", "time_ranges"], [140, 4, 1, "", "using_string_cache"], [679, 4, 1, "", "var"], [680, 4, 1, "", "when"], [681, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_fmt_float"], [14, 1, 1, "", "set_fmt_str_lengths"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cols"], [18, 1, 1, "", "set_tbl_column_data_type_inline"], [19, 1, 1, "", "set_tbl_dataframe_shape_below"], [20, 1, 1, "", "set_tbl_formatting"], [21, 1, 1, "", "set_tbl_hide_column_data_types"], [22, 1, 1, "", "set_tbl_hide_column_names"], [23, 1, 1, "", "set_tbl_hide_dataframe_shape"], [24, 1, 1, "", "set_tbl_hide_dtype_separator"], [25, 1, 1, "", "set_tbl_rows"], [26, 1, 1, "", "set_tbl_width_chars"], [27, 1, 1, "", "set_verbose"], [28, 1, 1, "", "state"]], "polars.DataFrame": [[143, 1, 1, "", "__dataframe__"], [144, 1, 1, "", "apply"], [145, 1, 1, "", "approx_n_unique"], [146, 1, 1, "", "approx_unique"], [147, 1, 1, "", "bottom_k"], [148, 1, 1, "", "cast"], [149, 1, 1, "", "clear"], [150, 1, 1, "", "clone"], [151, 2, 1, "", "columns"], [152, 1, 1, "", "corr"], [153, 1, 1, "", "describe"], [154, 1, 1, "", "drop"], [155, 1, 1, "", "drop_in_place"], [156, 1, 1, "", "drop_nulls"], [157, 2, 1, "", "dtypes"], [158, 1, 1, "", "estimated_size"], [159, 1, 1, "", "explode"], [160, 1, 1, "", "extend"], [161, 1, 1, "", "fill_nan"], [162, 1, 1, "", "fill_null"], [163, 1, 1, "", "filter"], [164, 1, 1, "", "find_idx_by_name"], [165, 2, 1, "", "flags"], [166, 1, 1, "", "fold"], [167, 1, 1, "", "frame_equal"], [168, 1, 1, "", "get_column"], [169, 1, 1, "", "get_columns"], [170, 1, 1, "", "glimpse"], [171, 1, 1, "", "group_by"], [172, 1, 1, "", "group_by_dynamic"], [173, 1, 1, "", "group_by_rolling"], [174, 1, 1, "", "groupby"], [175, 1, 1, "", "groupby_dynamic"], [176, 1, 1, "", "groupby_rolling"], [177, 1, 1, "", "hash_rows"], [178, 1, 1, "", "head"], [179, 2, 1, "", "height"], [180, 1, 1, "", "hstack"], [181, 1, 1, "", "insert_at_idx"], [182, 1, 1, "", "interpolate"], [183, 1, 1, "", "is_duplicated"], [184, 1, 1, "", "is_empty"], [185, 1, 1, "", "is_unique"], [186, 1, 1, "", "item"], [187, 1, 1, "", "iter_rows"], [188, 1, 1, "", "iter_slices"], [189, 1, 1, "", "join"], [190, 1, 1, "", "join_asof"], [191, 1, 1, "", "lazy"], [192, 1, 1, "", "limit"], [193, 1, 1, "", "map_rows"], [194, 1, 1, "", "max"], [195, 1, 1, "", "mean"], [196, 1, 1, "", "median"], [197, 1, 1, "", "melt"], [198, 1, 1, "", "merge_sorted"], [199, 1, 1, "", "min"], [200, 1, 1, "", "n_chunks"], [201, 1, 1, "", "n_unique"], [202, 1, 1, "", "null_count"], [203, 1, 1, "", "partition_by"], [204, 1, 1, "", "pipe"], [205, 1, 1, "", "pivot"], [206, 1, 1, "", "product"], [207, 1, 1, "", "quantile"], [208, 1, 1, "", "rechunk"], [209, 1, 1, "", "rename"], [210, 1, 1, "", "replace"], [211, 1, 1, "", "replace_at_idx"], [212, 1, 1, "", "reverse"], [213, 1, 1, "", "row"], [214, 1, 1, "", "rows"], [215, 1, 1, "", "rows_by_key"], [216, 1, 1, "", "sample"], [217, 2, 1, "", "schema"], [218, 1, 1, "", "select"], [219, 1, 1, "", "select_seq"], [220, 1, 1, "", "set_sorted"], [221, 2, 1, "", "shape"], [222, 1, 1, "", "shift"], [223, 1, 1, "", "shift_and_fill"], [224, 1, 1, "", "shrink_to_fit"], [225, 1, 1, "", "slice"], [226, 1, 1, "", "sort"], [227, 1, 1, "", "std"], [228, 1, 1, "", "sum"], [229, 1, 1, "", "tail"], [230, 1, 1, "", "take_every"], [231, 1, 1, "", "to_arrow"], [232, 1, 1, "", "to_dict"], [233, 1, 1, "", "to_dicts"], [234, 1, 1, "", "to_dummies"], [235, 1, 1, "", "to_init_repr"], [236, 1, 1, "", "to_numpy"], [237, 1, 1, "", "to_pandas"], [238, 1, 1, "", "to_series"], [239, 1, 1, "", "to_struct"], [240, 1, 1, "", "top_k"], [241, 1, 1, "", "transpose"], [242, 1, 1, "", "unique"], [243, 1, 1, "", "unnest"], [244, 1, 1, "", "unstack"], [245, 1, 1, "", "update"], [246, 1, 1, "", "upsample"], [247, 1, 1, "", "var"], [248, 1, 1, "", "vstack"], [249, 2, 1, "", "width"], [250, 1, 1, "", "with_columns"], [251, 1, 1, "", "with_columns_seq"], [252, 1, 1, "", "with_row_count"], [29, 1, 1, "", "write_avro"], [30, 1, 1, "", "write_csv"], [31, 1, 1, "", "write_database"], [32, 1, 1, "", "write_delta"], [33, 1, 1, "", "write_excel"], [34, 1, 1, "", "write_ipc"], [35, 1, 1, "", "write_ipc_stream"], [36, 1, 1, "", "write_json"], [37, 1, 1, "", "write_ndjson"], [38, 1, 1, "", "write_parquet"]], "polars.DataType": [[39, 1, 1, "", "__init__"]], "polars.Date": [[40, 1, 1, "", "__init__"]], "polars.Datetime": [[41, 1, 1, "", "__init__"]], "polars.Decimal": [[42, 1, 1, "", "__init__"]], "polars.Duration": [[43, 1, 1, "", "__init__"]], "polars.Expr": [[281, 1, 1, "", "abs"], [282, 1, 1, "", "add"], [283, 1, 1, "", "agg_groups"], [284, 1, 1, "", "alias"], [285, 1, 1, "", "all"], [286, 1, 1, "", "and_"], [287, 1, 1, "", "any"], [288, 1, 1, "", "append"], [289, 1, 1, "", "apply"], [290, 1, 1, "", "approx_n_unique"], [291, 1, 1, "", "arccos"], [292, 1, 1, "", "arccosh"], [293, 1, 1, "", "arcsin"], [294, 1, 1, "", "arcsinh"], [295, 1, 1, "", "arctan"], [296, 1, 1, "", "arctanh"], [297, 1, 1, "", "arg_max"], [298, 1, 1, "", "arg_min"], [299, 1, 1, "", "arg_sort"], [300, 1, 1, "", "arg_true"], [301, 1, 1, "", "arg_unique"], [306, 1, 1, "", "backward_fill"], [312, 1, 1, "", "bottom_k"], [313, 1, 1, "", "cache"], [314, 1, 1, "", "cast"], [317, 1, 1, "", "cbrt"], [318, 1, 1, "", "ceil"], [319, 1, 1, "", "clip"], [320, 1, 1, "", "clip_max"], [321, 1, 1, "", "clip_min"], [322, 1, 1, "", "cos"], [323, 1, 1, "", "cosh"], [324, 1, 1, "", "count"], [325, 1, 1, "", "cumcount"], [326, 1, 1, "", "cummax"], [327, 1, 1, "", "cummin"], [328, 1, 1, "", "cumprod"], [329, 1, 1, "", "cumsum"], [330, 1, 1, "", "cumulative_eval"], [331, 1, 1, "", "cut"], [332, 1, 1, "", "degrees"], [333, 1, 1, "", "diff"], [334, 1, 1, "", "dot"], [335, 1, 1, "", "drop_nans"], [336, 1, 1, "", "drop_nulls"], [378, 1, 1, "", "entropy"], [379, 1, 1, "", "eq"], [380, 1, 1, "", "eq_missing"], [381, 1, 1, "", "ewm_mean"], [382, 1, 1, "", "ewm_std"], [383, 1, 1, "", "ewm_var"], [384, 1, 1, "", "exclude"], [385, 1, 1, "", "exp"], [386, 1, 1, "", "explode"], [387, 1, 1, "", "extend_constant"], [388, 1, 1, "", "fill_nan"], [389, 1, 1, "", "fill_null"], [390, 1, 1, "", "filter"], [391, 1, 1, "", "first"], [392, 1, 1, "", "flatten"], [393, 1, 1, "", "floor"], [394, 1, 1, "", "floordiv"], [395, 1, 1, "", "forward_fill"], [396, 1, 1, "", "from_json"], [397, 1, 1, "", "ge"], [398, 1, 1, "", "gt"], [399, 1, 1, "", "hash"], [400, 1, 1, "", "head"], [401, 1, 1, "", "implode"], [402, 1, 1, "", "inspect"], [403, 1, 1, "", "interpolate"], [404, 1, 1, "", "is_between"], [405, 1, 1, "", "is_duplicated"], [406, 1, 1, "", "is_finite"], [407, 1, 1, "", "is_first"], [408, 1, 1, "", "is_first_distinct"], [409, 1, 1, "", "is_in"], [410, 1, 1, "", "is_infinite"], [411, 1, 1, "", "is_last"], [412, 1, 1, "", "is_last_distinct"], [413, 1, 1, "", "is_nan"], [414, 1, 1, "", "is_not"], [415, 1, 1, "", "is_not_nan"], [416, 1, 1, "", "is_not_null"], [417, 1, 1, "", "is_null"], [418, 1, 1, "", "is_unique"], [419, 1, 1, "", "keep_name"], [420, 1, 1, "", "kurtosis"], [421, 1, 1, "", "last"], [422, 1, 1, "", "le"], [423, 1, 1, "", "len"], [424, 1, 1, "", "limit"], [464, 1, 1, "", "log"], [465, 1, 1, "", "log10"], [466, 1, 1, "", "log1p"], [467, 1, 1, "", "lower_bound"], [468, 1, 1, "", "lt"], [469, 1, 1, "", "map"], [470, 1, 1, "", "map_alias"], [471, 1, 1, "", "map_batches"], [472, 1, 1, "", "map_dict"], [473, 1, 1, "", "map_elements"], [474, 1, 1, "", "max"], [475, 1, 1, "", "mean"], [476, 1, 1, "", "median"], [487, 1, 1, "", "min"], [488, 1, 1, "", "mod"], [489, 1, 1, "", "mode"], [490, 1, 1, "", "mul"], [491, 1, 1, "", "n_unique"], [492, 1, 1, "", "nan_max"], [493, 1, 1, "", "nan_min"], [494, 1, 1, "", "ne"], [495, 1, 1, "", "ne_missing"], [496, 1, 1, "", "not_"], [497, 1, 1, "", "null_count"], [498, 1, 1, "", "or_"], [499, 1, 1, "", "over"], [500, 1, 1, "", "pct_change"], [501, 1, 1, "", "peak_max"], [502, 1, 1, "", "peak_min"], [503, 1, 1, "", "pipe"], [504, 1, 1, "", "pow"], [505, 1, 1, "", "prefix"], [506, 1, 1, "", "product"], [507, 1, 1, "", "qcut"], [508, 1, 1, "", "quantile"], [509, 1, 1, "", "radians"], [510, 1, 1, "", "rank"], [511, 1, 1, "", "rechunk"], [512, 1, 1, "", "reinterpret"], [513, 1, 1, "", "repeat_by"], [514, 1, 1, "", "reshape"], [515, 1, 1, "", "reverse"], [516, 1, 1, "", "rle"], [517, 1, 1, "", "rle_id"], [518, 1, 1, "", "rolling"], [519, 1, 1, "", "rolling_apply"], [520, 1, 1, "", "rolling_map"], [521, 1, 1, "", "rolling_max"], [522, 1, 1, "", "rolling_mean"], [523, 1, 1, "", "rolling_median"], [524, 1, 1, "", "rolling_min"], [525, 1, 1, "", "rolling_quantile"], [526, 1, 1, "", "rolling_skew"], [527, 1, 1, "", "rolling_std"], [528, 1, 1, "", "rolling_sum"], [529, 1, 1, "", "rolling_var"], [530, 1, 1, "", "round"], [531, 1, 1, "", "sample"], [532, 1, 1, "", "search_sorted"], [533, 1, 1, "", "set_sorted"], [534, 1, 1, "", "shift"], [535, 1, 1, "", "shift_and_fill"], [536, 1, 1, "", "shrink_dtype"], [537, 1, 1, "", "shuffle"], [538, 1, 1, "", "sign"], [539, 1, 1, "", "sin"], [540, 1, 1, "", "sinh"], [541, 1, 1, "", "skew"], [542, 1, 1, "", "slice"], [543, 1, 1, "", "sort"], [544, 1, 1, "", "sort_by"], [545, 1, 1, "", "sqrt"], [546, 1, 1, "", "std"], [593, 1, 1, "", "sub"], [594, 1, 1, "", "suffix"], [595, 1, 1, "", "sum"], [596, 1, 1, "", "tail"], [597, 1, 1, "", "take"], [598, 1, 1, "", "take_every"], [599, 1, 1, "", "tan"], [600, 1, 1, "", "tanh"], [601, 1, 1, "", "to_physical"], [602, 1, 1, "", "top_k"], [603, 1, 1, "", "truediv"], [604, 1, 1, "", "unique"], [605, 1, 1, "", "unique_counts"], [606, 1, 1, "", "upper_bound"], [607, 1, 1, "", "value_counts"], [608, 1, 1, "", "var"], [609, 1, 1, "", "where"], [610, 1, 1, "", "xor"]], "polars.Expr.arr": [[302, 1, 1, "", "max"], [303, 1, 1, "", "min"], [304, 1, 1, "", "sum"], [305, 1, 1, "", "unique"]], "polars.Expr.bin": [[307, 1, 1, "", "contains"], [308, 1, 1, "", "decode"], [309, 1, 1, "", "encode"], [310, 1, 1, "", "ends_with"], [311, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[315, 1, 1, "", "get_categories"], [316, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[337, 1, 1, "", "base_utc_offset"], [338, 1, 1, "", "cast_time_unit"], [339, 1, 1, "", "combine"], [340, 1, 1, "", "convert_time_zone"], [341, 1, 1, "", "date"], [342, 1, 1, "", "datetime"], [343, 1, 1, "", "day"], [344, 1, 1, "", "days"], [345, 1, 1, "", "dst_offset"], [346, 1, 1, "", "epoch"], [347, 1, 1, "", "hour"], [348, 1, 1, "", "hours"], [349, 1, 1, "", "is_leap_year"], [350, 1, 1, "", "iso_year"], [351, 1, 1, "", "microsecond"], [352, 1, 1, "", "microseconds"], [353, 1, 1, "", "millisecond"], [354, 1, 1, "", "milliseconds"], [355, 1, 1, "", "minute"], [356, 1, 1, "", "minutes"], [357, 1, 1, "", "month"], [358, 1, 1, "", "month_end"], [359, 1, 1, "", "month_start"], [360, 1, 1, "", "nanosecond"], [361, 1, 1, "", "nanoseconds"], [362, 1, 1, "", "offset_by"], [363, 1, 1, "", "ordinal_day"], [364, 1, 1, "", "quarter"], [365, 1, 1, "", "replace_time_zone"], [366, 1, 1, "", "round"], [367, 1, 1, "", "second"], [368, 1, 1, "", "seconds"], [369, 1, 1, "", "strftime"], [370, 1, 1, "", "time"], [371, 1, 1, "", "timestamp"], [372, 1, 1, "", "to_string"], [373, 1, 1, "", "truncate"], [374, 1, 1, "", "week"], [375, 1, 1, "", "weekday"], [376, 1, 1, "", "with_time_unit"], [377, 1, 1, "", "year"]], "polars.Expr.list": [[425, 1, 1, "", "all"], [426, 1, 1, "", "any"], [427, 1, 1, "", "arg_max"], [428, 1, 1, "", "arg_min"], [429, 1, 1, "", "concat"], [430, 1, 1, "", "contains"], [431, 1, 1, "", "count_match"], [432, 1, 1, "", "count_matches"], [433, 1, 1, "", "diff"], [434, 1, 1, "", "difference"], [435, 1, 1, "", "drop_nulls"], [436, 1, 1, "", "eval"], [437, 1, 1, "", "explode"], [438, 1, 1, "", "first"], [439, 1, 1, "", "get"], [440, 1, 1, "", "head"], [441, 1, 1, "", "intersection"], [442, 1, 1, "", "join"], [443, 1, 1, "", "last"], [444, 1, 1, "", "len"], [445, 1, 1, "", "lengths"], [446, 1, 1, "", "max"], [447, 1, 1, "", "mean"], [448, 1, 1, "", "min"], [449, 1, 1, "", "reverse"], [450, 1, 1, "", "set_difference"], [451, 1, 1, "", "set_intersection"], [452, 1, 1, "", "set_symmetric_difference"], [453, 1, 1, "", "set_union"], [454, 1, 1, "", "shift"], [455, 1, 1, "", "slice"], [456, 1, 1, "", "sort"], [457, 1, 1, "", "sum"], [458, 1, 1, "", "symmetric_difference"], [459, 1, 1, "", "tail"], [460, 1, 1, "", "take"], [461, 1, 1, "", "to_struct"], [462, 1, 1, "", "union"], [463, 1, 1, "", "unique"]], "polars.Expr.meta": [[477, 1, 1, "", "eq"], [478, 1, 1, "", "has_multiple_outputs"], [479, 1, 1, "", "is_regex_projection"], [480, 1, 1, "", "ne"], [481, 1, 1, "", "output_name"], [482, 1, 1, "", "pop"], [483, 1, 1, "", "root_names"], [484, 1, 1, "", "tree_format"], [485, 1, 1, "", "undo_aliases"], [486, 1, 1, "", "write_json"]], "polars.Expr.str": [[547, 1, 1, "", "concat"], [548, 1, 1, "", "contains"], [549, 1, 1, "", "count_match"], [550, 1, 1, "", "count_matches"], [551, 1, 1, "", "decode"], [552, 1, 1, "", "encode"], [553, 1, 1, "", "ends_with"], [554, 1, 1, "", "explode"], [555, 1, 1, "", "extract"], [556, 1, 1, "", "extract_all"], [557, 1, 1, "", "extract_groups"], [558, 1, 1, "", "json_extract"], [559, 1, 1, "", "json_path_match"], [560, 1, 1, "", "len_bytes"], [561, 1, 1, "", "len_chars"], [562, 1, 1, "", "lengths"], [563, 1, 1, "", "ljust"], [564, 1, 1, "", "lstrip"], [565, 1, 1, "", "n_chars"], [566, 1, 1, "", "parse_int"], [567, 1, 1, "", "replace"], [568, 1, 1, "", "replace_all"], [569, 1, 1, "", "rjust"], [570, 1, 1, "", "rstrip"], [571, 1, 1, "", "slice"], [572, 1, 1, "", "split"], [573, 1, 1, "", "split_exact"], [574, 1, 1, "", "splitn"], [575, 1, 1, "", "starts_with"], [576, 1, 1, "", "strip"], [577, 1, 1, "", "strip_chars"], [578, 1, 1, "", "strip_chars_end"], [579, 1, 1, "", "strip_chars_start"], [580, 1, 1, "", "strip_prefix"], [581, 1, 1, "", "strip_suffix"], [582, 1, 1, "", "strptime"], [583, 1, 1, "", "to_date"], [584, 1, 1, "", "to_datetime"], [585, 1, 1, "", "to_decimal"], [586, 1, 1, "", "to_lowercase"], [587, 1, 1, "", "to_time"], [588, 1, 1, "", "to_titlecase"], [589, 1, 1, "", "to_uppercase"], [590, 1, 1, "", "zfill"]], "polars.Expr.struct": [[591, 1, 1, "", "field"], [592, 1, 1, "", "rename_fields"]], "polars.Float32": [[44, 1, 1, "", "__init__"]], "polars.Float64": [[45, 1, 1, "", "__init__"]], "polars.Int16": [[46, 1, 1, "", "__init__"]], "polars.Int32": [[47, 1, 1, "", "__init__"]], "polars.Int64": [[48, 1, 1, "", "__init__"]], "polars.Int8": [[49, 1, 1, "", "__init__"]], "polars.LazyFrame": [[704, 1, 1, "", "approx_n_unique"], [705, 1, 1, "", "approx_unique"], [706, 1, 1, "", "bottom_k"], [707, 1, 1, "", "cache"], [708, 1, 1, "", "cast"], [709, 1, 1, "", "clear"], [710, 1, 1, "", "clone"], [711, 1, 1, "", "collect"], [712, 1, 1, "", "collect_async"], [713, 2, 1, "", "columns"], [714, 1, 1, "", "deserialize"], [715, 1, 1, "", "drop"], [716, 1, 1, "", "drop_nulls"], [717, 2, 1, "", "dtypes"], [718, 1, 1, "", "explain"], [719, 1, 1, "", "explode"], [720, 1, 1, "", "fetch"], [721, 1, 1, "", "fill_nan"], [722, 1, 1, "", "fill_null"], [723, 1, 1, "", "filter"], [724, 1, 1, "", "first"], [725, 1, 1, "", "from_json"], [726, 1, 1, "", "group_by"], [727, 1, 1, "", "group_by_dynamic"], [728, 1, 1, "", "group_by_rolling"], [729, 1, 1, "", "groupby"], [730, 1, 1, "", "groupby_dynamic"], [731, 1, 1, "", "groupby_rolling"], [732, 1, 1, "", "head"], [733, 1, 1, "", "inspect"], [734, 1, 1, "", "interpolate"], [735, 1, 1, "", "join"], [736, 1, 1, "", "join_asof"], [737, 1, 1, "", "last"], [738, 1, 1, "", "lazy"], [739, 1, 1, "", "limit"], [740, 1, 1, "", "map"], [741, 1, 1, "", "map_batches"], [742, 1, 1, "", "max"], [743, 1, 1, "", "mean"], [744, 1, 1, "", "median"], [745, 1, 1, "", "melt"], [746, 1, 1, "", "merge_sorted"], [747, 1, 1, "", "min"], [748, 1, 1, "", "null_count"], [749, 1, 1, "", "pipe"], [750, 1, 1, "", "profile"], [751, 1, 1, "", "quantile"], [752, 1, 1, "", "read_json"], [753, 1, 1, "", "rename"], [754, 1, 1, "", "reverse"], [755, 2, 1, "", "schema"], [756, 1, 1, "", "select"], [757, 1, 1, "", "select_seq"], [758, 1, 1, "", "serialize"], [759, 1, 1, "", "set_sorted"], [760, 1, 1, "", "shift"], [761, 1, 1, "", "shift_and_fill"], [762, 1, 1, "", "show_graph"], [50, 1, 1, "", "sink_csv"], [51, 1, 1, "", "sink_ipc"], [52, 1, 1, "", "sink_parquet"], [763, 1, 1, "", "slice"], [764, 1, 1, "", "sort"], [765, 1, 1, "", "std"], [766, 1, 1, "", "sum"], [767, 1, 1, "", "tail"], [768, 1, 1, "", "take_every"], [769, 1, 1, "", "top_k"], [770, 1, 1, "", "unique"], [771, 1, 1, "", "unnest"], [772, 1, 1, "", "update"], [773, 1, 1, "", "var"], [774, 2, 1, "", "width"], [775, 1, 1, "", "with_columns"], [776, 1, 1, "", "with_columns_seq"], [777, 1, 1, "", "with_context"], [778, 1, 1, "", "with_row_count"], [779, 1, 1, "", "write_json"]], "polars.List": [[53, 1, 1, "", "__init__"]], "polars.Null": [[54, 1, 1, "", "__init__"]], "polars.Object": [[55, 1, 1, "", "__init__"]], "polars.SQLContext": [[1146, 1, 1, "", "__enter__"], [1146, 1, 1, "", "__exit__"], [1146, 1, 1, "", "__init__"], [56, 1, 1, "", "execute"], [57, 1, 1, "", "register"], [58, 1, 1, "", "register_globals"], [59, 1, 1, "", "register_many"], [60, 1, 1, "", "tables"], [61, 1, 1, "", "unregister"]], "polars.Series": [[804, 1, 1, "", "abs"], [805, 1, 1, "", "alias"], [806, 1, 1, "", "all"], [807, 1, 1, "", "any"], [808, 1, 1, "", "append"], [809, 1, 1, "", "apply"], [810, 1, 1, "", "arccos"], [811, 1, 1, "", "arccosh"], [812, 1, 1, "", "arcsin"], [813, 1, 1, "", "arcsinh"], [814, 1, 1, "", "arctan"], [815, 1, 1, "", "arctanh"], [816, 1, 1, "", "arg_max"], [817, 1, 1, "", "arg_min"], [818, 1, 1, "", "arg_sort"], [819, 1, 1, "", "arg_true"], [820, 1, 1, "", "arg_unique"], [830, 1, 1, "", "bottom_k"], [831, 1, 1, "", "cast"], [832, 3, 1, "", "cat"], [838, 1, 1, "", "cbrt"], [839, 1, 1, "", "ceil"], [840, 1, 1, "", "chunk_lengths"], [841, 1, 1, "", "clear"], [842, 1, 1, "", "clip"], [843, 1, 1, "", "clip_max"], [844, 1, 1, "", "clip_min"], [845, 1, 1, "", "clone"], [846, 1, 1, "", "cos"], [847, 1, 1, "", "cosh"], [848, 1, 1, "", "cummax"], [849, 1, 1, "", "cummin"], [850, 1, 1, "", "cumprod"], [851, 1, 1, "", "cumsum"], [852, 1, 1, "", "cumulative_eval"], [853, 1, 1, "", "cut"], [854, 1, 1, "", "describe"], [855, 1, 1, "", "diff"], [856, 1, 1, "", "dot"], [857, 1, 1, "", "drop_nans"], [858, 1, 1, "", "drop_nulls"], [859, 3, 1, "", "dt"], [905, 3, 1, "", "dtype"], [906, 1, 1, "", "entropy"], [907, 1, 1, "", "estimated_size"], [908, 1, 1, "", "ewm_mean"], [909, 1, 1, "", "ewm_std"], [910, 1, 1, "", "ewm_var"], [911, 1, 1, "", "exp"], [912, 1, 1, "", "explode"], [913, 1, 1, "", "extend"], [914, 1, 1, "", "extend_constant"], [915, 1, 1, "", "fill_nan"], [916, 1, 1, "", "fill_null"], [917, 1, 1, "", "filter"], [918, 3, 1, "", "flags"], [919, 1, 1, "", "floor"], [920, 1, 1, "", "get_chunks"], [921, 1, 1, "", "has_validity"], [922, 1, 1, "", "hash"], [923, 1, 1, "", "head"], [924, 1, 1, "", "hist"], [925, 1, 1, "", "implode"], [926, 3, 1, "", "inner_dtype"], [927, 1, 1, "", "interpolate"], [928, 1, 1, "", "is_between"], [929, 1, 1, "", "is_boolean"], [930, 1, 1, "", "is_duplicated"], [931, 1, 1, "", "is_empty"], [932, 1, 1, "", "is_finite"], [933, 1, 1, "", "is_first"], [934, 1, 1, "", "is_first_distinct"], [935, 1, 1, "", "is_float"], [936, 1, 1, "", "is_in"], [937, 1, 1, "", "is_infinite"], [938, 1, 1, "", "is_integer"], [939, 1, 1, "", "is_last"], [940, 1, 1, "", "is_last_distinct"], [941, 1, 1, "", "is_nan"], [942, 1, 1, "", "is_not_nan"], [943, 1, 1, "", "is_not_null"], [944, 1, 1, "", "is_null"], [945, 1, 1, "", "is_numeric"], [946, 1, 1, "", "is_sorted"], [947, 1, 1, "", "is_temporal"], [948, 1, 1, "", "is_unique"], [949, 1, 1, "", "is_utf8"], [950, 1, 1, "", "item"], [951, 1, 1, "", "kurtosis"], [952, 1, 1, "", "len"], [953, 1, 1, "", "limit"], [954, 3, 1, "", "list"], [994, 1, 1, "", "log"], [995, 1, 1, "", "log10"], [996, 1, 1, "", "log1p"], [997, 1, 1, "", "lower_bound"], [998, 1, 1, "", "map_dict"], [999, 1, 1, "", "map_elements"], [1000, 1, 1, "", "max"], [1001, 1, 1, "", "mean"], [1002, 1, 1, "", "median"], [1003, 1, 1, "", "min"], [1004, 1, 1, "", "mode"], [1005, 1, 1, "", "n_chunks"], [1006, 1, 1, "", "n_unique"], [1007, 3, 1, "", "name"], [1008, 1, 1, "", "nan_max"], [1009, 1, 1, "", "nan_min"], [1010, 1, 1, "", "new_from_index"], [1011, 1, 1, "", "not_"], [1012, 1, 1, "", "null_count"], [1013, 1, 1, "", "pct_change"], [1014, 1, 1, "", "peak_max"], [1015, 1, 1, "", "peak_min"], [1016, 1, 1, "", "product"], [1017, 1, 1, "", "qcut"], [1018, 1, 1, "", "quantile"], [1019, 1, 1, "", "rank"], [1020, 1, 1, "", "rechunk"], [1021, 1, 1, "", "reinterpret"], [1022, 1, 1, "", "rename"], [1023, 1, 1, "", "reshape"], [1024, 1, 1, "", "reverse"], [1025, 1, 1, "", "rle"], [1026, 1, 1, "", "rle_id"], [1027, 1, 1, "", "rolling_apply"], [1028, 1, 1, "", "rolling_map"], [1029, 1, 1, "", "rolling_max"], [1030, 1, 1, "", "rolling_mean"], [1031, 1, 1, "", "rolling_median"], [1032, 1, 1, "", "rolling_min"], [1033, 1, 1, "", "rolling_quantile"], [1034, 1, 1, "", "rolling_skew"], [1035, 1, 1, "", "rolling_std"], [1036, 1, 1, "", "rolling_sum"], [1037, 1, 1, "", "rolling_var"], [1038, 1, 1, "", "round"], [1039, 1, 1, "", "sample"], [1040, 1, 1, "", "search_sorted"], [1041, 1, 1, "", "series_equal"], [1042, 1, 1, "", "set"], [1043, 1, 1, "", "set_at_idx"], [1044, 1, 1, "", "set_sorted"], [1045, 3, 1, "", "shape"], [1046, 1, 1, "", "shift"], [1047, 1, 1, "", "shift_and_fill"], [1048, 1, 1, "", "shrink_dtype"], [1049, 1, 1, "", "shrink_to_fit"], [1050, 1, 1, "", "shuffle"], [1051, 1, 1, "", "sign"], [1052, 1, 1, "", "sin"], [1053, 1, 1, "", "sinh"], [1054, 1, 1, "", "skew"], [1055, 1, 1, "", "slice"], [1056, 1, 1, "", "sort"], [1057, 1, 1, "", "sqrt"], [1058, 1, 1, "", "std"], [1059, 3, 1, "", "str"], [1109, 1, 1, "", "sum"], [1110, 1, 1, "", "tail"], [1111, 1, 1, "", "take"], [1112, 1, 1, "", "take_every"], [1113, 1, 1, "", "tan"], [1114, 1, 1, "", "tanh"], [1115, 1, 1, "", "to_arrow"], [1116, 1, 1, "", "to_dummies"], [1117, 1, 1, "", "to_frame"], [1118, 1, 1, "", "to_init_repr"], [1119, 1, 1, "", "to_list"], [1120, 1, 1, "", "to_numpy"], [1121, 1, 1, "", "to_pandas"], [1122, 1, 1, "", "to_physical"], [1123, 1, 1, "", "top_k"], [1124, 1, 1, "", "unique"], [1125, 1, 1, "", "unique_counts"], [1126, 1, 1, "", "upper_bound"], [1127, 1, 1, "", "value_counts"], [1128, 1, 1, "", "var"], [1129, 1, 1, "", "view"], [1130, 1, 1, "", "zip_with"]], "polars.Series.arr": [[821, 1, 1, "", "max"], [822, 1, 1, "", "min"], [823, 1, 1, "", "sum"], [824, 1, 1, "", "unique"]], "polars.Series.bin": [[825, 1, 1, "", "contains"], [826, 1, 1, "", "decode"], [827, 1, 1, "", "encode"], [828, 1, 1, "", "ends_with"], [829, 1, 1, "", "starts_with"]], "polars.Series.cat": [[833, 1, 1, "", "get_categories"], [834, 1, 1, "", "is_local"], [835, 1, 1, "", "set_ordering"], [836, 1, 1, "", "to_local"], [837, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[860, 1, 1, "", "base_utc_offset"], [861, 1, 1, "", "cast_time_unit"], [862, 1, 1, "", "combine"], [863, 1, 1, "", "convert_time_zone"], [864, 1, 1, "", "date"], [865, 1, 1, "", "datetime"], [866, 1, 1, "", "day"], [867, 1, 1, "", "days"], [868, 1, 1, "", "dst_offset"], [869, 1, 1, "", "epoch"], [870, 1, 1, "", "hour"], [871, 1, 1, "", "hours"], [872, 1, 1, "", "is_leap_year"], [873, 1, 1, "", "iso_year"], [874, 1, 1, "", "max"], [875, 1, 1, "", "mean"], [876, 1, 1, "", "median"], [877, 1, 1, "", "microsecond"], [878, 1, 1, "", "microseconds"], [879, 1, 1, "", "millisecond"], [880, 1, 1, "", "milliseconds"], [881, 1, 1, "", "min"], [882, 1, 1, "", "minute"], [883, 1, 1, "", "minutes"], [884, 1, 1, "", "month"], [885, 1, 1, "", "month_end"], [886, 1, 1, "", "month_start"], [887, 1, 1, "", "nanosecond"], [888, 1, 1, "", "nanoseconds"], [889, 1, 1, "", "offset_by"], [890, 1, 1, "", "ordinal_day"], [891, 1, 1, "", "quarter"], [892, 1, 1, "", "replace_time_zone"], [893, 1, 1, "", "round"], [894, 1, 1, "", "second"], [895, 1, 1, "", "seconds"], [896, 1, 1, "", "strftime"], [897, 1, 1, "", "time"], [898, 1, 1, "", "timestamp"], [899, 1, 1, "", "to_string"], [900, 1, 1, "", "truncate"], [901, 1, 1, "", "week"], [902, 1, 1, "", "weekday"], [903, 1, 1, "", "with_time_unit"], [904, 1, 1, "", "year"]], "polars.Series.list": [[955, 1, 1, "", "all"], [956, 1, 1, "", "any"], [957, 1, 1, "", "arg_max"], [958, 1, 1, "", "arg_min"], [959, 1, 1, "", "concat"], [960, 1, 1, "", "contains"], [961, 1, 1, "", "count_match"], [962, 1, 1, "", "count_matches"], [963, 1, 1, "", "diff"], [964, 1, 1, "", "difference"], [965, 1, 1, "", "drop_nulls"], [966, 1, 1, "", "eval"], [967, 1, 1, "", "explode"], [968, 1, 1, "", "first"], [969, 1, 1, "", "get"], [970, 1, 1, "", "head"], [971, 1, 1, "", "intersection"], [972, 1, 1, "", "join"], [973, 1, 1, "", "last"], [974, 1, 1, "", "len"], [975, 1, 1, "", "lengths"], [976, 1, 1, "", "max"], [977, 1, 1, "", "mean"], [978, 1, 1, "", "min"], [979, 1, 1, "", "reverse"], [980, 1, 1, "", "set_difference"], [981, 1, 1, "", "set_intersection"], [982, 1, 1, "", "set_symmetric_difference"], [983, 1, 1, "", "set_union"], [984, 1, 1, "", "shift"], [985, 1, 1, "", "slice"], [986, 1, 1, "", "sort"], [987, 1, 1, "", "sum"], [988, 1, 1, "", "symmetric_difference"], [989, 1, 1, "", "tail"], [990, 1, 1, "", "take"], [991, 1, 1, "", "to_struct"], [992, 1, 1, "", "union"], [993, 1, 1, "", "unique"]], "polars.Series.str": [[1060, 1, 1, "", "concat"], [1061, 1, 1, "", "contains"], [1062, 1, 1, "", "count_match"], [1063, 1, 1, "", "count_matches"], [1064, 1, 1, "", "decode"], [1065, 1, 1, "", "encode"], [1066, 1, 1, "", "ends_with"], [1067, 1, 1, "", "explode"], [1068, 1, 1, "", "extract"], [1069, 1, 1, "", "extract_all"], [1070, 1, 1, "", "extract_groups"], [1071, 1, 1, "", "json_extract"], [1072, 1, 1, "", "json_path_match"], [1073, 1, 1, "", "len_bytes"], [1074, 1, 1, "", "len_chars"], [1075, 1, 1, "", "lengths"], [1076, 1, 1, "", "ljust"], [1077, 1, 1, "", "lstrip"], [1078, 1, 1, "", "n_chars"], [1079, 1, 1, "", "parse_int"], [1080, 1, 1, "", "replace"], [1081, 1, 1, "", "replace_all"], [1082, 1, 1, "", "rjust"], [1083, 1, 1, "", "rstrip"], [1084, 1, 1, "", "slice"], [1085, 1, 1, "", "split"], [1086, 1, 1, "", "split_exact"], [1087, 1, 1, "", "splitn"], [1088, 1, 1, "", "starts_with"], [1089, 1, 1, "", "strip"], [1090, 1, 1, "", "strip_chars"], [1091, 1, 1, "", "strip_chars_end"], [1092, 1, 1, "", "strip_chars_start"], [1093, 1, 1, "", "strip_prefix"], [1094, 1, 1, "", "strip_suffix"], [1095, 1, 1, "", "strptime"], [1096, 1, 1, "", "to_date"], [1097, 1, 1, "", "to_datetime"], [1098, 1, 1, "", "to_decimal"], [1099, 1, 1, "", "to_lowercase"], [1100, 1, 1, "", "to_time"], [1101, 1, 1, "", "to_titlecase"], [1102, 1, 1, "", "to_uppercase"], [1103, 1, 1, "", "zfill"]], "polars.Series.struct": [[1104, 1, 1, "", "field"], [1105, 3, 1, "", "fields"], [1106, 1, 1, "", "rename_fields"], [1107, 3, 1, "", "schema"], [1108, 1, 1, "", "unnest"]], "polars.StringCache": [[62, 1, 1, "", "__init__"]], "polars.Struct": [[63, 1, 1, "", "__init__"]], "polars.Time": [[64, 1, 1, "", "__init__"]], "polars.UInt16": [[65, 1, 1, "", "__init__"]], "polars.UInt32": [[66, 1, 1, "", "__init__"]], "polars.UInt64": [[67, 1, 1, "", "__init__"]], "polars.UInt8": [[68, 1, 1, "", "__init__"]], "polars.Unknown": [[69, 1, 1, "", "__init__"]], "polars.Utf8": [[70, 1, 1, "", "__init__"]], "polars.api": [[72, 4, 1, "", "register_dataframe_namespace"], [73, 4, 1, "", "register_expr_namespace"], [74, 4, 1, "", "register_lazyframe_namespace"], [75, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[253, 1, 1, "", "__iter__"], [254, 1, 1, "", "agg"], [255, 1, 1, "", "all"], [256, 1, 1, "", "apply"], [257, 1, 1, "", "count"], [258, 1, 1, "", "first"], [259, 1, 1, "", "head"], [260, 1, 1, "", "last"], [261, 1, 1, "", "map_groups"], [262, 1, 1, "", "max"], [263, 1, 1, "", "mean"], [264, 1, 1, "", "median"], [265, 1, 1, "", "min"], [266, 1, 1, "", "n_unique"], [267, 1, 1, "", "quantile"], [268, 1, 1, "", "sum"], [269, 1, 1, "", "tail"]], "polars.exceptions": [[82, 5, 1, "", "ArrowError"], [83, 5, 1, "", "ColumnNotFoundError"], [84, 5, 1, "", "ComputeError"], [85, 5, 1, "", "DuplicateError"], [86, 5, 1, "", "InvalidOperationError"], [87, 5, 1, "", "NoDataError"], [88, 5, 1, "", "NoRowsReturnedError"], [89, 5, 1, "", "PolarsPanicError"], [90, 5, 1, "", "RowsError"], [91, 5, 1, "", "SchemaError"], [92, 5, 1, "", "SchemaFieldNotFoundError"], [93, 5, 1, "", "ShapeError"], [94, 5, 1, "", "StructFieldNotFoundError"], [95, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[105, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[780, 1, 1, "", "agg"], [781, 1, 1, "", "all"], [782, 1, 1, "", "apply"], [783, 1, 1, "", "count"], [784, 1, 1, "", "first"], [785, 1, 1, "", "head"], [786, 1, 1, "", "last"], [787, 1, 1, "", "map_groups"], [788, 1, 1, "", "max"], [789, 1, 1, "", "mean"], [790, 1, 1, "", "median"], [791, 1, 1, "", "min"], [792, 1, 1, "", "n_unique"], [793, 1, 1, "", "quantile"], [794, 1, 1, "", "sum"], [795, 1, 1, "", "tail"]], "polars.selectors": [[802, 4, 1, "", "all"], [802, 4, 1, "", "by_dtype"], [802, 4, 1, "", "by_name"], [802, 4, 1, "", "categorical"], [802, 4, 1, "", "contains"], [802, 4, 1, "", "date"], [802, 4, 1, "", "datetime"], [802, 4, 1, "", "duration"], [802, 4, 1, "", "ends_with"], [802, 4, 1, "", "expand_selector"], [802, 4, 1, "", "first"], [802, 4, 1, "", "float"], [802, 4, 1, "", "integer"], [802, 4, 1, "", "is_selector"], [802, 4, 1, "", "last"], [802, 4, 1, "", "matches"], [802, 4, 1, "", "numeric"], [802, 4, 1, "", "starts_with"], [802, 4, 1, "", "string"], [802, 4, 1, "", "temporal"], [802, 4, 1, "", "time"]], "polars.testing": [[130, 4, 1, "", "assert_frame_equal"], [131, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[132, 0, 1, "", "column"], [133, 4, 1, "", "columns"], [134, 4, 1, "", "create_list_strategy"], [135, 4, 1, "", "dataframes"], [136, 4, 1, "", "load_profile"], [137, 4, 1, "", "series"], [138, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[132, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 160, 913], "api": [1, 72, 73, 74, 75, 701], "provid": 1, "new": 1, "function": [1, 141, 689, 700, 802], "avail": 1, "registr": 1, "exampl": [1, 802, 1147], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1147], "arrai": [2, 682, 1131], "binari": [3, 683, 695, 1133], "boolean": [4, 684, 1134], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 141], "activate_decim": 6, "load": [7, 141], "load_from_fil": 8, "restore_default": 9, "save": [10, 141], "save_to_fil": 11, "set_ascii_t": 12, "set_fmt_float": 13, "set_fmt_str_length": 14, "set_streaming_chunk_s": 15, "set_tbl_cell_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_verbos": 27, "state": [28, 141], "datafram": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 275], "write_avro": 29, "write_csv": 30, "write_databas": 31, "write_delta": 32, "write_excel": 33, "write_ipc": 34, "write_ipc_stream": 35, "write_json": [36, 486, 779], "write_ndjson": 37, "write_parquet": 38, "datatyp": 39, "date": [40, 341, 633, 864], "datetim": [41, 342, 636, 865], "decim": 42, "durat": [43, 639], "float32": 44, "float64": 45, "int16": 46, "int32": 47, "int64": 48, "int8": 49, "lazyfram": [50, 51, 52, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799], "sink_csv": 50, "sink_ipc": 51, "sink_parquet": 52, "list": [53, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 691, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1140], "null": 54, "object": 55, "sqlcontext": [56, 57, 58, 59, 60, 61], "execut": 56, "regist": 57, "register_glob": 58, "register_mani": 59, "tabl": 60, "unregist": 61, "stringcach": [62, 700], "struct": [63, 591, 592, 672, 697, 1104, 1105, 1106, 1107, 1108, 1144], "time": [64, 370, 676, 897], "uint16": 65, "uint32": 66, "uint64": 67, "uint8": 68, "unknown": 69, "utf8": 70, "align_fram": 71, "register_dataframe_namespac": 72, "register_expr_namespac": 73, "register_lazyframe_namespac": 74, "register_series_namespac": 75, "build_info": 76, "collect_al": 77, "collect_all_async": 78, "concat": [79, 429, 547, 959, 1060], "disable_string_cach": 80, "enable_string_cach": 81, "except": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 279], "arrowerror": 82, "columnnotfounderror": 83, "computeerror": 84, "duplicateerror": 85, "invalidoperationerror": 86, "nodataerror": 87, "norowsreturnederror": 88, "polarspanicerror": 89, "rowserror": 90, "schemaerror": 91, "schemafieldnotfounderror": 92, "shapeerror": 93, "structfieldnotfounderror": 94, "toomanyrowsreturnederror": 95, "from_arrow": 96, "from_datafram": 97, "from_dict": [98, 99], "from_numpi": 100, "from_panda": 101, "from_record": 102, "from_repr": 103, "get_index_typ": 104, "io": 105, "csv": [105, 702], "batched_read": 105, "batchedcsvread": [105, 702], "next_batch": 105, "read_avro": 106, "read_csv": 107, "read_csv_batch": 108, "read_databas": 109, "read_database_uri": 110, "read_delta": 111, "read_excel": 112, "read_ipc": 113, "read_ipc_schema": 114, "read_ipc_stream": 115, "read_json": [116, 752], "read_ndjson": 117, "read_od": 118, "read_parquet": 119, "read_parquet_schema": 120, "scan_csv": 121, "scan_delta": 122, "scan_iceberg": 123, "scan_ipc": 124, "scan_ndjson": 125, "scan_parquet": 126, "scan_pyarrow_dataset": 127, "set_random_se": 128, "show_vers": 129, "test": [130, 131, 132, 133, 134, 135, 136, 137, 138, 1147], "assert_frame_equ": 130, "assert_series_equ": 131, "parametr": [132, 133, 134, 135, 136, 137, 138, 1147], "column": [132, 133, 151, 687, 713], "create_list_strategi": 134, "load_profil": 136, "seri": [137, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1139], "set_profil": 138, "threadpool_s": 139, "using_string_cach": 140, "option": 141, "current": 141, "us": 141, "context": 141, "manag": 141, "decor": 141, "aggreg": [142, 280, 703, 803], "__dataframe__": 143, "appli": [144, 256, 289, 615, 782, 809], "approx_n_uniqu": [145, 290, 616, 704], "approx_uniqu": [146, 705], "bottom_k": [147, 312, 706, 830], "cast": [148, 314, 708, 831], "clear": [149, 709, 841], "clone": [150, 710, 845], "corr": [152, 626], "describ": [153, 854], "drop": [154, 715], "drop_in_plac": 155, "drop_nul": [156, 336, 435, 716, 858, 965], "dtype": [157, 717, 905], "estimated_s": [158, 907], "explod": [159, 386, 437, 554, 719, 912, 967, 1067], "fill_nan": [161, 388, 721, 915], "fill_nul": [162, 389, 722, 916], "filter": [163, 390, 723, 917], "find_idx_by_nam": 164, "flag": [165, 918], "fold": [166, 643], "frame_equ": 167, "get_column": [168, 169], "glimps": 170, "group_bi": [171, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 726, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795], "group_by_dynam": [172, 727], "group_by_rol": [173, 728], "groupbi": [174, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 729, 798], "groupby_dynam": [175, 730], "groupby_rol": [176, 731], "hash_row": 177, "head": [178, 259, 400, 440, 647, 732, 785, 923, 970], "height": 179, "hstack": 180, "insert_at_idx": 181, "interpol": [182, 403, 734, 927], "is_dupl": [183, 405, 930], "is_empti": [184, 931], "is_uniqu": [185, 418, 948], "item": [186, 950], "iter_row": 187, "iter_slic": 188, "join": [189, 442, 735, 972], "join_asof": [190, 736], "lazi": [191, 738], "limit": [192, 424, 739, 953], "map_row": 193, "max": [194, 262, 302, 446, 474, 656, 742, 788, 821, 874, 976, 1000], "mean": [195, 263, 447, 475, 658, 743, 789, 875, 977, 1001], "median": [196, 264, 476, 659, 744, 790, 876, 1002], "melt": [197, 745], "merge_sort": [198, 746], "min": [199, 265, 303, 448, 487, 660, 747, 791, 822, 881, 978, 1003], "n_chunk": [200, 1005], "n_uniqu": [201, 266, 491, 662, 792, 1006], "null_count": [202, 497, 748, 1012], "partition_bi": 203, "pipe": [204, 503, 749], "pivot": 205, "product": [206, 506, 1016], "quantil": [207, 267, 508, 664, 751, 793, 1018], "rechunk": [208, 511, 1020], "renam": [209, 753, 1022], "replac": [210, 567, 1080], "replace_at_idx": 211, "revers": [212, 449, 515, 754, 979, 1024], "row": [213, 214], "rows_by_kei": 215, "sampl": [216, 531, 1039], "schema": [217, 755, 1107], "select": [218, 277, 669, 694, 756, 801, 1142], "select_seq": [219, 757], "set_sort": [220, 533, 759, 1044], "shape": [221, 1045], "shift": [222, 454, 534, 760, 984, 1046], "shift_and_fil": [223, 535, 761, 1047], "shrink_to_fit": [224, 1049], "slice": [225, 455, 542, 571, 763, 985, 1055, 1084], "sort": [226, 456, 543, 764, 986, 1056], "std": [227, 546, 671, 765, 1058], "sum": [228, 268, 304, 457, 595, 673, 766, 794, 823, 987, 1109], "tail": [229, 269, 459, 596, 675, 767, 795, 989, 1110], "take_everi": [230, 598, 768, 1112], "to_arrow": [231, 1115], "to_dict": [232, 233], "to_dummi": [234, 1116], "to_init_repr": [235, 1118], "to_numpi": [236, 1120], "to_panda": [237, 1121], "to_seri": 238, "to_struct": [239, 461, 991], "top_k": [240, 602, 769, 1123], "transpos": 241, "uniqu": [242, 305, 463, 604, 770, 824, 993, 1124], "unnest": [243, 771, 1108], "unstack": 244, "updat": [245, 772], "upsampl": 246, "var": [247, 608, 679, 773, 1128], "vstack": 248, "width": [249, 774], "with_column": [250, 775], "with_columns_seq": [251, 776], "with_row_count": [252, 778], "__iter__": 253, "agg": [254, 780], "all": [255, 285, 425, 611, 781, 806, 955], "count": [257, 324, 627, 783], "first": [258, 391, 438, 642, 724, 784, 968], "last": [260, 421, 443, 651, 737, 786, 973], "map_group": [261, 655, 787], "attribut": [270, 796, 1132], "comput": [271, 688, 1136], "descript": [272, 797, 1137], "export": [273, 1138], "miscellan": [276, 693, 700, 800, 1141], "manipul": [277, 694, 801, 1142], "data": 278, "type": 278, "numer": [278, 695], "tempor": [278, 698, 1145], "nest": 278, "other": 278, "expr": [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610], "ab": [281, 804], "add": 282, "agg_group": 283, "alia": [284, 805], "and_": 286, "ani": [287, 426, 613, 807, 956], "append": [288, 808], "arcco": [291, 810], "arccosh": [292, 811], "arcsin": [293, 812], "arcsinh": [294, 813], "arctan": [295, 814], "arctanh": [296, 815], "arg_max": [297, 427, 816, 957], "arg_min": [298, 428, 817, 958], "arg_sort": [299, 818], "arg_tru": [300, 819], "arg_uniqu": [301, 820], "arr": [302, 303, 304, 305, 821, 822, 823, 824], "backward_fil": 306, "bin": [307, 308, 309, 310, 311, 825, 826, 827, 828, 829], "contain": [307, 430, 548, 825, 960, 1061], "decod": [308, 551, 826, 1064], "encod": [309, 552, 827, 1065], "ends_with": [310, 553, 828, 1066], "starts_with": [311, 575, 829, 1088], "cach": [313, 707], "cat": [315, 316, 832, 833, 834, 835, 836, 837], "get_categori": [315, 833], "set_ord": [316, 835], "cbrt": [317, 838], "ceil": [318, 839], "clip": [319, 842], "clip_max": [320, 843], "clip_min": [321, 844], "co": [322, 846], "cosh": [323, 847], "cumcount": 325, "cummax": [326, 848], "cummin": [327, 849], "cumprod": [328, 850], "cumsum": [329, 631, 851], "cumulative_ev": [330, 852], "cut": [331, 853], "degre": 332, "diff": [333, 433, 855, 963], "dot": [334, 856], "drop_nan": [335, 857], "dt": [337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904], "base_utc_offset": [337, 860], "cast_time_unit": [338, 861], "combin": [339, 862], "convert_time_zon": [340, 863], "dai": [343, 344, 866, 867], "dst_offset": [345, 868], "epoch": [346, 869], "hour": [347, 348, 870, 871], "is_leap_year": [349, 872], "iso_year": [350, 873], "microsecond": [351, 352, 877, 878], "millisecond": [353, 354, 879, 880], "minut": [355, 356, 882, 883], "month": [357, 884], "month_end": [358, 885], "month_start": [359, 886], "nanosecond": [360, 361, 887, 888], "offset_bi": [362, 889], "ordinal_dai": [363, 890], "quarter": [364, 891], "replace_time_zon": [365, 892], "round": [366, 530, 893, 1038], "second": [367, 368, 894, 895], "strftime": [369, 896], "timestamp": [371, 898], "to_str": [372, 899], "truncat": [373, 900], "week": [374, 901], "weekdai": [375, 902], "with_time_unit": [376, 903], "year": [377, 904], "entropi": [378, 906], "eq": [379, 477], "eq_miss": 380, "ewm_mean": [381, 908], "ewm_std": [382, 909], "ewm_var": [383, 910], "exclud": [384, 641], "exp": [385, 911], "extend_const": [387, 914], "flatten": 392, "floor": [393, 919], "floordiv": 394, "forward_fil": 395, "from_json": [396, 725], "ge": 397, "gt": 398, "hash": [399, 922], "implod": [401, 648, 925], "inspect": [402, 733], "is_between": [404, 928], "is_finit": [406, 932], "is_first": [407, 933], "is_first_distinct": [408, 934], "is_in": [409, 936], "is_infinit": [410, 937], "is_last": [411, 939], "is_last_distinct": [412, 940], "is_nan": [413, 941], "is_not": 414, "is_not_nan": [415, 942], "is_not_nul": [416, 943], "is_nul": [417, 944], "keep_nam": 419, "kurtosi": [420, 951], "le": 422, "len": [423, 444, 952, 974], "count_match": [431, 432, 549, 550, 961, 962, 1062, 1063], "differ": [434, 964], "eval": [436, 966], "get": [439, 969], "intersect": [441, 971], "length": [445, 562, 975, 1075], "set_differ": [450, 980], "set_intersect": [451, 981], "set_symmetric_differ": [452, 982], "set_union": [453, 983], "symmetric_differ": [458, 988], "take": [460, 597, 990, 1111], "union": [462, 992], "log": [464, 994], "log10": [465, 995], "log1p": [466, 996], "lower_bound": [467, 997], "lt": 468, "map": [469, 653, 740], "map_alia": 470, "map_batch": [471, 654, 741], "map_dict": [472, 998], "map_el": [473, 999], "meta": [477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 692], "has_multiple_output": 478, "is_regex_project": 479, "ne": [480, 494], "output_nam": 481, "pop": 482, "root_nam": 483, "tree_format": 484, "undo_alias": 485, "mod": 488, "mode": [489, 1004], "mul": 490, "nan_max": [492, 1008], "nan_min": [493, 1009], "ne_miss": 495, "not_": [496, 1011], "or_": 498, "over": 499, "pct_chang": [500, 1013], "peak_max": [501, 1014], "peak_min": [502, 1015], "pow": 504, "prefix": 505, "qcut": [507, 1017], "radian": 509, "rank": [510, 1019], "reinterpret": [512, 1021], "repeat_bi": 513, "reshap": [514, 1023], "rle": [516, 1025], "rle_id": [517, 1026], "roll": 518, "rolling_appli": [519, 1027], "rolling_map": [520, 1028], "rolling_max": [521, 1029], "rolling_mean": [522, 1030], "rolling_median": [523, 1031], "rolling_min": [524, 1032], "rolling_quantil": [525, 1033], "rolling_skew": [526, 1034], "rolling_std": [527, 1035], "rolling_sum": [528, 1036], "rolling_var": [529, 1037], "search_sort": [532, 1040], "shrink_dtyp": [536, 1048], "shuffl": [537, 1050], "sign": [538, 1051], "sin": [539, 1052], "sinh": [540, 1053], "skew": [541, 1054], "sort_bi": 544, "sqrt": [545, 1057], "str": [547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103], "extract": [555, 1068], "extract_al": [556, 1069], "extract_group": [557, 1070], "json_extract": [558, 1071], "json_path_match": [559, 1072], "len_byt": [560, 1073], "len_char": [561, 1074], "ljust": [563, 1076], "lstrip": [564, 1077], "n_char": [565, 1078], "parse_int": [566, 1079], "replace_al": [568, 1081], "rjust": [569, 1082], "rstrip": [570, 1083], "split": [572, 1085], "split_exact": [573, 1086], "splitn": [574, 1087], "strip": [576, 1089], "strip_char": [577, 1090], "strip_chars_end": [578, 1091], "strip_chars_start": [579, 1092], "strip_prefix": [580, 1093], "strip_suffix": [581, 1094], "strptime": [582, 1095], "to_dat": [583, 1096], "to_datetim": [584, 1097], "to_decim": [585, 1098], "to_lowercas": [586, 1099], "to_tim": [587, 1100], "to_titlecas": [588, 1101], "to_uppercas": [589, 1102], "zfill": [590, 1103], "field": [591, 1104, 1105], "rename_field": [592, 1106], "sub": 593, "suffix": 594, "tan": [599, 1113], "tanh": [600, 1114], "to_phys": [601, 1122], "truediv": 603, "unique_count": [605, 1125], "upper_bound": [606, 1126], "value_count": [607, 1127], "where": 609, "xor": 610, "all_horizont": 612, "any_horizont": 614, "arang": 617, "arctan2": 618, "arctan2d": 619, "arg_sort_bi": 620, "arg_wher": 621, "avg": 622, "coalesc": 623, "concat_list": 624, "concat_str": 625, "cov": 628, "cumfold": 629, "cumreduc": 630, "cumsum_horizont": 632, "date_rang": [634, 635], "datetime_rang": [637, 638], "element": 640, "format": 644, "from_epoch": 645, "group": 646, "int_rang": [649, 650], "lit": 652, "max_horizont": 657, "min_horizont": 661, "ones": 663, "reduc": 665, "repeat": 666, "rolling_corr": 667, "rolling_cov": 668, "sql_expr": 670, "sum_horizont": 674, "time_rang": [677, 678], "when": 680, "zero": 681, "categori": [685, 1135], "col": 686, "name": [687, 1007], "express": 690, "oper": [695, 802], "conjunct": 695, "comparison": 695, "string": [696, 1143], "window": 699, "convers": 700, "parallel": 700, "random": 700, "refer": 701, "input": 702, "output": 702, "feather": 702, "ipc": 702, "parquet": 702, "databas": 702, "json": 702, "avro": 702, "spreadsheet": 702, "apach": 702, "iceberg": 702, "delta": 702, "lake": 702, "dataset": 702, "collect": 711, "collect_async": 712, "deseri": 714, "explain": 718, "fetch": 720, "profil": [750, 1147], "serial": 758, "show_graph": 762, "with_context": 777, "lazygroupbi": [780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795], "read": 800, "write": 800, "logic": 800, "plan": 800, "selector": 802, "import": 802, "set": [802, 1042], "is_loc": 834, "to_loc": 836, "uses_lexical_ord": 837, "chunk_length": 840, "get_chunk": 920, "has_valid": 921, "hist": 924, "inner_dtyp": 926, "is_boolean": 929, "is_float": 935, "is_integ": 938, "is_numer": 945, "is_sort": 946, "is_tempor": 947, "is_utf8": 949, "new_from_index": 1010, "series_equ": 1041, "set_at_idx": 1043, "to_fram": 1117, "to_list": 1119, "view": 1129, "zip_with": 1130, "sql": 1146, "method": 1146, "assert": 1147, "primit": 1147, "strategi": 1147, "helper": 1147, "util": 1148}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.read_csv": [[107, "polars-read-csv"]], "polars.read_delta": [[111, "polars-read-delta"]], "polars.read_parquet": [[119, "polars-read-parquet"]], "polars.testing.parametric.series": [[137, "polars-testing-parametric-series"]], "polars.show_versions": [[129, "polars-show-versions"]], "polars.exceptions.TooManyRowsReturnedError": [[95, "polars-exceptions-toomanyrowsreturnederror"]], "polars.set_random_seed": [[128, "polars-set-random-seed"]], "polars.collect_all": [[77, "polars-collect-all"]], "polars.exceptions.NoDataError": [[87, "polars-exceptions-nodataerror"]], "polars.read_avro": [[106, "polars-read-avro"]], "polars.testing.parametric.create_list_strategy": [[134, "polars-testing-parametric-create-list-strategy"]], "polars.api.register_series_namespace": [[75, "polars-api-register-series-namespace"]], "polars.exceptions.InvalidOperationError": [[86, "polars-exceptions-invalidoperationerror"]], "polars.read_database_uri": [[110, "polars-read-database-uri"]], "polars.from_dicts": [[99, "polars-from-dicts"]], "polars.exceptions.SchemaError": [[91, "polars-exceptions-schemaerror"]], "polars.testing.parametric.set_profile": [[138, "polars-testing-parametric-set-profile"]], "polars.exceptions.ArrowError": [[82, "polars-exceptions-arrowerror"]], "polars.scan_parquet": [[126, "polars-scan-parquet"]], "polars.from_pandas": [[101, "polars-from-pandas"]], "polars.read_parquet_schema": [[120, "polars-read-parquet-schema"]], "polars.DataFrame.cast": [[148, "polars-dataframe-cast"]], "polars.from_repr": [[103, "polars-from-repr"]], "polars.read_json": [[116, "polars-read-json"]], "polars.build_info": [[76, "polars-build-info"]], "Config": [[141, "config"]], "Config options": [[141, "config-options"]], "Config load, save, and current state": [[141, "config-load-save-and-current-state"]], "Use as a context manager": [[141, "use-as-a-context-manager"]], "Use as a function decorator": [[141, "use-as-a-function-decorator"]], "polars.get_index_type": [[104, "polars-get-index-type"]], "polars.concat": [[79, "polars-concat"]], "polars.read_csv_batched": [[108, "polars-read-csv-batched"]], "polars.testing.parametric.column": [[132, "polars-testing-parametric-column"]], "polars.DataFrame.apply": [[144, "polars-dataframe-apply"]], "polars.DataFrame.approx_unique": [[146, "polars-dataframe-approx-unique"]], "polars.from_dict": [[98, "polars-from-dict"]], "polars.testing.parametric.dataframes": [[135, "polars-testing-parametric-dataframes"]], "polars.exceptions.ComputeError": [[84, "polars-exceptions-computeerror"]], "polars.exceptions.NoRowsReturnedError": [[88, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.SchemaFieldNotFoundError": [[92, "polars-exceptions-schemafieldnotfounderror"]], "polars.DataFrame.clear": [[149, "polars-dataframe-clear"]], "polars.exceptions.PolarsPanicError": [[89, "polars-exceptions-polarspanicerror"]], "polars.testing.parametric.load_profile": [[136, "polars-testing-parametric-load-profile"]], "polars.read_ods": [[118, "polars-read-ods"]], "polars.scan_pyarrow_dataset": [[127, "polars-scan-pyarrow-dataset"]], "polars.using_string_cache": [[140, "polars-using-string-cache"]], "polars.read_ipc": [[113, "polars-read-ipc"]], "polars.disable_string_cache": [[80, "polars-disable-string-cache"]], "polars.exceptions.ColumnNotFoundError": [[83, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ShapeError": [[93, "polars-exceptions-shapeerror"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[105, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_ipc_schema": [[114, "polars-read-ipc-schema"]], "polars.scan_delta": [[122, "polars-scan-delta"]], "polars.scan_iceberg": [[123, "polars-scan-iceberg"]], "polars.testing.assert_frame_equal": [[130, "polars-testing-assert-frame-equal"]], "polars.testing.assert_series_equal": [[131, "polars-testing-assert-series-equal"]], "polars.testing.parametric.columns": [[133, "polars-testing-parametric-columns"]], "Aggregation": [[142, "aggregation"], [803, "aggregation"], [703, "aggregation"], [280, "aggregation"]], "polars.scan_csv": [[121, "polars-scan-csv"]], "polars.exceptions.RowsError": [[90, "polars-exceptions-rowserror"]], "polars.scan_ipc": [[124, "polars-scan-ipc"]], "polars.from_records": [[102, "polars-from-records"]], "polars.DataFrame.__dataframe__": [[143, "polars-dataframe-dataframe"]], "polars.from_arrow": [[96, "polars-from-arrow"]], "polars.read_ipc_stream": [[115, "polars-read-ipc-stream"]], "polars.read_ndjson": [[117, "polars-read-ndjson"]], "polars.DataFrame.approx_n_unique": [[145, "polars-dataframe-approx-n-unique"]], "polars.threadpool_size": [[139, "polars-threadpool-size"]], "polars.DataFrame.bottom_k": [[147, "polars-dataframe-bottom-k"]], "polars.from_numpy": [[100, "polars-from-numpy"]], "polars.read_database": [[109, "polars-read-database"]], "polars.scan_ndjson": [[125, "polars-scan-ndjson"]], "polars.enable_string_cache": [[81, "polars-enable-string-cache"]], "polars.exceptions.DuplicateError": [[85, "polars-exceptions-duplicateerror"]], "polars.from_dataframe": [[97, "polars-from-dataframe"]], "polars.exceptions.StructFieldNotFoundError": [[94, "polars-exceptions-structfieldnotfounderror"]], "polars.read_excel": [[112, "polars-read-excel"]], "polars.collect_all_async": [[78, "polars-collect-all-async"]], "polars.DataFrame.write_delta": [[32, "polars-dataframe-write-delta"]], "polars.StringCache": [[62, "polars-stringcache"]], "polars.DataFrame.write_excel": [[33, "polars-dataframe-write-excel"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.DataFrame.write_ipc_stream": [[35, "polars-dataframe-write-ipc-stream"]], "polars.Config.set_tbl_hide_dtype_separator": [[24, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Utf8": [[70, "polars-utf8"]], "polars.api.register_lazyframe_namespace": [[74, "polars-api-register-lazyframe-namespace"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.DataFrame.write_json": [[36, "polars-dataframe-write-json"]], "polars.Float64": [[45, "polars-float64"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Config.set_tbl_hide_column_names": [[22, "polars-config-set-tbl-hide-column-names"]], "polars.Time": [[64, "polars-time"]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_cell_alignment": [[16, "polars-config-set-tbl-cell-alignment"]], "polars.UInt64": [[67, "polars-uint64"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1147, "examples"], [802, "examples"]], "polars.DataFrame.write_avro": [[29, "polars-dataframe-write-avro"]], "polars.DataFrame.write_database": [[31, "polars-dataframe-write-database"]], "polars.Date": [[40, "polars-date"]], "polars.LazyFrame.sink_ipc": [[51, "polars-lazyframe-sink-ipc"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.DataFrame.write_parquet": [[38, "polars-dataframe-write-parquet"]], "polars.Int8": [[49, "polars-int8"]], "polars.Object": [[55, "polars-object"]], "polars.SQLContext.tables": [[60, "polars-sqlcontext-tables"]], "polars.DataFrame.write_csv": [[30, "polars-dataframe-write-csv"]], "polars.Config.set_tbl_hide_column_data_types": [[21, "polars-config-set-tbl-hide-column-data-types"]], "polars.SQLContext.register_many": [[59, "polars-sqlcontext-register-many"]], "polars.Config.set_tbl_dataframe_shape_below": [[19, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[20, "polars-config-set-tbl-formatting"]], "polars.LazyFrame.sink_csv": [[50, "polars-lazyframe-sink-csv"]], "polars.Unknown": [[69, "polars-unknown"]], "polars.Config.set_fmt_str_lengths": [[14, "polars-config-set-fmt-str-lengths"]], "polars.Datetime": [[41, "polars-datetime"]], "polars.Config.set_tbl_cols": [[17, "polars-config-set-tbl-cols"]], "polars.Decimal": [[42, "polars-decimal"]], "Index": [[0, "index"]], "polars.Int32": [[47, "polars-int32"]], "polars.Config.set_streaming_chunk_size": [[15, "polars-config-set-streaming-chunk-size"]], "polars.List": [[53, "polars-list"]], "polars.DataFrame.write_ipc": [[34, "polars-dataframe-write-ipc"]], "polars.align_frames": [[71, "polars-align-frames"]], "polars.Array": [[2, "polars-array"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.DataType": [[39, "polars-datatype"]], "polars.Config.set_tbl_column_data_type_inline": [[18, "polars-config-set-tbl-column-data-type-inline"]], "polars.Duration": [[43, "polars-duration"]], "polars.api.register_dataframe_namespace": [[72, "polars-api-register-dataframe-namespace"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Config.set_tbl_width_chars": [[26, "polars-config-set-tbl-width-chars"]], "polars.SQLContext.register": [[57, "polars-sqlcontext-register"]], "polars.UInt32": [[66, "polars-uint32"]], "polars.LazyFrame.sink_parquet": [[52, "polars-lazyframe-sink-parquet"]], "polars.UInt8": [[68, "polars-uint8"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.SQLContext.unregister": [[61, "polars-sqlcontext-unregister"]], "polars.Config.set_tbl_rows": [[25, "polars-config-set-tbl-rows"]], "polars.Float32": [[44, "polars-float32"]], "polars.SQLContext.execute": [[56, "polars-sqlcontext-execute"]], "polars.api.register_expr_namespace": [[73, "polars-api-register-expr-namespace"]], "polars.DataFrame.write_ndjson": [[37, "polars-dataframe-write-ndjson"]], "polars.Int64": [[48, "polars-int64"]], "polars.Config.set_fmt_float": [[13, "polars-config-set-fmt-float"]], "polars.Struct": [[63, "polars-struct"]], "polars.Binary": [[3, "polars-binary"]], "polars.UInt16": [[65, "polars-uint16"]], "polars.SQLContext.register_globals": [[58, "polars-sqlcontext-register-globals"]], "polars.Config.set_verbose": [[27, "polars-config-set-verbose"]], "polars.Int16": [[46, "polars-int16"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Null": [[54, "polars-null"]], "polars.Config.state": [[28, "polars-config-state"]], "polars.Series.str.slice": [[1084, "polars-series-str-slice"]], "polars.Series.str.strip_suffix": [[1094, "polars-series-str-strip-suffix"]], "polars.Series.str.splitn": [[1087, "polars-series-str-splitn"]], "polars.Series.top_k": [[1123, "polars-series-top-k"]], "polars.Series.str.split": [[1085, "polars-series-str-split"]], "polars.Series.str.lengths": [[1075, "polars-series-str-lengths"]], "polars.Series.tan": [[1113, "polars-series-tan"]], "polars.Series.str.json_extract": [[1071, "polars-series-str-json-extract"]], "polars.Series.take_every": [[1112, "polars-series-take-every"]], "polars.Series.str.extract_all": [[1069, "polars-series-str-extract-all"]], "polars.Series.str.extract_groups": [[1070, "polars-series-str-extract-groups"]], "polars.Series.skew": [[1054, "polars-series-skew"]], "polars.Series.str.strip_chars_end": [[1091, "polars-series-str-strip-chars-end"]], "polars.Series.to_numpy": [[1120, "polars-series-to-numpy"]], "polars.Series.std": [[1058, "polars-series-std"]], "polars.Series.str.count_matches": [[1063, "polars-series-str-count-matches"]], "polars.Series.str.to_lowercase": [[1099, "polars-series-str-to-lowercase"]], "polars.Series.to_physical": [[1122, "polars-series-to-physical"]], "polars.Series.to_pandas": [[1121, "polars-series-to-pandas"]], "polars.Series.struct.fields": [[1105, "polars-series-struct-fields"]], "polars.Series.str.ljust": [[1076, "polars-series-str-ljust"]], "polars.Series.str.count_match": [[1062, "polars-series-str-count-match"]], "polars.Series.str.n_chars": [[1078, "polars-series-str-n-chars"]], "polars.Series.str.concat": [[1060, "polars-series-str-concat"]], "polars.Series.str.replace_all": [[1081, "polars-series-str-replace-all"]], "polars.Series.str.to_uppercase": [[1102, "polars-series-str-to-uppercase"]], "polars.Series.str.parse_int": [[1079, "polars-series-str-parse-int"]], "polars.Series.str.rjust": [[1082, "polars-series-str-rjust"]], "polars.Series.str.explode": [[1067, "polars-series-str-explode"]], "polars.Series.str.contains": [[1061, "polars-series-str-contains"]], "polars.Series.str.len_chars": [[1074, "polars-series-str-len-chars"]], "polars.Series.sort": [[1056, "polars-series-sort"]], "polars.Series.to_init_repr": [[1118, "polars-series-to-init-repr"]], "polars.Series.str.len_bytes": [[1073, "polars-series-str-len-bytes"]], "polars.Series.struct.field": [[1104, "polars-series-struct-field"]], "polars.Series.str.strip_chars_start": [[1092, "polars-series-str-strip-chars-start"]], "polars.Series.to_arrow": [[1115, "polars-series-to-arrow"]], "polars.Series.shuffle": [[1050, "polars-series-shuffle"]], "polars.Series.str.lstrip": [[1077, "polars-series-str-lstrip"]], "polars.Series.str.decode": [[1064, "polars-series-str-decode"]], "polars.Series.str.split_exact": [[1086, "polars-series-str-split-exact"]], "polars.Series.str.to_time": [[1100, "polars-series-str-to-time"]], "polars.Series.to_list": [[1119, "polars-series-to-list"]], "polars.Series.slice": [[1055, "polars-series-slice"]], "polars.Series.str.encode": [[1065, "polars-series-str-encode"]], "polars.Series.str.strptime": [[1095, "polars-series-str-strptime"]], "polars.Series.str.extract": [[1068, "polars-series-str-extract"]], "polars.Series.str.strip": [[1089, "polars-series-str-strip"]], "polars.Series.sinh": [[1053, "polars-series-sinh"]], "polars.Series.str.to_date": [[1096, "polars-series-str-to-date"]], "polars.Series.struct.rename_fields": [[1106, "polars-series-struct-rename-fields"]], "polars.Series.sin": [[1052, "polars-series-sin"]], "polars.Series.str.to_decimal": [[1098, "polars-series-str-to-decimal"]], "polars.Series.to_frame": [[1117, "polars-series-to-frame"]], "polars.Series.str.zfill": [[1103, "polars-series-str-zfill"]], "polars.Series.sign": [[1051, "polars-series-sign"]], "polars.Series.str.starts_with": [[1088, "polars-series-str-starts-with"]], "polars.Series.unique": [[1124, "polars-series-unique"]], "polars.Series.str": [[1059, "polars-series-str"]], "polars.Series.str.strip_chars": [[1090, "polars-series-str-strip-chars"]], "polars.Series.take": [[1111, "polars-series-take"]], "polars.Series.str.ends_with": [[1066, "polars-series-str-ends-with"]], "polars.Series.sum": [[1109, "polars-series-sum"]], "polars.Series.tanh": [[1114, "polars-series-tanh"]], "polars.Series.str.json_path_match": [[1072, "polars-series-str-json-path-match"]], "polars.Series.str.replace": [[1080, "polars-series-str-replace"]], "polars.Series.str.strip_prefix": [[1093, "polars-series-str-strip-prefix"]], "polars.Series.sqrt": [[1057, "polars-series-sqrt"]], "polars.Series.str.rstrip": [[1083, "polars-series-str-rstrip"]], "polars.Series.struct.schema": [[1107, "polars-series-struct-schema"]], "polars.Series.tail": [[1110, "polars-series-tail"]], "polars.Series.struct.unnest": [[1108, "polars-series-struct-unnest"]], "polars.Series.str.to_titlecase": [[1101, "polars-series-str-to-titlecase"]], "polars.Series.str.to_datetime": [[1097, "polars-series-str-to-datetime"]], "polars.Series.to_dummies": [[1116, "polars-series-to-dummies"]], "polars.Series.null_count": [[1012, "polars-series-null-count"]], "polars.Series.median": [[1002, "polars-series-median"]], "polars.Series.list.union": [[992, "polars-series-list-union"]], "polars.Series.rename": [[1022, "polars-series-rename"]], "polars.Series.n_chunks": [[1005, "polars-series-n-chunks"]], "polars.Series.quantile": [[1018, "polars-series-quantile"]], "polars.Series.rolling_median": [[1031, "polars-series-rolling-median"]], "polars.Series.shift": [[1046, "polars-series-shift"]], "polars.Series.reshape": [[1023, "polars-series-reshape"]], "polars.Series.shape": [[1045, "polars-series-shape"]], "polars.Series.min": [[1003, "polars-series-min"]], "polars.Series.nan_min": [[1009, "polars-series-nan-min"]], "polars.Series.list.symmetric_difference": [[988, "polars-series-list-symmetric-difference"]], "polars.Series.max": [[1000, "polars-series-max"]], "polars.Series.rle_id": [[1026, "polars-series-rle-id"]], "polars.Series.series_equal": [[1041, "polars-series-series-equal"]], "polars.Series.list.lengths": [[975, "polars-series-list-lengths"]], "polars.Series.log": [[994, "polars-series-log"]], "polars.Series.reinterpret": [[1021, "polars-series-reinterpret"]], "polars.Series.lower_bound": [[997, "polars-series-lower-bound"]], "polars.Series.new_from_index": [[1010, "polars-series-new-from-index"]], "polars.Series.list.set_symmetric_difference": [[982, "polars-series-list-set-symmetric-difference"]], "polars.Series.mean": [[1001, "polars-series-mean"]], "polars.Series.list.shift": [[984, "polars-series-list-shift"]], "polars.Series.rolling_min": [[1032, "polars-series-rolling-min"]], "polars.Series.map_elements": [[999, "polars-series-map-elements"]], "polars.Series.rolling_sum": [[1036, "polars-series-rolling-sum"]], "polars.Series.round": [[1038, "polars-series-round"]], "polars.Series.shrink_to_fit": [[1049, "polars-series-shrink-to-fit"]], "polars.Series.product": [[1016, "polars-series-product"]], "polars.Series.list.to_struct": [[991, "polars-series-list-to-struct"]], "polars.Series.set": [[1042, "polars-series-set"]], "polars.Series.sample": [[1039, "polars-series-sample"]], "polars.Series.list.mean": [[977, "polars-series-list-mean"]], "polars.Series.rolling_apply": [[1027, "polars-series-rolling-apply"]], "polars.Series.map_dict": [[998, "polars-series-map-dict"]], "polars.Series.qcut": [[1017, "polars-series-qcut"]], "polars.Series.rolling_var": [[1037, "polars-series-rolling-var"]], "polars.Series.list.max": [[976, "polars-series-list-max"]], "polars.Series.rank": [[1019, "polars-series-rank"]], "polars.Series.rolling_map": [[1028, "polars-series-rolling-map"]], "polars.Series.list.take": [[990, "polars-series-list-take"]], "polars.Series.rolling_mean": [[1030, "polars-series-rolling-mean"]], "polars.Series.peak_max": [[1014, "polars-series-peak-max"]], "polars.Series.list.min": [[978, "polars-series-list-min"]], "polars.Series.name": [[1007, "polars-series-name"]], "polars.Series.rolling_skew": [[1034, "polars-series-rolling-skew"]], "polars.Series.rechunk": [[1020, "polars-series-rechunk"]], "polars.Series.n_unique": [[1006, "polars-series-n-unique"]], "polars.Series.shrink_dtype": [[1048, "polars-series-shrink-dtype"]], "polars.Series.reverse": [[1024, "polars-series-reverse"]], "polars.Series.rle": [[1025, "polars-series-rle"]], "polars.Series.list.set_intersection": [[981, "polars-series-list-set-intersection"]], "polars.Series.list.sum": [[987, "polars-series-list-sum"]], "polars.Series.list.set_union": [[983, "polars-series-list-set-union"]], "polars.Series.log1p": [[996, "polars-series-log1p"]], "polars.Series.list.sort": [[986, "polars-series-list-sort"]], "polars.Series.search_sorted": [[1040, "polars-series-search-sorted"]], "polars.Series.mode": [[1004, "polars-series-mode"]], "polars.Series.rolling_std": [[1035, "polars-series-rolling-std"]], "polars.Series.set_sorted": [[1044, "polars-series-set-sorted"]], "polars.Series.list.reverse": [[979, "polars-series-list-reverse"]], "polars.Series.list.unique": [[993, "polars-series-list-unique"]], "polars.Series.log10": [[995, "polars-series-log10"]], "polars.Series.list.tail": [[989, "polars-series-list-tail"]], "polars.Series.nan_max": [[1008, "polars-series-nan-max"]], "polars.Series.set_at_idx": [[1043, "polars-series-set-at-idx"]], "polars.Series.list.slice": [[985, "polars-series-list-slice"]], "polars.Series.list.set_difference": [[980, "polars-series-list-set-difference"]], "polars.Series.rolling_quantile": [[1033, "polars-series-rolling-quantile"]], "polars.Series.peak_min": [[1015, "polars-series-peak-min"]], "polars.Series.shift_and_fill": [[1047, "polars-series-shift-and-fill"]], "polars.Series.not_": [[1011, "polars-series-not"]], "polars.Series.rolling_max": [[1029, "polars-series-rolling-max"]], "polars.Series.pct_change": [[1013, "polars-series-pct-change"]], "polars.Series.dt.weekday": [[902, "polars-series-dt-weekday"]], "polars.Series.limit": [[953, "polars-series-limit"]], "polars.Series.is_duplicated": [[930, "polars-series-is-duplicated"]], "polars.Series.is_finite": [[932, "polars-series-is-finite"]], "polars.Series.is_float": [[935, "polars-series-is-float"]], "polars.Series.list.concat": [[959, "polars-series-list-concat"]], "polars.Series.dt.week": [[901, "polars-series-dt-week"]], "polars.Series.list.first": [[968, "polars-series-list-first"]], "polars.Series.is_nan": [[941, "polars-series-is-nan"]], "polars.Series.list": [[954, "polars-series-list"]], "polars.Series.dt.year": [[904, "polars-series-dt-year"]], "polars.Series.list.all": [[955, "polars-series-list-all"]], "polars.Series.is_infinite": [[937, "polars-series-is-infinite"]], "polars.Series.estimated_size": [[907, "polars-series-estimated-size"]], "polars.Series.hash": [[922, "polars-series-hash"]], "polars.Series.list.arg_min": [[958, "polars-series-list-arg-min"]], "polars.Series.kurtosis": [[951, "polars-series-kurtosis"]], "polars.Series.ewm_mean": [[908, "polars-series-ewm-mean"]], "polars.Series.is_unique": [[948, "polars-series-is-unique"]], "polars.Series.dt.truncate": [[900, "polars-series-dt-truncate"]], "polars.Series.fill_null": [[916, "polars-series-fill-null"]], "polars.Series.is_empty": [[931, "polars-series-is-empty"]], "polars.Series.is_first_distinct": [[934, "polars-series-is-first-distinct"]], "polars.Series.is_last": [[939, "polars-series-is-last"]], "polars.Series.is_utf8": [[949, "polars-series-is-utf8"]], "polars.Series.list.difference": [[964, "polars-series-list-difference"]], "polars.Series.list.len": [[974, "polars-series-list-len"]], "polars.Series.is_integer": [[938, "polars-series-is-integer"]], "polars.Series.list.intersection": [[971, "polars-series-list-intersection"]], "polars.Series.explode": [[912, "polars-series-explode"]], "polars.Series.floor": [[919, "polars-series-floor"]], "polars.Series.list.last": [[973, "polars-series-list-last"]], "polars.Series.list.get": [[969, "polars-series-list-get"]], "polars.Series.list.join": [[972, "polars-series-list-join"]], "polars.Series.fill_nan": [[915, "polars-series-fill-nan"]], "polars.Series.ewm_std": [[909, "polars-series-ewm-std"]], "polars.Series.is_not_null": [[943, "polars-series-is-not-null"]], "polars.Series.is_first": [[933, "polars-series-is-first"]], "polars.Series.is_numeric": [[945, "polars-series-is-numeric"]], "polars.Series.is_not_nan": [[942, "polars-series-is-not-nan"]], "polars.Series.dtype": [[905, "polars-series-dtype"]], "polars.Series.extend": [[913, "polars-series-extend"]], "polars.Series.list.explode": [[967, "polars-series-list-explode"]], "polars.Series.is_boolean": [[929, "polars-series-is-boolean"]], "polars.Series.list.count_match": [[961, "polars-series-list-count-match"]], "polars.Series.get_chunks": [[920, "polars-series-get-chunks"]], "polars.Series.is_temporal": [[947, "polars-series-is-temporal"]], "polars.Series.list.eval": [[966, "polars-series-list-eval"]], "polars.Series.inner_dtype": [[926, "polars-series-inner-dtype"]], "polars.Series.is_sorted": [[946, "polars-series-is-sorted"]], "polars.Series.implode": [[925, "polars-series-implode"]], "polars.Series.entropy": [[906, "polars-series-entropy"]], "polars.Series.has_validity": [[921, "polars-series-has-validity"]], "polars.Series.flags": [[918, "polars-series-flags"]], "polars.Series.head": [[923, "polars-series-head"]], "polars.Series.dt.with_time_unit": [[903, "polars-series-dt-with-time-unit"]], "polars.Series.interpolate": [[927, "polars-series-interpolate"]], "polars.Series.len": [[952, "polars-series-len"]], "polars.Series.list.any": [[956, "polars-series-list-any"]], "polars.Series.list.count_matches": [[962, "polars-series-list-count-matches"]], "polars.Series.is_last_distinct": [[940, "polars-series-is-last-distinct"]], "polars.Series.list.arg_max": [[957, "polars-series-list-arg-max"]], "polars.Series.is_null": [[944, "polars-series-is-null"]], "polars.Series.list.diff": [[963, "polars-series-list-diff"]], "polars.Series.item": [[950, "polars-series-item"]], "polars.Series.is_in": [[936, "polars-series-is-in"]], "polars.Series.list.head": [[970, "polars-series-list-head"]], "polars.Series.list.contains": [[960, "polars-series-list-contains"]], "polars.Series.list.drop_nulls": [[965, "polars-series-list-drop-nulls"]], "polars.Series.extend_constant": [[914, "polars-series-extend-constant"]], "polars.Series.is_between": [[928, "polars-series-is-between"]], "polars.Series.exp": [[911, "polars-series-exp"]], "polars.Series.hist": [[924, "polars-series-hist"]], "polars.Series.ewm_var": [[910, "polars-series-ewm-var"]], "polars.Series.filter": [[917, "polars-series-filter"]], "polars.Series.cummin": [[849, "polars-series-cummin"]], "polars.Series.cut": [[853, "polars-series-cut"]], "polars.Series.dt.minutes": [[883, "polars-series-dt-minutes"]], "polars.Series.clip_max": [[843, "polars-series-clip-max"]], "polars.Series.dt.to_string": [[899, "polars-series-dt-to-string"]], "polars.Series.bin.contains": [[825, "polars-series-bin-contains"]], "polars.Series.ceil": [[839, "polars-series-ceil"]], "polars.Series.dt.seconds": [[895, "polars-series-dt-seconds"]], "polars.Series.cat": [[832, "polars-series-cat"]], "polars.Series.clip_min": [[844, "polars-series-clip-min"]], "polars.Series.dt.month_start": [[886, "polars-series-dt-month-start"]], "polars.Series.dt.date": [[864, "polars-series-dt-date"]], "polars.Series.cosh": [[847, "polars-series-cosh"]], "polars.Series.clone": [[845, "polars-series-clone"]], "polars.Series.drop_nans": [[857, "polars-series-drop-nans"]], "polars.Series.clip": [[842, "polars-series-clip"]], "polars.Series.cumprod": [[850, "polars-series-cumprod"]], "polars.Series.cbrt": [[838, "polars-series-cbrt"]], "polars.Series.bin.ends_with": [[828, "polars-series-bin-ends-with"]], "polars.Series.dt.min": [[881, "polars-series-dt-min"]], "polars.Series.dt.replace_time_zone": [[892, "polars-series-dt-replace-time-zone"]], "polars.Series.describe": [[854, "polars-series-describe"]], "polars.Series.dt.is_leap_year": [[872, "polars-series-dt-is-leap-year"]], "polars.Series.dt.minute": [[882, "polars-series-dt-minute"]], "polars.Series.dt.offset_by": [[889, "polars-series-dt-offset-by"]], "polars.Series.drop_nulls": [[858, "polars-series-drop-nulls"]], "polars.Series.dt.microseconds": [[878, "polars-series-dt-microseconds"]], "polars.Series.dt.month_end": [[885, "polars-series-dt-month-end"]], "polars.Series.cat.is_local": [[834, "polars-series-cat-is-local"]], "polars.Series.dt.cast_time_unit": [[861, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.epoch": [[869, "polars-series-dt-epoch"]], "polars.Series.dt.strftime": [[896, "polars-series-dt-strftime"]], "polars.Series.dt.time": [[897, "polars-series-dt-time"]], "polars.Series.cumsum": [[851, "polars-series-cumsum"]], "polars.Series.dt.ordinal_day": [[890, "polars-series-dt-ordinal-day"]], "polars.Series.dt.combine": [[862, "polars-series-dt-combine"]], "polars.Series.dt.hour": [[870, "polars-series-dt-hour"]], "polars.Series.cos": [[846, "polars-series-cos"]], "polars.Series.dot": [[856, "polars-series-dot"]], "polars.Series.dt.dst_offset": [[868, "polars-series-dt-dst-offset"]], "polars.Series.dt.median": [[876, "polars-series-dt-median"]], "polars.Series.dt.nanosecond": [[887, "polars-series-dt-nanosecond"]], "polars.Series.dt.day": [[866, "polars-series-dt-day"]], "polars.Series.cat.uses_lexical_ordering": [[837, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.dt.max": [[874, "polars-series-dt-max"]], "polars.Series.dt.quarter": [[891, "polars-series-dt-quarter"]], "polars.Series.dt.base_utc_offset": [[860, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.mean": [[875, "polars-series-dt-mean"]], "polars.Series.cummax": [[848, "polars-series-cummax"]], "polars.Series.dt.hours": [[871, "polars-series-dt-hours"]], "polars.Series.cat.set_ordering": [[835, "polars-series-cat-set-ordering"]], "polars.Series.dt.days": [[867, "polars-series-dt-days"]], "polars.Series.dt.month": [[884, "polars-series-dt-month"]], "polars.Series.dt.convert_time_zone": [[863, "polars-series-dt-convert-time-zone"]], "polars.Series.clear": [[841, "polars-series-clear"]], "polars.Series.bottom_k": [[830, "polars-series-bottom-k"]], "polars.Series.dt": [[859, "polars-series-dt"]], "polars.Series.bin.decode": [[826, "polars-series-bin-decode"]], "polars.Series.bin.starts_with": [[829, "polars-series-bin-starts-with"]], "polars.Series.diff": [[855, "polars-series-diff"]], "polars.Series.cumulative_eval": [[852, "polars-series-cumulative-eval"]], "polars.Series.dt.datetime": [[865, "polars-series-dt-datetime"]], "polars.Series.dt.round": [[893, "polars-series-dt-round"]], "polars.Series.dt.second": [[894, "polars-series-dt-second"]], "polars.Series.cast": [[831, "polars-series-cast"]], "polars.Series.cat.get_categories": [[833, "polars-series-cat-get-categories"]], "polars.Series.dt.millisecond": [[879, "polars-series-dt-millisecond"]], "polars.Series.dt.timestamp": [[898, "polars-series-dt-timestamp"]], "polars.Series.dt.milliseconds": [[880, "polars-series-dt-milliseconds"]], "polars.Series.dt.iso_year": [[873, "polars-series-dt-iso-year"]], "polars.Series.dt.microsecond": [[877, "polars-series-dt-microsecond"]], "polars.Series.cat.to_local": [[836, "polars-series-cat-to-local"]], "polars.Series.dt.nanoseconds": [[888, "polars-series-dt-nanoseconds"]], "polars.Series.bin.encode": [[827, "polars-series-bin-encode"]], "polars.Series.chunk_lengths": [[840, "polars-series-chunk-lengths"]], "Utils": [[1148, "utils"]], "polars.Series.upper_bound": [[1126, "polars-series-upper-bound"]], "Array": [[1131, "array"], [682, "array"]], "List": [[1140, "list"], [691, "list"]], "Temporal": [[1145, "temporal"], [698, "temporal"], [278, "temporal"]], "polars.Series.view": [[1129, "polars-series-view"]], "Struct": [[1144, "struct"], [697, "struct"]], "Boolean": [[1134, "boolean"], [684, "boolean"]], "polars.Series.value_counts": [[1127, "polars-series-value-counts"]], "String": [[1143, "string"], [696, "string"]], "Manipulation/selection": [[1142, "manipulation-selection"], [801, "manipulation-selection"], [694, "manipulation-selection"], [277, "manipulation-selection"]], "Attributes": [[1132, "attributes"], [796, "attributes"], [270, "attributes"]], "Testing": [[1147, "testing"]], "Asserts": [[1147, "asserts"]], "Parametric testing": [[1147, "parametric-testing"]], "Polars primitives": [[1147, "polars-primitives"]], "Strategy helpers": [[1147, "strategy-helpers"]], "Profiles": [[1147, "profiles"]], "polars.Series.zip_with": [[1130, "polars-series-zip-with"]], "Categories": [[1135, "categories"], [685, "categories"]], "Computation": [[1136, "computation"], [688, "computation"], [271, "computation"]], "polars.Series.unique_counts": [[1125, "polars-series-unique-counts"]], "polars.Series.var": [[1128, "polars-series-var"]], "Export": [[1138, "export"], [273, "export"]], "Descriptive": [[1137, "descriptive"], [797, "descriptive"], [272, "descriptive"]], "SQL": [[1146, "sql"]], "Methods": [[1146, "methods"]], "Miscellaneous": [[1141, "miscellaneous"], [800, "miscellaneous"], [693, "miscellaneous"], [700, "miscellaneous"], [276, "miscellaneous"]], "Binary": [[1133, "binary"], [683, "binary"], [695, "binary"]], "Series": [[1139, "series"]], "polars.Series.arccosh": [[811, "polars-series-arccosh"]], "polars.Series.arg_min": [[817, "polars-series-arg-min"]], "polars.LazyFrame.unnest": [[771, "polars-lazyframe-unnest"]], "polars.Series.all": [[806, "polars-series-all"]], "polars.LazyFrame.std": [[765, "polars-lazyframe-std"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[790, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Series.arctan": [[814, "polars-series-arctan"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[784, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.Series.alias": [[805, "polars-series-alias"]], "polars.LazyFrame.var": [[773, "polars-lazyframe-var"]], "polars.LazyFrame.select": [[756, "polars-lazyframe-select"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[789, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.with_row_count": [[778, "polars-lazyframe-with-row-count"]], "polars.Series.apply": [[809, "polars-series-apply"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[795, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.Series.arr.max": [[821, "polars-series-arr-max"]], "polars.LazyFrame.with_columns_seq": [[776, "polars-lazyframe-with-columns-seq"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[783, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.schema": [[755, "polars-lazyframe-schema"]], "polars.Series.arcsinh": [[813, "polars-series-arcsinh"]], "polars.Series.arg_unique": [[820, "polars-series-arg-unique"]], "polars.LazyFrame.sum": [[766, "polars-lazyframe-sum"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[788, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.shift": [[760, "polars-lazyframe-shift"]], "Selectors": [[802, "selectors"]], "Importing": [[802, "importing"]], "Set operations": [[802, "set-operations"]], "Functions": [[802, "functions"], [689, "functions"], [700, "functions"]], "polars.Series.arr.unique": [[824, "polars-series-arr-unique"]], "polars.Series.arr.sum": [[823, "polars-series-arr-sum"]], "polars.Series.arccos": [[810, "polars-series-arccos"]], "polars.LazyFrame.read_json": [[752, "polars-lazyframe-read-json"]], "polars.Series.arr.min": [[822, "polars-series-arr-min"]], "polars.LazyFrame.top_k": [[769, "polars-lazyframe-top-k"]], "polars.LazyFrame.sort": [[764, "polars-lazyframe-sort"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[793, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.LazyFrame.shift_and_fill": [[761, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[785, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[794, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.profile": [[750, "polars-lazyframe-profile"]], "polars.Series.append": [[808, "polars-series-append"]], "polars.Series.arg_true": [[819, "polars-series-arg-true"]], "polars.Series.arcsin": [[812, "polars-series-arcsin"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[786, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.LazyFrame.rename": [[753, "polars-lazyframe-rename"]], "polars.LazyFrame.tail": [[767, "polars-lazyframe-tail"]], "polars.LazyFrame.set_sorted": [[759, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.take_every": [[768, "polars-lazyframe-take-every"]], "polars.LazyFrame.reverse": [[754, "polars-lazyframe-reverse"]], "polars.LazyFrame.width": [[774, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[780, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.Series.arg_sort": [[818, "polars-series-arg-sort"]], "polars.LazyFrame.serialize": [[758, "polars-lazyframe-serialize"]], "polars.LazyFrame.unique": [[770, "polars-lazyframe-unique"]], "polars.LazyFrame.with_context": [[777, "polars-lazyframe-with-context"]], "polars.LazyFrame.slice": [[763, "polars-lazyframe-slice"]], "polars.LazyFrame.with_columns": [[775, "polars-lazyframe-with-columns"]], "LazyFrame": [[799, "lazyframe"]], "polars.LazyFrame.show_graph": [[762, "polars-lazyframe-show-graph"]], "Read/write logical plan": [[800, "read-write-logical-plan"]], "polars.Series.any": [[807, "polars-series-any"]], "polars.LazyFrame.quantile": [[751, "polars-lazyframe-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[787, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.abs": [[804, "polars-series-abs"]], "polars.Series.arg_max": [[816, "polars-series-arg-max"]], "polars.LazyFrame.write_json": [[779, "polars-lazyframe-write-json"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[781, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[791, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[792, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "GroupBy": [[798, "groupby"], [274, "groupby"]], "polars.LazyFrame.select_seq": [[757, "polars-lazyframe-select-seq"]], "polars.LazyFrame.update": [[772, "polars-lazyframe-update"]], "polars.Series.arctanh": [[815, "polars-series-arctanh"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[782, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.Expr.unique": [[604, "polars-expr-unique"]], "polars.cumfold": [[629, "polars-cumfold"]], "polars.approx_n_unique": [[616, "polars-approx-n-unique"]], "polars.cumsum": [[631, "polars-cumsum"]], "polars.Expr.unique_counts": [[605, "polars-expr-unique-counts"]], "polars.Expr.var": [[608, "polars-expr-var"]], "polars.ones": [[663, "polars-ones"]], "polars.concat_str": [[625, "polars-concat-str"]], "polars.implode": [[648, "polars-implode"]], "polars.sum_horizontal": [[674, "polars-sum-horizontal"]], "polars.first": [[642, "polars-first"]], "polars.map_groups": [[655, "polars-map-groups"]], "polars.cov": [[628, "polars-cov"]], "polars.all": [[611, "polars-all"]], "polars.avg": [[622, "polars-avg"]], "polars.reduce": [[665, "polars-reduce"]], "polars.repeat": [[666, "polars-repeat"]], "polars.rolling_corr": [[667, "polars-rolling-corr"]], "polars.datetime_range": [[637, "polars-datetime-range"]], "polars.arctan2": [[618, "polars-arctan2"]], "polars.date": [[633, "polars-date"]], "polars.mean": [[658, "polars-mean"]], "polars.min_horizontal": [[661, "polars-min-horizontal"]], "polars.quantile": [[664, "polars-quantile"]], "polars.Expr.xor": [[610, "polars-expr-xor"]], "polars.Expr.to_physical": [[601, "polars-expr-to-physical"]], "polars.int_ranges": [[650, "polars-int-ranges"]], "polars.n_unique": [[662, "polars-n-unique"]], "polars.max": [[656, "polars-max"]], "polars.arange": [[617, "polars-arange"]], "polars.exclude": [[641, "polars-exclude"]], "polars.sum": [[673, "polars-sum"]], "polars.Expr.tanh": [[600, "polars-expr-tanh"]], "polars.coalesce": [[623, "polars-coalesce"]], "polars.sql_expr": [[670, "polars-sql-expr"]], "polars.fold": [[643, "polars-fold"]], "polars.max_horizontal": [[657, "polars-max-horizontal"]], "polars.any": [[613, "polars-any"]], "polars.format": [[644, "polars-format"]], "polars.cumsum_horizontal": [[632, "polars-cumsum-horizontal"]], "polars.any_horizontal": [[614, "polars-any-horizontal"]], "polars.element": [[640, "polars-element"]], "polars.cumreduce": [[630, "polars-cumreduce"]], "polars.Expr.value_counts": [[607, "polars-expr-value-counts"]], "polars.Expr.top_k": [[602, "polars-expr-top-k"]], "polars.arg_sort_by": [[620, "polars-arg-sort-by"]], "polars.date_ranges": [[635, "polars-date-ranges"]], "polars.rolling_cov": [[668, "polars-rolling-cov"]], "polars.duration": [[639, "polars-duration"]], "polars.datetime_ranges": [[638, "polars-datetime-ranges"]], "polars.concat_list": [[624, "polars-concat-list"]], "polars.apply": [[615, "polars-apply"]], "polars.Expr.truediv": [[603, "polars-expr-truediv"]], "polars.groups": [[646, "polars-groups"]], "polars.last": [[651, "polars-last"]], "polars.lit": [[652, "polars-lit"]], "polars.std": [[671, "polars-std"]], "polars.int_range": [[649, "polars-int-range"]], "polars.arg_where": [[621, "polars-arg-where"]], "polars.min": [[660, "polars-min"]], "polars.count": [[627, "polars-count"]], "polars.Expr.where": [[609, "polars-expr-where"]], "polars.corr": [[626, "polars-corr"]], "polars.date_range": [[634, "polars-date-range"]], "polars.map": [[653, "polars-map"]], "polars.head": [[647, "polars-head"]], "polars.Expr.upper_bound": [[606, "polars-expr-upper-bound"]], "polars.select": [[669, "polars-select"]], "polars.all_horizontal": [[612, "polars-all-horizontal"]], "polars.median": [[659, "polars-median"]], "polars.from_epoch": [[645, "polars-from-epoch"]], "polars.map_batches": [[654, "polars-map-batches"]], "polars.struct": [[672, "polars-struct"]], "polars.datetime": [[636, "polars-datetime"]], "polars.arctan2d": [[619, "polars-arctan2d"]], "polars.Expr.str.ljust": [[563, "polars-expr-str-ljust"]], "polars.Expr.str.to_time": [[587, "polars-expr-str-to-time"]], "polars.Expr.sin": [[539, "polars-expr-sin"]], "polars.Expr.str.extract_groups": [[557, "polars-expr-str-extract-groups"]], "polars.Expr.tan": [[599, "polars-expr-tan"]], "polars.Expr.round": [[530, "polars-expr-round"]], "polars.Expr.skew": [[541, "polars-expr-skew"]], "polars.Expr.sqrt": [[545, "polars-expr-sqrt"]], "polars.Expr.str.contains": [[548, "polars-expr-str-contains"]], "polars.Expr.rolling_std": [[527, "polars-expr-rolling-std"]], "polars.Expr.str.extract_all": [[556, "polars-expr-str-extract-all"]], "polars.Expr.str.slice": [[571, "polars-expr-str-slice"]], "polars.Expr.sum": [[595, "polars-expr-sum"]], "polars.Expr.sign": [[538, "polars-expr-sign"]], "polars.Expr.std": [[546, "polars-expr-std"]], "polars.Expr.str.decode": [[551, "polars-expr-str-decode"]], "polars.Expr.str.to_decimal": [[585, "polars-expr-str-to-decimal"]], "polars.Expr.str.n_chars": [[565, "polars-expr-str-n-chars"]], "polars.Expr.sort": [[543, "polars-expr-sort"]], "polars.Expr.str.zfill": [[590, "polars-expr-str-zfill"]], "polars.Expr.set_sorted": [[533, "polars-expr-set-sorted"]], "polars.Expr.shuffle": [[537, "polars-expr-shuffle"]], "polars.Expr.str.lengths": [[562, "polars-expr-str-lengths"]], "polars.Expr.str.concat": [[547, "polars-expr-str-concat"]], "polars.Expr.str.json_extract": [[558, "polars-expr-str-json-extract"]], "polars.Expr.str.to_datetime": [[584, "polars-expr-str-to-datetime"]], "polars.Expr.str.strip_prefix": [[580, "polars-expr-str-strip-prefix"]], "polars.Expr.rolling_quantile": [[525, "polars-expr-rolling-quantile"]], "polars.Expr.str.rjust": [[569, "polars-expr-str-rjust"]], "polars.Expr.str.count_matches": [[550, "polars-expr-str-count-matches"]], "polars.Expr.shift_and_fill": [[535, "polars-expr-shift-and-fill"]], "polars.Expr.shrink_dtype": [[536, "polars-expr-shrink-dtype"]], "polars.Expr.str.ends_with": [[553, "polars-expr-str-ends-with"]], "polars.Expr.shift": [[534, "polars-expr-shift"]], "polars.Expr.str.explode": [[554, "polars-expr-str-explode"]], "polars.Expr.slice": [[542, "polars-expr-slice"]], "polars.Expr.str.extract": [[555, "polars-expr-str-extract"]], "polars.Expr.str.replace_all": [[568, "polars-expr-str-replace-all"]], "polars.Expr.str.strptime": [[582, "polars-expr-str-strptime"]], "polars.Expr.sub": [[593, "polars-expr-sub"]], "polars.Expr.take_every": [[598, "polars-expr-take-every"]], "polars.Expr.str.to_date": [[583, "polars-expr-str-to-date"]], "polars.Expr.rolling_skew": [[526, "polars-expr-rolling-skew"]], "polars.Expr.rolling_var": [[529, "polars-expr-rolling-var"]], "polars.Expr.str.rstrip": [[570, "polars-expr-str-rstrip"]], "polars.Expr.str.len_bytes": [[560, "polars-expr-str-len-bytes"]], "polars.Expr.str.to_titlecase": [[588, "polars-expr-str-to-titlecase"]], "polars.Expr.str.strip_chars": [[577, "polars-expr-str-strip-chars"]], "polars.Expr.search_sorted": [[532, "polars-expr-search-sorted"]], "polars.Expr.str.lstrip": [[564, "polars-expr-str-lstrip"]], "polars.Expr.str.count_match": [[549, "polars-expr-str-count-match"]], "polars.Expr.str.strip": [[576, "polars-expr-str-strip"]], "polars.Expr.struct.field": [[591, "polars-expr-struct-field"]], "polars.Expr.str.len_chars": [[561, "polars-expr-str-len-chars"]], "polars.Expr.str.split": [[572, "polars-expr-str-split"]], "polars.Expr.sort_by": [[544, "polars-expr-sort-by"]], "polars.Expr.str.strip_suffix": [[581, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strip_chars_end": [[578, "polars-expr-str-strip-chars-end"]], "polars.Expr.suffix": [[594, "polars-expr-suffix"]], "polars.Expr.take": [[597, "polars-expr-take"]], "polars.Expr.sample": [[531, "polars-expr-sample"]], "polars.Expr.tail": [[596, "polars-expr-tail"]], "polars.Expr.str.parse_int": [[566, "polars-expr-str-parse-int"]], "polars.Expr.str.to_uppercase": [[589, "polars-expr-str-to-uppercase"]], "polars.Expr.str.to_lowercase": [[586, "polars-expr-str-to-lowercase"]], "polars.Expr.sinh": [[540, "polars-expr-sinh"]], "polars.Expr.rolling_sum": [[528, "polars-expr-rolling-sum"]], "polars.Expr.str.replace": [[567, "polars-expr-str-replace"]], "polars.Expr.str.json_path_match": [[559, "polars-expr-str-json-path-match"]], "polars.Expr.str.encode": [[552, "polars-expr-str-encode"]], "polars.Expr.str.splitn": [[574, "polars-expr-str-splitn"]], "polars.Expr.str.split_exact": [[573, "polars-expr-str-split-exact"]], "polars.Expr.struct.rename_fields": [[592, "polars-expr-struct-rename-fields"]], "polars.Expr.str.strip_chars_start": [[579, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.starts_with": [[575, "polars-expr-str-starts-with"]], "polars.Expr.rle_id": [[517, "polars-expr-rle-id"]], "polars.Expr.list.shift": [[454, "polars-expr-list-shift"]], "polars.Expr.rolling_mean": [[522, "polars-expr-rolling-mean"]], "polars.Expr.list.set_symmetric_difference": [[452, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.set_union": [[453, "polars-expr-list-set-union"]], "polars.Expr.list.sort": [[456, "polars-expr-list-sort"]], "polars.Expr.list.take": [[460, "polars-expr-list-take"]], "polars.Expr.ne_missing": [[495, "polars-expr-ne-missing"]], "polars.Expr.meta.is_regex_projection": [[479, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[480, "polars-expr-meta-ne"]], "polars.Expr.prefix": [[505, "polars-expr-prefix"]], "polars.Expr.product": [[506, "polars-expr-product"]], "polars.Expr.quantile": [[508, "polars-expr-quantile"]], "polars.Expr.reinterpret": [[512, "polars-expr-reinterpret"]], "polars.Expr.rolling_map": [[520, "polars-expr-rolling-map"]], "polars.Expr.max": [[474, "polars-expr-max"]], "polars.Expr.meta.undo_aliases": [[485, "polars-expr-meta-undo-aliases"]], "polars.Expr.map_elements": [[473, "polars-expr-map-elements"]], "polars.Expr.lower_bound": [[467, "polars-expr-lower-bound"]], "polars.Expr.n_unique": [[491, "polars-expr-n-unique"]], "polars.Expr.repeat_by": [[513, "polars-expr-repeat-by"]], "polars.Expr.pct_change": [[500, "polars-expr-pct-change"]], "polars.Expr.radians": [[509, "polars-expr-radians"]], "polars.Expr.list.slice": [[455, "polars-expr-list-slice"]], "polars.Expr.log10": [[465, "polars-expr-log10"]], "polars.Expr.mul": [[490, "polars-expr-mul"]], "polars.Expr.null_count": [[497, "polars-expr-null-count"]], "polars.Expr.lt": [[468, "polars-expr-lt"]], "polars.Expr.rolling_apply": [[519, "polars-expr-rolling-apply"]], "polars.Expr.mode": [[489, "polars-expr-mode"]], "polars.Expr.pipe": [[503, "polars-expr-pipe"]], "polars.Expr.meta.has_multiple_outputs": [[478, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.map_alias": [[470, "polars-expr-map-alias"]], "polars.Expr.mod": [[488, "polars-expr-mod"]], "polars.Expr.rank": [[510, "polars-expr-rank"]], "polars.Expr.or_": [[498, "polars-expr-or"]], "polars.Expr.list.sum": [[457, "polars-expr-list-sum"]], "polars.Expr.list.symmetric_difference": [[458, "polars-expr-list-symmetric-difference"]], "polars.Expr.peak_max": [[501, "polars-expr-peak-max"]], "polars.Expr.rolling": [[518, "polars-expr-rolling"]], "polars.Expr.nan_max": [[492, "polars-expr-nan-max"]], "polars.Expr.meta.root_names": [[483, "polars-expr-meta-root-names"]], "polars.Expr.qcut": [[507, "polars-expr-qcut"]], "polars.Expr.rolling_max": [[521, "polars-expr-rolling-max"]], "polars.Expr.meta.eq": [[477, "polars-expr-meta-eq"]], "polars.Expr.rolling_min": [[524, "polars-expr-rolling-min"]], "polars.Expr.list.unique": [[463, "polars-expr-list-unique"]], "polars.Expr.list.tail": [[459, "polars-expr-list-tail"]], "polars.Expr.list.union": [[462, "polars-expr-list-union"]], "polars.Expr.not_": [[496, "polars-expr-not"]], "polars.Expr.map_batches": [[471, "polars-expr-map-batches"]], "polars.Expr.map": [[469, "polars-expr-map"]], "polars.Expr.nan_min": [[493, "polars-expr-nan-min"]], "polars.Expr.list.set_intersection": [[451, "polars-expr-list-set-intersection"]], "polars.Expr.reverse": [[515, "polars-expr-reverse"]], "polars.Expr.median": [[476, "polars-expr-median"]], "polars.Expr.meta.pop": [[482, "polars-expr-meta-pop"]], "polars.Expr.mean": [[475, "polars-expr-mean"]], "polars.Expr.reshape": [[514, "polars-expr-reshape"]], "polars.Expr.log1p": [[466, "polars-expr-log1p"]], "polars.Expr.meta.tree_format": [[484, "polars-expr-meta-tree-format"]], "polars.Expr.meta.write_json": [[486, "polars-expr-meta-write-json"]], "polars.Expr.over": [[499, "polars-expr-over"]], "polars.Expr.pow": [[504, "polars-expr-pow"]], "polars.Expr.map_dict": [[472, "polars-expr-map-dict"]], "polars.Expr.rechunk": [[511, "polars-expr-rechunk"]], "polars.Expr.ne": [[494, "polars-expr-ne"]], "polars.Expr.rle": [[516, "polars-expr-rle"]], "polars.Expr.rolling_median": [[523, "polars-expr-rolling-median"]], "polars.Expr.meta.output_name": [[481, "polars-expr-meta-output-name"]], "polars.Expr.peak_min": [[502, "polars-expr-peak-min"]], "polars.Expr.list.to_struct": [[461, "polars-expr-list-to-struct"]], "polars.Expr.log": [[464, "polars-expr-log"]], "polars.Expr.list.set_difference": [[450, "polars-expr-list-set-difference"]], "polars.Expr.min": [[487, "polars-expr-min"]], "polars.LazyFrame.explain": [[718, "polars-lazyframe-explain"]], "polars.LazyFrame.bottom_k": [[706, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.collect": [[711, "polars-lazyframe-collect"]], "polars.LazyFrame.groupby": [[729, "polars-lazyframe-groupby"]], "Expressions": [[690, "expressions"]], "polars.LazyFrame.explode": [[719, "polars-lazyframe-explode"]], "Meta": [[692, "meta"]], "polars.LazyFrame.pipe": [[749, "polars-lazyframe-pipe"]], "polars.LazyFrame.filter": [[723, "polars-lazyframe-filter"]], "polars.LazyFrame.map": [[740, "polars-lazyframe-map"]], "polars.LazyFrame.head": [[732, "polars-lazyframe-head"]], "polars.time_range": [[677, "polars-time-range"]], "polars.LazyFrame.melt": [[745, "polars-lazyframe-melt"]], "polars.LazyFrame.group_by_dynamic": [[727, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.interpolate": [[734, "polars-lazyframe-interpolate"]], "polars.LazyFrame.null_count": [[748, "polars-lazyframe-null-count"]], "polars.LazyFrame.approx_unique": [[705, "polars-lazyframe-approx-unique"]], "polars.LazyFrame.join": [[735, "polars-lazyframe-join"]], "polars.LazyFrame.groupby_rolling": [[731, "polars-lazyframe-groupby-rolling"]], "polars.col": [[686, "polars-col"]], "polars.LazyFrame.columns": [[713, "polars-lazyframe-columns"]], "polars.LazyFrame.group_by_rolling": [[728, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.cast": [[708, "polars-lazyframe-cast"]], "polars.LazyFrame.join_asof": [[736, "polars-lazyframe-join-asof"]], "polars.LazyFrame.last": [[737, "polars-lazyframe-last"]], "polars.LazyFrame.drop": [[715, "polars-lazyframe-drop"]], "polars.LazyFrame.median": [[744, "polars-lazyframe-median"]], "polars.LazyFrame.collect_async": [[712, "polars-lazyframe-collect-async"]], "polars.LazyFrame.min": [[747, "polars-lazyframe-min"]], "polars.LazyFrame.drop_nulls": [[716, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.groupby_dynamic": [[730, "polars-lazyframe-groupby-dynamic"]], "polars.zeros": [[681, "polars-zeros"]], "Columns / names": [[687, "columns-names"]], "polars.time_ranges": [[678, "polars-time-ranges"]], "polars.LazyFrame.fill_nan": [[721, "polars-lazyframe-fill-nan"]], "Conversion": [[700, "conversion"]], "Parallelization": [[700, "parallelization"]], "Random": [[700, "random"]], "StringCache": [[700, "stringcache"]], "polars.tail": [[675, "polars-tail"]], "polars.LazyFrame.deserialize": [[714, "polars-lazyframe-deserialize"]], "polars.LazyFrame.group_by": [[726, "polars-lazyframe-group-by"]], "polars.var": [[679, "polars-var"]], "polars.LazyFrame.fetch": [[720, "polars-lazyframe-fetch"]], "Window": [[699, "window"]], "polars.LazyFrame.from_json": [[725, "polars-lazyframe-from-json"]], "polars.when": [[680, "polars-when"]], "polars.time": [[676, "polars-time"]], "polars.LazyFrame.inspect": [[733, "polars-lazyframe-inspect"]], "polars.LazyFrame.clone": [[710, "polars-lazyframe-clone"]], "polars.LazyFrame.limit": [[739, "polars-lazyframe-limit"]], "polars.LazyFrame.max": [[742, "polars-lazyframe-max"]], "polars.LazyFrame.lazy": [[738, "polars-lazyframe-lazy"]], "polars.LazyFrame.merge_sorted": [[746, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.cache": [[707, "polars-lazyframe-cache"]], "polars.LazyFrame.map_batches": [[741, "polars-lazyframe-map-batches"]], "polars.LazyFrame.mean": [[743, "polars-lazyframe-mean"]], "Operators": [[695, "operators"]], "Conjunction": [[695, "conjunction"]], "Comparison": [[695, "comparison"]], "Numeric": [[695, "numeric"], [278, "numeric"]], "polars.LazyFrame.fill_null": [[722, "polars-lazyframe-fill-null"]], "polars.LazyFrame.first": [[724, "polars-lazyframe-first"]], "API reference": [[701, "api-reference"]], "polars.LazyFrame.clear": [[709, "polars-lazyframe-clear"]], "polars.LazyFrame.dtypes": [[717, "polars-lazyframe-dtypes"]], "polars.LazyFrame.approx_n_unique": [[704, "polars-lazyframe-approx-n-unique"]], "Input/output": [[702, "input-output"]], "CSV": [[702, "csv"]], "Feather/ IPC": [[702, "feather-ipc"]], "Parquet": [[702, "parquet"]], "Database": [[702, "database"]], "JSON": [[702, "json"]], "AVRO": [[702, "avro"]], "Spreadsheet": [[702, "spreadsheet"]], "Apache Iceberg": [[702, "apache-iceberg"]], "Delta Lake": [[702, "delta-lake"]], "Datasets": [[702, "datasets"]], "BatchedCsvReader": [[702, "batchedcsvreader"]], "polars.Expr.exp": [[385, "polars-expr-exp"]], "polars.Expr.le": [[422, "polars-expr-le"]], "polars.Expr.fill_nan": [[388, "polars-expr-fill-nan"]], "polars.Expr.list.head": [[440, "polars-expr-list-head"]], "polars.Expr.len": [[423, "polars-expr-len"]], "polars.Expr.list.max": [[446, "polars-expr-list-max"]], "polars.Expr.head": [[400, "polars-expr-head"]], "polars.Expr.ewm_mean": [[381, "polars-expr-ewm-mean"]], "polars.Expr.extend_constant": [[387, "polars-expr-extend-constant"]], "polars.Expr.from_json": [[396, "polars-expr-from-json"]], "polars.Expr.dt.year": [[377, "polars-expr-dt-year"]], "polars.Expr.is_duplicated": [[405, "polars-expr-is-duplicated"]], "polars.Expr.kurtosis": [[420, "polars-expr-kurtosis"]], "polars.Expr.last": [[421, "polars-expr-last"]], "polars.Expr.list.first": [[438, "polars-expr-list-first"]], "polars.Expr.is_last_distinct": [[412, "polars-expr-is-last-distinct"]], "polars.Expr.list.join": [[442, "polars-expr-list-join"]], "polars.Expr.list.all": [[425, "polars-expr-list-all"]], "polars.Expr.filter": [[390, "polars-expr-filter"]], "polars.Expr.is_finite": [[406, "polars-expr-is-finite"]], "polars.Expr.is_infinite": [[410, "polars-expr-is-infinite"]], "polars.Expr.exclude": [[384, "polars-expr-exclude"]], "polars.Expr.flatten": [[392, "polars-expr-flatten"]], "polars.Expr.gt": [[398, "polars-expr-gt"]], "polars.Expr.interpolate": [[403, "polars-expr-interpolate"]], "polars.Expr.list.count_matches": [[432, "polars-expr-list-count-matches"]], "polars.Expr.fill_null": [[389, "polars-expr-fill-null"]], "polars.Expr.is_first": [[407, "polars-expr-is-first"]], "polars.Expr.dt.weekday": [[375, "polars-expr-dt-weekday"]], "polars.Expr.is_null": [[417, "polars-expr-is-null"]], "polars.Expr.list.drop_nulls": [[435, "polars-expr-list-drop-nulls"]], "polars.Expr.floordiv": [[394, "polars-expr-floordiv"]], "polars.Expr.eq_missing": [[380, "polars-expr-eq-missing"]], "polars.Expr.is_in": [[409, "polars-expr-is-in"]], "polars.Expr.inspect": [[402, "polars-expr-inspect"]], "polars.Expr.is_not_nan": [[415, "polars-expr-is-not-nan"]], "polars.Expr.list.mean": [[447, "polars-expr-list-mean"]], "polars.Expr.list.min": [[448, "polars-expr-list-min"]], "polars.Expr.list.intersection": [[441, "polars-expr-list-intersection"]], "polars.Expr.list.last": [[443, "polars-expr-list-last"]], "polars.Expr.dt.with_time_unit": [[376, "polars-expr-dt-with-time-unit"]], "polars.Expr.implode": [[401, "polars-expr-implode"]], "polars.Expr.first": [[391, "polars-expr-first"]], "polars.Expr.hash": [[399, "polars-expr-hash"]], "polars.Expr.is_between": [[404, "polars-expr-is-between"]], "polars.Expr.list.count_match": [[431, "polars-expr-list-count-match"]], "polars.Expr.list.get": [[439, "polars-expr-list-get"]], "polars.Expr.list.difference": [[434, "polars-expr-list-difference"]], "polars.Expr.list.concat": [[429, "polars-expr-list-concat"]], "polars.Expr.list.len": [[444, "polars-expr-list-len"]], "polars.Expr.ge": [[397, "polars-expr-ge"]], "polars.Expr.list.arg_max": [[427, "polars-expr-list-arg-max"]], "polars.Expr.is_nan": [[413, "polars-expr-is-nan"]], "polars.Expr.limit": [[424, "polars-expr-limit"]], "polars.Expr.list.any": [[426, "polars-expr-list-any"]], "polars.Expr.eq": [[379, "polars-expr-eq"]], "polars.Expr.floor": [[393, "polars-expr-floor"]], "polars.Expr.is_last": [[411, "polars-expr-is-last"]], "polars.Expr.list.diff": [[433, "polars-expr-list-diff"]], "polars.Expr.is_unique": [[418, "polars-expr-is-unique"]], "polars.Expr.is_not": [[414, "polars-expr-is-not"]], "polars.Expr.list.reverse": [[449, "polars-expr-list-reverse"]], "polars.Expr.entropy": [[378, "polars-expr-entropy"]], "polars.Expr.list.lengths": [[445, "polars-expr-list-lengths"]], "polars.Expr.is_not_null": [[416, "polars-expr-is-not-null"]], "polars.Expr.keep_name": [[419, "polars-expr-keep-name"]], "polars.Expr.list.arg_min": [[428, "polars-expr-list-arg-min"]], "polars.Expr.list.contains": [[430, "polars-expr-list-contains"]], "polars.Expr.list.explode": [[437, "polars-expr-list-explode"]], "polars.Expr.is_first_distinct": [[408, "polars-expr-is-first-distinct"]], "polars.Expr.list.eval": [[436, "polars-expr-list-eval"]], "polars.Expr.forward_fill": [[395, "polars-expr-forward-fill"]], "polars.Expr.ewm_std": [[382, "polars-expr-ewm-std"]], "polars.Expr.explode": [[386, "polars-expr-explode"]], "polars.Expr.ewm_var": [[383, "polars-expr-ewm-var"]], "polars.Expr.bin.ends_with": [[310, "polars-expr-bin-ends-with"]], "polars.Expr.dt.ordinal_day": [[363, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.replace_time_zone": [[365, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.datetime": [[342, "polars-expr-dt-datetime"]], "polars.Expr.clip": [[319, "polars-expr-clip"]], "polars.Expr.cos": [[322, "polars-expr-cos"]], "polars.Expr.dt.iso_year": [[350, "polars-expr-dt-iso-year"]], "polars.Expr.dt.month": [[357, "polars-expr-dt-month"]], "polars.Expr.cummax": [[326, "polars-expr-cummax"]], "polars.Expr.dt.minutes": [[356, "polars-expr-dt-minutes"]], "polars.Expr.count": [[324, "polars-expr-count"]], "polars.Expr.cut": [[331, "polars-expr-cut"]], "polars.Expr.dt.timestamp": [[371, "polars-expr-dt-timestamp"]], "polars.Expr.cbrt": [[317, "polars-expr-cbrt"]], "polars.Expr.arg_unique": [[301, "polars-expr-arg-unique"]], "polars.Expr.bin.starts_with": [[311, "polars-expr-bin-starts-with"]], "polars.Expr.bottom_k": [[312, "polars-expr-bottom-k"]], "polars.Expr.cumulative_eval": [[330, "polars-expr-cumulative-eval"]], "polars.Expr.dt.combine": [[339, "polars-expr-dt-combine"]], "polars.Expr.dt.is_leap_year": [[349, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.time": [[370, "polars-expr-dt-time"]], "polars.Expr.arg_true": [[300, "polars-expr-arg-true"]], "polars.Expr.dt.microsecond": [[351, "polars-expr-dt-microsecond"]], "polars.Expr.arr.sum": [[304, "polars-expr-arr-sum"]], "polars.Expr.dt.truncate": [[373, "polars-expr-dt-truncate"]], "polars.Expr.drop_nulls": [[336, "polars-expr-drop-nulls"]], "polars.Expr.dt.hour": [[347, "polars-expr-dt-hour"]], "polars.Expr.ceil": [[318, "polars-expr-ceil"]], "polars.Expr.dt.dst_offset": [[345, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.base_utc_offset": [[337, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.millisecond": [[353, "polars-expr-dt-millisecond"]], "polars.Expr.dt.month_end": [[358, "polars-expr-dt-month-end"]], "polars.Expr.dt.to_string": [[372, "polars-expr-dt-to-string"]], "polars.Expr.dt.date": [[341, "polars-expr-dt-date"]], "polars.Expr.dt.microseconds": [[352, "polars-expr-dt-microseconds"]], "polars.Expr.dt.cast_time_unit": [[338, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.month_start": [[359, "polars-expr-dt-month-start"]], "polars.Expr.degrees": [[332, "polars-expr-degrees"]], "polars.Expr.bin.decode": [[308, "polars-expr-bin-decode"]], "polars.Expr.cumprod": [[328, "polars-expr-cumprod"]], "polars.Expr.dt.day": [[343, "polars-expr-dt-day"]], "polars.Expr.diff": [[333, "polars-expr-diff"]], "polars.Expr.dt.epoch": [[346, "polars-expr-dt-epoch"]], "polars.Expr.bin.contains": [[307, "polars-expr-bin-contains"]], "polars.Expr.dt.seconds": [[368, "polars-expr-dt-seconds"]], "polars.Expr.clip_max": [[320, "polars-expr-clip-max"]], "polars.Expr.arr.min": [[303, "polars-expr-arr-min"]], "polars.Expr.arr.unique": [[305, "polars-expr-arr-unique"]], "polars.Expr.cumsum": [[329, "polars-expr-cumsum"]], "polars.Expr.dt.nanosecond": [[360, "polars-expr-dt-nanosecond"]], "polars.Expr.drop_nans": [[335, "polars-expr-drop-nans"]], "polars.Expr.dt.hours": [[348, "polars-expr-dt-hours"]], "polars.Expr.cast": [[314, "polars-expr-cast"]], "polars.Expr.clip_min": [[321, "polars-expr-clip-min"]], "polars.Expr.cat.set_ordering": [[316, "polars-expr-cat-set-ordering"]], "polars.Expr.cummin": [[327, "polars-expr-cummin"]], "polars.Expr.cumcount": [[325, "polars-expr-cumcount"]], "polars.Expr.bin.encode": [[309, "polars-expr-bin-encode"]], "polars.Expr.dt.strftime": [[369, "polars-expr-dt-strftime"]], "polars.Expr.backward_fill": [[306, "polars-expr-backward-fill"]], "polars.Expr.dt.days": [[344, "polars-expr-dt-days"]], "polars.Expr.dt.offset_by": [[362, "polars-expr-dt-offset-by"]], "polars.Expr.dt.milliseconds": [[354, "polars-expr-dt-milliseconds"]], "polars.Expr.arr.max": [[302, "polars-expr-arr-max"]], "polars.Expr.cosh": [[323, "polars-expr-cosh"]], "polars.Expr.cat.get_categories": [[315, "polars-expr-cat-get-categories"]], "polars.Expr.dt.minute": [[355, "polars-expr-dt-minute"]], "polars.Expr.dt.nanoseconds": [[361, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.week": [[374, "polars-expr-dt-week"]], "polars.Expr.cache": [[313, "polars-expr-cache"]], "polars.Expr.dot": [[334, "polars-expr-dot"]], "polars.Expr.dt.quarter": [[364, "polars-expr-dt-quarter"]], "polars.Expr.dt.convert_time_zone": [[340, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.round": [[366, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[367, "polars-expr-dt-second"]], "polars.DataFrame.fold": [[166, "polars-dataframe-fold"]], "polars.DataFrame.fill_nan": [[161, "polars-dataframe-fill-nan"]], "polars.DataFrame.is_empty": [[184, "polars-dataframe-is-empty"]], "polars.DataFrame.median": [[196, "polars-dataframe-median"]], "polars.DataFrame.rows": [[214, "polars-dataframe-rows"]], "polars.DataFrame.glimpse": [[170, "polars-dataframe-glimpse"]], "polars.DataFrame.corr": [[152, "polars-dataframe-corr"]], "polars.DataFrame.describe": [[153, "polars-dataframe-describe"]], "polars.DataFrame.map_rows": [[193, "polars-dataframe-map-rows"]], "polars.DataFrame.hash_rows": [[177, "polars-dataframe-hash-rows"]], "polars.DataFrame.shift": [[222, "polars-dataframe-shift"]], "polars.DataFrame.pipe": [[204, "polars-dataframe-pipe"]], "polars.DataFrame.min": [[199, "polars-dataframe-min"]], "polars.DataFrame.quantile": [[207, "polars-dataframe-quantile"]], "polars.DataFrame.is_duplicated": [[183, "polars-dataframe-is-duplicated"]], "polars.DataFrame.find_idx_by_name": [[164, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.item": [[186, "polars-dataframe-item"]], "polars.DataFrame.rechunk": [[208, "polars-dataframe-rechunk"]], "polars.DataFrame.is_unique": [[185, "polars-dataframe-is-unique"]], "polars.DataFrame.reverse": [[212, "polars-dataframe-reverse"]], "polars.DataFrame.select": [[218, "polars-dataframe-select"]], "polars.DataFrame.group_by_dynamic": [[172, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.drop_in_place": [[155, "polars-dataframe-drop-in-place"]], "polars.DataFrame.iter_slices": [[188, "polars-dataframe-iter-slices"]], "polars.DataFrame.rows_by_key": [[215, "polars-dataframe-rows-by-key"]], "polars.DataFrame.get_columns": [[169, "polars-dataframe-get-columns"]], "polars.DataFrame.columns": [[151, "polars-dataframe-columns"]], "polars.DataFrame.rename": [[209, "polars-dataframe-rename"]], "polars.DataFrame.dtypes": [[157, "polars-dataframe-dtypes"]], "polars.DataFrame.group_by": [[171, "polars-dataframe-group-by"]], "polars.DataFrame.merge_sorted": [[198, "polars-dataframe-merge-sorted"]], "polars.DataFrame.replace": [[210, "polars-dataframe-replace"]], "polars.DataFrame.shift_and_fill": [[223, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.shrink_to_fit": [[224, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.pivot": [[205, "polars-dataframe-pivot"]], "polars.DataFrame.frame_equal": [[167, "polars-dataframe-frame-equal"]], "polars.DataFrame.height": [[179, "polars-dataframe-height"]], "polars.DataFrame.join_asof": [[190, "polars-dataframe-join-asof"]], "polars.DataFrame.estimated_size": [[158, "polars-dataframe-estimated-size"]], "polars.DataFrame.max": [[194, "polars-dataframe-max"]], "polars.DataFrame.fill_null": [[162, "polars-dataframe-fill-null"]], "polars.DataFrame.insert_at_idx": [[181, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.clone": [[150, "polars-dataframe-clone"]], "polars.DataFrame.flags": [[165, "polars-dataframe-flags"]], "polars.DataFrame.groupby_rolling": [[176, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.groupby_dynamic": [[175, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.shape": [[221, "polars-dataframe-shape"]], "polars.DataFrame.join": [[189, "polars-dataframe-join"]], "polars.DataFrame.head": [[178, "polars-dataframe-head"]], "polars.DataFrame.hstack": [[180, "polars-dataframe-hstack"]], "polars.DataFrame.drop_nulls": [[156, "polars-dataframe-drop-nulls"]], "polars.DataFrame.row": [[213, "polars-dataframe-row"]], "polars.DataFrame.iter_rows": [[187, "polars-dataframe-iter-rows"]], "polars.DataFrame.n_unique": [[201, "polars-dataframe-n-unique"]], "polars.DataFrame.melt": [[197, "polars-dataframe-melt"]], "polars.DataFrame.product": [[206, "polars-dataframe-product"]], "polars.DataFrame.set_sorted": [[220, "polars-dataframe-set-sorted"]], "polars.DataFrame.sample": [[216, "polars-dataframe-sample"]], "polars.DataFrame.null_count": [[202, "polars-dataframe-null-count"]], "polars.DataFrame.limit": [[192, "polars-dataframe-limit"]], "polars.DataFrame.schema": [[217, "polars-dataframe-schema"]], "polars.DataFrame.select_seq": [[219, "polars-dataframe-select-seq"]], "polars.DataFrame.get_column": [[168, "polars-dataframe-get-column"]], "polars.DataFrame.replace_at_idx": [[211, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.partition_by": [[203, "polars-dataframe-partition-by"]], "polars.DataFrame.drop": [[154, "polars-dataframe-drop"]], "polars.DataFrame.explode": [[159, "polars-dataframe-explode"]], "polars.DataFrame.filter": [[163, "polars-dataframe-filter"]], "polars.DataFrame.groupby": [[174, "polars-dataframe-groupby"]], "polars.DataFrame.interpolate": [[182, "polars-dataframe-interpolate"]], "polars.DataFrame.extend": [[160, "polars-dataframe-extend"]], "polars.DataFrame.lazy": [[191, "polars-dataframe-lazy"]], "polars.DataFrame.mean": [[195, "polars-dataframe-mean"]], "polars.DataFrame.group_by_rolling": [[173, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.n_chunks": [[200, "polars-dataframe-n-chunks"]], "polars.DataFrame.to_dummies": [[234, "polars-dataframe-to-dummies"]], "polars.Expr.agg_groups": [[283, "polars-expr-agg-groups"]], "polars.Expr.arg_min": [[298, "polars-expr-arg-min"]], "polars.DataFrame.unique": [[242, "polars-dataframe-unique"]], "polars.DataFrame.take_every": [[230, "polars-dataframe-take-every"]], "polars.dataframe.group_by.GroupBy.median": [[264, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.head": [[259, "polars-dataframe-group-by-groupby-head"]], "polars.DataFrame.to_init_repr": [[235, "polars-dataframe-to-init-repr"]], "polars.dataframe.group_by.GroupBy.map_groups": [[261, "polars-dataframe-group-by-groupby-map-groups"]], "polars.DataFrame.width": [[249, "polars-dataframe-width"]], "polars.DataFrame.top_k": [[240, "polars-dataframe-top-k"]], "polars.DataFrame.std": [[227, "polars-dataframe-std"]], "polars.DataFrame.to_struct": [[239, "polars-dataframe-to-struct"]], "polars.dataframe.group_by.GroupBy.count": [[257, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.abs": [[281, "polars-expr-abs"]], "polars.dataframe.group_by.GroupBy.__iter__": [[253, "polars-dataframe-group-by-groupby-iter"]], "polars.Expr.approx_n_unique": [[290, "polars-expr-approx-n-unique"]], "polars.DataFrame.to_series": [[238, "polars-dataframe-to-series"]], "polars.Expr.arcsinh": [[294, "polars-expr-arcsinh"]], "polars.DataFrame.tail": [[229, "polars-dataframe-tail"]], "polars.dataframe.group_by.GroupBy.first": [[258, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.n_unique": [[266, "polars-dataframe-group-by-groupby-n-unique"]], "polars.DataFrame.slice": [[225, "polars-dataframe-slice"]], "polars.DataFrame.to_pandas": [[237, "polars-dataframe-to-pandas"]], "polars.Expr.arccosh": [[292, "polars-expr-arccosh"]], "polars.DataFrame.sum": [[228, "polars-dataframe-sum"]], "polars.DataFrame.unnest": [[243, "polars-dataframe-unnest"]], "polars.dataframe.group_by.GroupBy.all": [[255, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.arccos": [[291, "polars-expr-arccos"]], "polars.Expr.all": [[285, "polars-expr-all"]], "polars.DataFrame.update": [[245, "polars-dataframe-update"]], "polars.DataFrame.unstack": [[244, "polars-dataframe-unstack"]], "polars.Expr.arctan": [[295, "polars-expr-arctan"]], "polars.Expr.append": [[288, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.last": [[260, "polars-dataframe-group-by-groupby-last"]], "polars.DataFrame.upsample": [[246, "polars-dataframe-upsample"]], "polars.Expr.any": [[287, "polars-expr-any"]], "polars.Expr.arg_sort": [[299, "polars-expr-arg-sort"]], "polars.Expr.apply": [[289, "polars-expr-apply"]], "polars.DataFrame.with_columns": [[250, "polars-dataframe-with-columns"]], "polars.DataFrame.vstack": [[248, "polars-dataframe-vstack"]], "polars.dataframe.group_by.GroupBy.agg": [[254, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.max": [[262, "polars-dataframe-group-by-groupby-max"]], "polars.DataFrame.to_dict": [[232, "polars-dataframe-to-dict"]], "polars.dataframe.group_by.GroupBy.min": [[265, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.and_": [[286, "polars-expr-and"]], "polars.DataFrame.with_row_count": [[252, "polars-dataframe-with-row-count"]], "DataFrame": [[275, "dataframe"]], "polars.Expr.arctanh": [[296, "polars-expr-arctanh"]], "polars.Expr.alias": [[284, "polars-expr-alias"]], "polars.DataFrame.to_dicts": [[233, "polars-dataframe-to-dicts"]], "Exceptions": [[279, "exceptions"]], "polars.Expr.arg_max": [[297, "polars-expr-arg-max"]], "Data types": [[278, "data-types"]], "Nested": [[278, "nested"]], "Other": [[278, "other"]], "polars.dataframe.group_by.GroupBy.quantile": [[267, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.arcsin": [[293, "polars-expr-arcsin"]], "polars.DataFrame.with_columns_seq": [[251, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.to_arrow": [[231, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_numpy": [[236, "polars-dataframe-to-numpy"]], "polars.DataFrame.var": [[247, "polars-dataframe-var"]], "polars.DataFrame.sort": [[226, "polars-dataframe-sort"]], "polars.DataFrame.transpose": [[241, "polars-dataframe-transpose"]], "polars.dataframe.group_by.GroupBy.apply": [[256, "polars-dataframe-group-by-groupby-apply"]], "polars.dataframe.group_by.GroupBy.mean": [[263, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.add": [[282, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.sum": [[268, "polars-dataframe-group-by-groupby-sum"]], "polars.dataframe.group_by.GroupBy.tail": [[269, "polars-dataframe-group-by-groupby-tail"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[13, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[14, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[27, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[28, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[29, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[30, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[31, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[32, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[33, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[34, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[35, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[36, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[37, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[38, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[39, "polars.DataType"]], "__init__() (polars.datatype method)": [[39, "polars.DataType.__init__"]], "date (class in polars)": [[40, "polars.Date"]], "__init__() (polars.date method)": [[40, "polars.Date.__init__"]], "datetime (class in polars)": [[41, "polars.Datetime"]], "__init__() (polars.datetime method)": [[41, "polars.Datetime.__init__"]], "decimal (class in polars)": [[42, "polars.Decimal"]], "__init__() (polars.decimal method)": [[42, "polars.Decimal.__init__"]], "duration (class in polars)": [[43, "polars.Duration"]], "__init__() (polars.duration method)": [[43, "polars.Duration.__init__"]], "float32 (class in polars)": [[44, "polars.Float32"]], "__init__() (polars.float32 method)": [[44, "polars.Float32.__init__"]], "float64 (class in polars)": [[45, "polars.Float64"]], "__init__() (polars.float64 method)": [[45, "polars.Float64.__init__"]], "int16 (class in polars)": [[46, "polars.Int16"]], "__init__() (polars.int16 method)": [[46, "polars.Int16.__init__"]], "int32 (class in polars)": [[47, "polars.Int32"]], "__init__() (polars.int32 method)": [[47, "polars.Int32.__init__"]], "int64 (class in polars)": [[48, "polars.Int64"]], "__init__() (polars.int64 method)": [[48, "polars.Int64.__init__"]], "int8 (class in polars)": [[49, "polars.Int8"]], "__init__() (polars.int8 method)": [[49, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[53, "polars.List"]], "__init__() (polars.list method)": [[53, "polars.List.__init__"]], "null (class in polars)": [[54, "polars.Null"]], "__init__() (polars.null method)": [[54, "polars.Null.__init__"]], "object (class in polars)": [[55, "polars.Object"]], "__init__() (polars.object method)": [[55, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[56, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[57, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[58, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[59, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[60, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[61, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[62, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[62, "polars.StringCache.__init__"]], "struct (class in polars)": [[63, "polars.Struct"]], "__init__() (polars.struct method)": [[63, "polars.Struct.__init__"]], "time (class in polars)": [[64, "polars.Time"]], "__init__() (polars.time method)": [[64, "polars.Time.__init__"]], "uint16 (class in polars)": [[65, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[65, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[66, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[66, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[67, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[67, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[68, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[68, "polars.UInt8.__init__"]], "unknown (class in polars)": [[69, "polars.Unknown"]], "__init__() (polars.unknown method)": [[69, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[70, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[70, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[71, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[72, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[73, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[74, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[75, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[76, "polars.build_info"]], "collect_all() (in module polars)": [[77, "polars.collect_all"]], "collect_all_async() (in module polars)": [[78, "polars.collect_all_async"]], "concat() (in module polars)": [[79, "polars.concat"]], "disable_string_cache() (in module polars)": [[80, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[81, "polars.enable_string_cache"]], "arrowerror": [[82, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[83, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[84, "polars.exceptions.ComputeError"]], "duplicateerror": [[85, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[86, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[87, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[88, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[89, "polars.exceptions.PolarsPanicError"]], "rowserror": [[90, "polars.exceptions.RowsError"]], "schemaerror": [[91, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[92, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[93, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[94, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[95, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[96, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[97, "polars.from_dataframe"]], "from_dict() (in module polars)": [[98, "polars.from_dict"]], "from_dicts() (in module polars)": [[99, "polars.from_dicts"]], "from_numpy() (in module polars)": [[100, "polars.from_numpy"]], "from_pandas() (in module polars)": [[101, "polars.from_pandas"]], "from_records() (in module polars)": [[102, "polars.from_records"]], "from_repr() (in module polars)": [[103, "polars.from_repr"]], "get_index_type() (in module polars)": [[104, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[105, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[106, "polars.read_avro"]], "read_csv() (in module polars)": [[107, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[108, "polars.read_csv_batched"]], "read_database() (in module polars)": [[109, "polars.read_database"]], "read_database_uri() (in module polars)": [[110, "polars.read_database_uri"]], "read_delta() (in module polars)": [[111, "polars.read_delta"]], "read_excel() (in module polars)": [[112, "polars.read_excel"]], "read_ipc() (in module polars)": [[113, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[114, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[115, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[116, "polars.read_json"]], "read_ndjson() (in module polars)": [[117, "polars.read_ndjson"]], "read_ods() (in module polars)": [[118, "polars.read_ods"]], "read_parquet() (in module polars)": [[119, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[120, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[121, "polars.scan_csv"]], "scan_delta() (in module polars)": [[122, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[123, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[124, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[125, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[126, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[127, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[128, "polars.set_random_seed"]], "show_versions() (in module polars)": [[129, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[130, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[131, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[132, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[132, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[133, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[134, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[135, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[136, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[137, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[138, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[139, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[140, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[143, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[144, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[145, "polars.DataFrame.approx_n_unique"]], "approx_unique() (polars.dataframe method)": [[146, "polars.DataFrame.approx_unique"]], "bottom_k() (polars.dataframe method)": [[147, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[148, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[149, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[150, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[151, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[152, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[153, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[154, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[155, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[156, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[157, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[158, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[159, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[160, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[161, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[162, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[163, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[164, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[165, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[166, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[167, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[168, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[169, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[170, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[171, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[172, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[173, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[174, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[175, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[176, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[177, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[178, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[179, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[180, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[181, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[182, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[183, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[184, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[185, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[186, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[187, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[188, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[189, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[190, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[191, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[192, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[193, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[194, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[195, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[196, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[197, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[198, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[199, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[200, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[201, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[202, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[203, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[204, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[205, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[206, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[207, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[208, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[209, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[210, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[211, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[212, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[213, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[214, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[215, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[216, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[217, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[218, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[219, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[220, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[221, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[222, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[223, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[224, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[225, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[226, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[227, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[228, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[229, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[230, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[231, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[232, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[233, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[234, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[235, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[236, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[237, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[238, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[239, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[240, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[241, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[242, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[243, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[244, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[245, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[246, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[247, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[248, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[249, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[250, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[251, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[252, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[253, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[254, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[255, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[256, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[257, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[258, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[259, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[260, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[261, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[262, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[263, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[264, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[265, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[266, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[267, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[268, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[269, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[281, "polars.Expr.abs"]], "add() (polars.expr method)": [[282, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[283, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[284, "polars.Expr.alias"]], "all() (polars.expr method)": [[285, "polars.Expr.all"]], "and_() (polars.expr method)": [[286, "polars.Expr.and_"]], "any() (polars.expr method)": [[287, "polars.Expr.any"]], "append() (polars.expr method)": [[288, "polars.Expr.append"]], "apply() (polars.expr method)": [[289, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[290, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[291, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[292, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[293, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[294, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[295, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[296, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[297, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[298, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[299, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[300, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[301, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[302, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[303, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[304, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[305, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[306, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[307, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[308, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[309, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[310, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[311, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[312, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[313, "polars.Expr.cache"]], "cast() (polars.expr method)": [[314, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[315, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[316, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[317, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[318, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[319, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[320, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[321, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[322, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[323, "polars.Expr.cosh"]], "count() (polars.expr method)": [[324, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[325, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[326, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[327, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[328, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[329, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[330, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[331, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[332, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[333, "polars.Expr.diff"]], "dot() (polars.expr method)": [[334, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[335, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[336, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[337, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[338, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[339, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[340, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[341, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[342, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[343, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[344, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[345, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[346, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[347, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[348, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[349, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[350, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[351, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[352, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[353, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[354, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[355, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[356, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[357, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[358, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[359, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[360, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[361, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[362, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[363, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[364, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[365, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[366, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[367, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[368, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[369, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[370, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[371, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[372, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[373, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[374, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[375, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[376, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[377, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[378, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[379, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[380, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[381, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[382, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[383, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[384, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[385, "polars.Expr.exp"]], "explode() (polars.expr method)": [[386, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[387, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[388, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[389, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[390, "polars.Expr.filter"]], "first() (polars.expr method)": [[391, "polars.Expr.first"]], "flatten() (polars.expr method)": [[392, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[393, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[394, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[395, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[396, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[397, "polars.Expr.ge"]], "gt() (polars.expr method)": [[398, "polars.Expr.gt"]], "hash() (polars.expr method)": [[399, "polars.Expr.hash"]], "head() (polars.expr method)": [[400, "polars.Expr.head"]], "implode() (polars.expr method)": [[401, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[402, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[403, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[404, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[405, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[406, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[407, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[408, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[409, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[410, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[411, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[412, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[413, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[414, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[415, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[416, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[417, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[418, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[419, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[420, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[421, "polars.Expr.last"]], "le() (polars.expr method)": [[422, "polars.Expr.le"]], "len() (polars.expr method)": [[423, "polars.Expr.len"]], "limit() (polars.expr method)": [[424, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[425, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[426, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[427, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[428, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[429, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[430, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[431, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[432, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[433, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[434, "polars.Expr.list.difference"]], "drop_nulls() (polars.expr.list method)": [[435, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[436, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[437, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[438, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[439, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[440, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[441, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[442, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[443, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[444, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[445, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[446, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[447, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[448, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[449, "polars.Expr.list.reverse"]], "set_difference() (polars.expr.list method)": [[450, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[451, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[452, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[453, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[454, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[455, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[456, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[457, "polars.Expr.list.sum"]], "symmetric_difference() (polars.expr.list method)": [[458, "polars.Expr.list.symmetric_difference"]], "tail() (polars.expr.list method)": [[459, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[460, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[461, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[462, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[463, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[464, "polars.Expr.log"]], "log10() (polars.expr method)": [[465, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[466, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[467, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[468, "polars.Expr.lt"]], "map() (polars.expr method)": [[469, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[470, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[471, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[472, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[473, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[474, "polars.Expr.max"]], "mean() (polars.expr method)": [[475, "polars.Expr.mean"]], "median() (polars.expr method)": [[476, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[477, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[478, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[479, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[480, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[481, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[482, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[483, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[484, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[485, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[486, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[487, "polars.Expr.min"]], "mod() (polars.expr method)": [[488, "polars.Expr.mod"]], "mode() (polars.expr method)": [[489, "polars.Expr.mode"]], "mul() (polars.expr method)": [[490, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[491, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[492, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[493, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[494, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[495, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[496, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[497, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[498, "polars.Expr.or_"]], "over() (polars.expr method)": [[499, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[500, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[501, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[502, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[503, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[504, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[505, "polars.Expr.prefix"]], "product() (polars.expr method)": [[506, "polars.Expr.product"]], "qcut() (polars.expr method)": [[507, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[508, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[509, "polars.Expr.radians"]], "rank() (polars.expr method)": [[510, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[511, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[512, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[513, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[514, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[515, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[516, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[517, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[518, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[519, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[520, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[521, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[522, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[523, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[524, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[525, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[526, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[527, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[528, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[529, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[530, "polars.Expr.round"]], "sample() (polars.expr method)": [[531, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[532, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[533, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[534, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[535, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[536, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[537, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[538, "polars.Expr.sign"]], "sin() (polars.expr method)": [[539, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[540, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[541, "polars.Expr.skew"]], "slice() (polars.expr method)": [[542, "polars.Expr.slice"]], "sort() (polars.expr method)": [[543, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[544, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[545, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[546, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[547, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[548, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[549, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[550, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[551, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[552, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[553, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[554, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[555, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[556, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[557, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[558, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[559, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[560, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[561, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[562, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[563, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[564, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[565, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[566, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[567, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[568, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[569, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[570, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[571, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[572, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[573, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[574, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[575, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[576, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[577, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[578, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[579, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[580, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[581, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[582, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[583, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[584, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[585, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[586, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[587, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[588, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[589, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[590, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[591, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[592, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[593, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[594, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[595, "polars.Expr.sum"]], "tail() (polars.expr method)": [[596, "polars.Expr.tail"]], "take() (polars.expr method)": [[597, "polars.Expr.take"]], "take_every() (polars.expr method)": [[598, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[599, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[600, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[601, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[602, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[603, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[604, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[605, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[606, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[607, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[608, "polars.Expr.var"]], "where() (polars.expr method)": [[609, "polars.Expr.where"]], "xor() (polars.expr method)": [[610, "polars.Expr.xor"]], "all() (in module polars)": [[611, "polars.all"]], "all_horizontal() (in module polars)": [[612, "polars.all_horizontal"]], "any() (in module polars)": [[613, "polars.any"]], "any_horizontal() (in module polars)": [[614, "polars.any_horizontal"]], "apply() (in module polars)": [[615, "polars.apply"]], "approx_n_unique() (in module polars)": [[616, "polars.approx_n_unique"]], "arange() (in module polars)": [[617, "polars.arange"]], "arctan2() (in module polars)": [[618, "polars.arctan2"]], "arctan2d() (in module polars)": [[619, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[620, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[621, "polars.arg_where"]], "avg() (in module polars)": [[622, "polars.avg"]], "coalesce() (in module polars)": [[623, "polars.coalesce"]], "concat_list() (in module polars)": [[624, "polars.concat_list"]], "concat_str() (in module polars)": [[625, "polars.concat_str"]], "corr() (in module polars)": [[626, "polars.corr"]], "count() (in module polars)": [[627, "polars.count"]], "cov() (in module polars)": [[628, "polars.cov"]], "cumfold() (in module polars)": [[629, "polars.cumfold"]], "cumreduce() (in module polars)": [[630, "polars.cumreduce"]], "cumsum() (in module polars)": [[631, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[632, "polars.cumsum_horizontal"]], "date() (in module polars)": [[633, "polars.date"]], "date_range() (in module polars)": [[634, "polars.date_range"]], "date_ranges() (in module polars)": [[635, "polars.date_ranges"]], "datetime() (in module polars)": [[636, "polars.datetime"]], "datetime_range() (in module polars)": [[637, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[638, "polars.datetime_ranges"]], "duration() (in module polars)": [[639, "polars.duration"]], "element() (in module polars)": [[640, "polars.element"]], "exclude() (in module polars)": [[641, "polars.exclude"]], "first() (in module polars)": [[642, "polars.first"]], "fold() (in module polars)": [[643, "polars.fold"]], "format() (in module polars)": [[644, "polars.format"]], "from_epoch() (in module polars)": [[645, "polars.from_epoch"]], "groups() (in module polars)": [[646, "polars.groups"]], "head() (in module polars)": [[647, "polars.head"]], "implode() (in module polars)": [[648, "polars.implode"]], "int_range() (in module polars)": [[649, "polars.int_range"]], "int_ranges() (in module polars)": [[650, "polars.int_ranges"]], "last() (in module polars)": [[651, "polars.last"]], "lit() (in module polars)": [[652, "polars.lit"]], "map() (in module polars)": [[653, "polars.map"]], "map_batches() (in module polars)": [[654, "polars.map_batches"]], "map_groups() (in module polars)": [[655, "polars.map_groups"]], "max() (in module polars)": [[656, "polars.max"]], "max_horizontal() (in module polars)": [[657, "polars.max_horizontal"]], "mean() (in module polars)": [[658, "polars.mean"]], "median() (in module polars)": [[659, "polars.median"]], "min() (in module polars)": [[660, "polars.min"]], "min_horizontal() (in module polars)": [[661, "polars.min_horizontal"]], "n_unique() (in module polars)": [[662, "polars.n_unique"]], "ones() (in module polars)": [[663, "polars.ones"]], "quantile() (in module polars)": [[664, "polars.quantile"]], "reduce() (in module polars)": [[665, "polars.reduce"]], "repeat() (in module polars)": [[666, "polars.repeat"]], "rolling_corr() (in module polars)": [[667, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[668, "polars.rolling_cov"]], "select() (in module polars)": [[669, "polars.select"]], "sql_expr() (in module polars)": [[670, "polars.sql_expr"]], "std() (in module polars)": [[671, "polars.std"]], "struct() (in module polars)": [[672, "polars.struct"]], "sum() (in module polars)": [[673, "polars.sum"]], "sum_horizontal() (in module polars)": [[674, "polars.sum_horizontal"]], "tail() (in module polars)": [[675, "polars.tail"]], "time() (in module polars)": [[676, "polars.time"]], "time_range() (in module polars)": [[677, "polars.time_range"]], "time_ranges() (in module polars)": [[678, "polars.time_ranges"]], "var() (in module polars)": [[679, "polars.var"]], "when() (in module polars)": [[680, "polars.when"]], "zeros() (in module polars)": [[681, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[704, "polars.LazyFrame.approx_n_unique"]], "approx_unique() (polars.lazyframe method)": [[705, "polars.LazyFrame.approx_unique"]], "bottom_k() (polars.lazyframe method)": [[706, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[707, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[708, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[709, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[710, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[711, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[712, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[713, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[714, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[715, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[716, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[717, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[718, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[719, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[720, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[721, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[722, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[723, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[724, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[725, "polars.LazyFrame.from_json"]], "group_by() (polars.lazyframe method)": [[726, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[727, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[728, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[729, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[730, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[731, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[732, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[733, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[734, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[735, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[736, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[737, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[738, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[739, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[740, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[741, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[742, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[743, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[744, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[745, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[746, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[747, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[748, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[749, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[750, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[751, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[752, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[753, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[754, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[755, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[756, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[757, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[758, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[759, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[760, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[761, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[762, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[763, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[764, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[765, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[766, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[767, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[768, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[769, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[770, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[771, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[772, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[773, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[774, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[775, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[776, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[777, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[778, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[779, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[780, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[781, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[782, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[783, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[784, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[785, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[786, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[787, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[788, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[789, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[790, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[791, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[792, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[793, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[794, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[795, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[802, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[802, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[802, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[802, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[802, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[802, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[802, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[802, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[802, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[802, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[802, "polars.selectors.first"]], "float() (in module polars.selectors)": [[802, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[802, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[802, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[802, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[802, "polars.selectors.matches"]], "module": [[802, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[802, "polars.selectors.numeric"]], "polars.selectors": [[802, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[802, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[802, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[802, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[802, "polars.selectors.time"]], "abs() (polars.series method)": [[804, "polars.Series.abs"]], "alias() (polars.series method)": [[805, "polars.Series.alias"]], "all() (polars.series method)": [[806, "polars.Series.all"]], "any() (polars.series method)": [[807, "polars.Series.any"]], "append() (polars.series method)": [[808, "polars.Series.append"]], "apply() (polars.series method)": [[809, "polars.Series.apply"]], "arccos() (polars.series method)": [[810, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[811, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[812, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[813, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[814, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[815, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[816, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[817, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[818, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[819, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[820, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[821, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[822, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[823, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[824, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[825, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[826, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[827, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[828, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[829, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[830, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[831, "polars.Series.cast"]], "cat (polars.series attribute)": [[832, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[833, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[834, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[835, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[836, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[837, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[838, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[839, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[840, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[841, "polars.Series.clear"]], "clip() (polars.series method)": [[842, "polars.Series.clip"]], "clip_max() (polars.series method)": [[843, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[844, "polars.Series.clip_min"]], "clone() (polars.series method)": [[845, "polars.Series.clone"]], "cos() (polars.series method)": [[846, "polars.Series.cos"]], "cosh() (polars.series method)": [[847, "polars.Series.cosh"]], "cummax() (polars.series method)": [[848, "polars.Series.cummax"]], "cummin() (polars.series method)": [[849, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[850, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[851, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[852, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[853, "polars.Series.cut"]], "describe() (polars.series method)": [[854, "polars.Series.describe"]], "diff() (polars.series method)": [[855, "polars.Series.diff"]], "dot() (polars.series method)": [[856, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[857, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[858, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[859, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[860, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[861, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[862, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[863, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[864, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[865, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[866, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[867, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[868, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[869, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[870, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[871, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[872, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[873, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[874, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[875, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[876, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[877, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[878, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[879, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[880, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[881, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[882, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[883, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[884, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[885, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[886, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[887, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[888, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[889, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[890, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[891, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[892, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[893, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[894, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[895, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[896, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[897, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[898, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[899, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[900, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[901, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[902, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[903, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[904, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[905, "polars.Series.dtype"]], "entropy() (polars.series method)": [[906, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[907, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[908, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[909, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[910, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[911, "polars.Series.exp"]], "explode() (polars.series method)": [[912, "polars.Series.explode"]], "extend() (polars.series method)": [[913, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[914, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[915, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[916, "polars.Series.fill_null"]], "filter() (polars.series method)": [[917, "polars.Series.filter"]], "flags (polars.series attribute)": [[918, "polars.Series.flags"]], "floor() (polars.series method)": [[919, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[920, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[921, "polars.Series.has_validity"]], "hash() (polars.series method)": [[922, "polars.Series.hash"]], "head() (polars.series method)": [[923, "polars.Series.head"]], "hist() (polars.series method)": [[924, "polars.Series.hist"]], "implode() (polars.series method)": [[925, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[926, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[927, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[928, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[929, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[930, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[931, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[932, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[933, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[934, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[935, "polars.Series.is_float"]], "is_in() (polars.series method)": [[936, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[937, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[938, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[939, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[940, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[941, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[942, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[943, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[944, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[945, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[946, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[947, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[948, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[949, "polars.Series.is_utf8"]], "item() (polars.series method)": [[950, "polars.Series.item"]], "kurtosis() (polars.series method)": [[951, "polars.Series.kurtosis"]], "len() (polars.series method)": [[952, "polars.Series.len"]], "limit() (polars.series method)": [[953, "polars.Series.limit"]], "list (polars.series attribute)": [[954, "polars.Series.list"]], "all() (polars.series.list method)": [[955, "polars.Series.list.all"]], "any() (polars.series.list method)": [[956, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[957, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[958, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[959, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[960, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[961, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[962, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[963, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[964, "polars.Series.list.difference"]], "drop_nulls() (polars.series.list method)": [[965, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[966, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[967, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[968, "polars.Series.list.first"]], "get() (polars.series.list method)": [[969, "polars.Series.list.get"]], "head() (polars.series.list method)": [[970, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[971, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[972, "polars.Series.list.join"]], "last() (polars.series.list method)": [[973, "polars.Series.list.last"]], "len() (polars.series.list method)": [[974, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[975, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[976, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[977, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[978, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[979, "polars.Series.list.reverse"]], "set_difference() (polars.series.list method)": [[980, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[981, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[982, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[983, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[984, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[985, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[986, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[987, "polars.Series.list.sum"]], "symmetric_difference() (polars.series.list method)": [[988, "polars.Series.list.symmetric_difference"]], "tail() (polars.series.list method)": [[989, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[990, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[991, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[992, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[993, "polars.Series.list.unique"]], "log() (polars.series method)": [[994, "polars.Series.log"]], "log10() (polars.series method)": [[995, "polars.Series.log10"]], "log1p() (polars.series method)": [[996, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[997, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[998, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[999, "polars.Series.map_elements"]], "max() (polars.series method)": [[1000, "polars.Series.max"]], "mean() (polars.series method)": [[1001, "polars.Series.mean"]], "median() (polars.series method)": [[1002, "polars.Series.median"]], "min() (polars.series method)": [[1003, "polars.Series.min"]], "mode() (polars.series method)": [[1004, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1005, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1006, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1007, "polars.Series.name"]], "nan_max() (polars.series method)": [[1008, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1009, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1010, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1011, "polars.Series.not_"]], "null_count() (polars.series method)": [[1012, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1013, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1014, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1015, "polars.Series.peak_min"]], "product() (polars.series method)": [[1016, "polars.Series.product"]], "qcut() (polars.series method)": [[1017, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1018, "polars.Series.quantile"]], "rank() (polars.series method)": [[1019, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1020, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1021, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1022, "polars.Series.rename"]], "reshape() (polars.series method)": [[1023, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1024, "polars.Series.reverse"]], "rle() (polars.series method)": [[1025, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1026, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1027, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1028, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1029, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1030, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1031, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1032, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1033, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1034, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1035, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1036, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1037, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1038, "polars.Series.round"]], "sample() (polars.series method)": [[1039, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[1040, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1041, "polars.Series.series_equal"]], "set() (polars.series method)": [[1042, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1043, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1044, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1045, "polars.Series.shape"]], "shift() (polars.series method)": [[1046, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1047, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1048, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1049, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1050, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1051, "polars.Series.sign"]], "sin() (polars.series method)": [[1052, "polars.Series.sin"]], "sinh() (polars.series method)": [[1053, "polars.Series.sinh"]], "skew() (polars.series method)": [[1054, "polars.Series.skew"]], "slice() (polars.series method)": [[1055, "polars.Series.slice"]], "sort() (polars.series method)": [[1056, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1057, "polars.Series.sqrt"]], "std() (polars.series method)": [[1058, "polars.Series.std"]], "str (polars.series attribute)": [[1059, "polars.Series.str"]], "concat() (polars.series.str method)": [[1060, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1061, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1062, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1063, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1064, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1065, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1066, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1067, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1068, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1069, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1070, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[1071, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1072, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1073, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1074, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1075, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1076, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1077, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1078, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[1079, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1080, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1081, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1082, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1083, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1084, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1085, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1086, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1087, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1088, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1089, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1090, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1091, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1092, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1093, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1094, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1095, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1096, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1097, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1098, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1099, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1100, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1101, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1102, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1103, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1104, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1105, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1106, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1107, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1108, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1109, "polars.Series.sum"]], "tail() (polars.series method)": [[1110, "polars.Series.tail"]], "take() (polars.series method)": [[1111, "polars.Series.take"]], "take_every() (polars.series method)": [[1112, "polars.Series.take_every"]], "tan() (polars.series method)": [[1113, "polars.Series.tan"]], "tanh() (polars.series method)": [[1114, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1115, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1116, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1117, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1118, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1119, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1120, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1121, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1122, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1123, "polars.Series.top_k"]], "unique() (polars.series method)": [[1124, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1125, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1126, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1127, "polars.Series.value_counts"]], "var() (polars.series method)": [[1128, "polars.Series.var"]], "view() (polars.series method)": [[1129, "polars.Series.view"]], "zip_with() (polars.series method)": [[1130, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1146, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1146, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1146, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1146, "polars.SQLContext.__init__"]]}})